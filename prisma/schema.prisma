generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Player {
  playerId        Int               @id @default(autoincrement()) @map("player_id")
  playerName      String            @map("player_name")
  GameSetToPlayer GameSetToPlayer[]
  playerSessions  PlayerSession[]
  playerStats     PlayerStat[]
  matchWins       Match[]           @relation("MatchToPlayer")
  dayWins         Session[]         @relation("PlayerToSession")

  @@map("players")
}

model Game {
  gameId      Int          @id @default(autoincrement()) @map("game_id")
  gameName    String       @unique @map("game_name")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gameStats   GameStat[]
  playerStats PlayerStat[]
  sessions    Session[]

  @@map("games")
}

model GameStat {
  statId      Int          @id @default(autoincrement()) @map("stat_id")
  statName    StatName     @map("stat_name")
  gameId      Int          @map("game_id")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String       @default("SYSTEM") @map("created_by")
  type        StatType     @default(INT) @map("type")
  game        Game         @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  playerStats PlayerStat[]

  @@map("game_stats")
}

model Session {
  sessionId   Int       @id @default(autoincrement()) @map("session_id")
  sessionName String    @map("session_name")
  sessionUrl  String    @map("session_url")
  gameId      Int       @map("game_id")
  thumbnail   String
  date        DateTime  @default(now())
  videoId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isApproved  Boolean   @default(false) @map("is_approved")
  createdBy   String    @default("SYSTEM") @map("created_by")
  Game        Game      @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  sets        GameSet[]
  dayWinners  Player[]  @relation("PlayerToSession")

  @@unique([gameId, videoId])
  @@map("sessions")
}

model GameSet {
  setId           Int               @id @default(autoincrement()) @map("set_id")
  sessionId       Int               @map("session_id")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  GameSetToPlayer GameSetToPlayer[]
  matches         Match[]
  playerSessions  PlayerSession[]
  session         Session           @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)

  @@map("sets")
}

model Match {
  matchId        Int             @id @default(autoincrement()) @map("match_id")
  setId          Int             @map("set_id")
  date           DateTime        @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  set            GameSet         @relation(fields: [setId], references: [setId], onDelete: Cascade)
  playerSessions PlayerSession[]
  matchWinners   Player[]        @relation("MatchToPlayer")

  @@map("matches")
}

model PlayerSession {
  playerSessionId Int          @id @default(autoincrement()) @map("player_session_id")
  playerId        Int          @map("player_id")
  sessionId       Int          @map("session_id")
  matchId         Int          @map("match_id")
  setId           Int          @map("set_id")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  match           Match        @relation(fields: [matchId], references: [matchId], onDelete: Cascade)
  player          Player       @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  set             GameSet      @relation(fields: [setId], references: [setId], onDelete: Cascade)
  playerStats     PlayerStat[]

  @@map("player_sessions")
}

model PlayerStat {
  playerStatId    Int           @id @default(autoincrement()) @map("player_stat_id")
  playerId        Int           @map("player_id")
  gameId          Int           @map("game_id")
  playerSessionId Int           @map("player_session_id")
  statId          Int           @map("stat_id")
  value           String
  date            DateTime      @default(now())
  game            Game          @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  player          Player        @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  playerSession   PlayerSession @relation(fields: [playerSessionId], references: [playerSessionId], onDelete: Cascade)
  gameStat        GameStat      @relation(fields: [statId], references: [statId], onDelete: Cascade)

  @@map("player_stats")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model GameSetToPlayer {
  A       Int
  B       Int
  sets    GameSet @relation(fields: [A], references: [setId], onDelete: Cascade)
  players Player  @relation(fields: [B], references: [playerId], onDelete: Cascade)

  @@id([A, B], map: "_GameSetToPlayer_AB_pkey")
  @@index([B], map: "_GameSetToPlayer_B_index")
  @@map("_GameSetToPlayer")
}

enum StatName {
  MK8_POS
  MK8_DAY
  RL_SCORE
  RL_GOALS
  RL_ASSISTS
  RL_SAVES
  RL_SHOTS
  RL_DAY
  COD_KILLS
  COD_DEATHS
  COD_SCORE
  COD_POS
  COD_MELEES
  LC_DEATHS
  SR_WINS
  SR_SETS
  SR_POS
}

enum StatType {
  INT
  STRING
}
