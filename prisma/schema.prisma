// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used during development to connect to dev db
}

/////////////////////////
// Project RDC Models   
// Player Ids      
// 1. Mark 
// 2. Dylan
// 3. Des 
// 4. Ben
// 5. Lee
// 6. John 
// 7. Aff 
// 8. Ippi 
//////////////////////

// {player_id: 1, player_name: "Mark", player_game_stats: []}
model Player {
  playerId       Int             @id @default(autoincrement()) @map("player_id")
  playerName     String          @map("player_name")
  playerSessions PlayerSession[]
  playerStats    PlayerStat[]
  matchWins      Match[]
  setWins        GameSet[]

  @@map("players")
}

// { game_id: 1, game_name: 'Mario Kart', game_stats: [], player_game_stats: [] }
model Game {
  gameId      Int           @id @default(autoincrement()) @map("game_id")
  gameName    String        @map("game_name")
  gameStats   GameStat[]
  playerStats PlayerStat[]
  sessions    Session[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  @@map("games")
}

// Define enum for stat names
// Keep in sync with enum in utils and seed.
enum StatName {
  MK8_POS
  MK8_DAY
  RL_SCORE
  RL_GOALS
  RL_ASSISTS
  RL_SAVES
  RL_SHOTS
  RL_DAY
  COD_KILLS
  COD_DEATHS
  COD_SCORE
  COD_POS
  LC_DEATHS
  SR_WINS
  SR_SETS
  SR_POS
}

// { stat_id: 1, game_id: 1, stat_name: 'MK_POS', playerStats: [], type: 'int' }
model GameStat {
  statId      Int           @id @default(autoincrement()) @map("stat_id")
  statName    StatName      @map("stat_name")
  gameId      Int           @map("game_id")
  game        Game          @relation(fields: [gameId], references: [gameId])
  playerStats PlayerStat[]
  type        String?       @map("type") // Don't think there is any stat there is not an int can probably remove
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // createdBy   String        @map("created_by")  @default("SYSTEM")
  @@map("game_stats")
}

model Session {
  sessionId   Int       @id @default(autoincrement()) @map("session_id")
  sessionName String    @map("session_name")
  sessionUrl  String    @map("session_url")
  gameId      Int       @map("game_id")
  Game        Game      @relation(fields: [gameId], references: [gameId])
  sets        GameSet[]
  thumbnail   String
  date        DateTime  @default(now()) // Date video posted
  videoId     String    @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // isApproved  Boolean   @map("is_approved") @default(false)
  // createdBy   String    @map("created_by")  @default("SYSTEM")
  @@map("sessions")
}

// Set Table Concept 
model GameSet {
  setId          Int            @id @default(autoincrement()) @map("set_id")
  playerSessions PlayerSession[]
  matches        Match[]
  sessionId      Int            @map("session_id")
  session        Session        @relation(fields: [sessionId], references: [sessionId])
  setWinners     Player[]
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  @@map("sets")
}

model Match {
  matchId        Int            @id @default(autoincrement()) @map("match_id")
  matchWinners   Player[]
  playerSessions PlayerSession[]
  setId          Int            @map("set_id")
  set            GameSet        @relation(fields: [setId], references: [setId])
  date           DateTime       @default(now()) // Date video posted
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  @@map("matches")
}

// Join Table between Session & Player
model PlayerSession {
  playerSessionId Int          @id @default(autoincrement()) @map("player_session_id")
  playerId        Int          @map("player_id")
  player          Player       @relation(fields: [playerId], references: [playerId])
  playerStats     PlayerStat[]
  sessionId       Int          @map("session_id")
  matchId         Int          @map("match_id")
  match           Match        @relation(fields: [matchId], references: [matchId])
  setId           Int          @map("set_id")
  set             GameSet      @relation(fields: [setId], references: [setId])
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  @@map("player_sessions")
}

// { player_game_stat_id: 1, player_id: 1, game_id: 1, stat_id: 1, value: }
model PlayerStat {
  playerStatId    Int           @id @default(autoincrement()) @map("player_stat_id")
  playerId        Int           @map("player_id")
  player          Player        @relation(fields: [playerId], references: [playerId])
  gameId          Int           @map("game_id")
  game            Game          @relation(fields: [gameId], references: [gameId])
  playerSessionId Int           @map("player_session_id")
  playerSession   PlayerSession @relation(fields: [playerSessionId], references: [playerSessionId])
  statId          Int           @map("stat_id")
  gameStat        GameStat      @relation(fields: [statId], references: [statId])
  value           String
  date            DateTime      @default(now()) // Date video posted

  @@map("player_stats")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}