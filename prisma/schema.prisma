generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql", "driverAdapters"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Player {
  playerId        Int               @id @default(autoincrement()) @map("player_id")
  playerName      String            @map("player_name")
  playerSessions  PlayerSession[]
  playerStats     PlayerStat[]
  matchWins       Match[]
  setWins         GameSet[]
  dayWins         Session[]         @relation("DayWinners")
  mvpOf           Session[]         @relation("Mvp")
  GameSetToPlayer GameSetToPlayer[]

  @@map("players")
}

model Game {
  gameId      Int          @id @default(autoincrement()) @map("game_id")
  gameName    String       @unique @map("game_name")
  gameStats   GameStat[]
  playerStats PlayerStat[]
  sessions    Session[]

  @@map("games")
}

model GameSetToPlayer {
  A       Int
  B       Int
  sets    GameSet @relation(fields: [A], references: [setId], onDelete: Cascade)
  players Player  @relation(fields: [B], references: [playerId], onDelete: Cascade)

  @@id([A, B], map: "_GameSetToPlayer_AB_pkey")
  @@index([B], map: "_GameSetToPlayer_B_index")
  @@map("_GameSetToPlayer")
}

enum StatType {
  INT
  STRING
}

// { stat_id: 1, game_id: 1, stat_name: 'MK_POS', playerStats: [], type: 'int' }
model GameStat {
  statId      Int          @id @default(autoincrement()) @map("stat_id")
  statName    String       @map("stat_name")
  gameId      Int          @map("game_id")
  game        Game         @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  playerStats PlayerStat[]
  type        StatType     @default(INT) @map("type")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy String @default("SYSTEM") @map("created_by")

  @@map("game_stats")
}

model Session {
  sessionId           Int                  @id @default(autoincrement()) @map("session_id")
  sessionName         String               @map("session_name")
  sessionUrl          String               @map("session_url")
  gameId              Int                  @map("game_id")
  Game                Game                 @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  sets                GameSet[]
  dayWinners          Player[]             @relation("DayWinners")
  sessionEditRequests SessionEditRequest[]
  thumbnail           String
  date                DateTime             @default(now()) // Date video posted
  videoId             String
  mvp                 Player?              @relation("Mvp", fields: [mvpId], references: [playerId], onDelete: SetNull) // on delete not in schema
  mvpId               Int?
  mvpDescription      String?
  /// [MvpOutput]
  mvpStats            Json? // json not in schema
  sessionRevisions    SessionRevision[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isApproved Boolean @default(false) @map("is_approved")
  createdBy  String  @default("SYSTEM") @map("created_by")

  @@unique([gameId, videoId])
  @@map("sessions")
}

// Set Table Concept 
model GameSet {
  setId          Int             @id @default(autoincrement()) @map("set_id")
  playerSessions PlayerSession[]
  matches        Match[]
  sessionId      Int             @map("session_id")
  session        Session         @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  setWinners     Player[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  GameSetToPlayer GameSetToPlayer[]

  @@map("sets")
}

model Match {
  matchId        Int             @id @default(autoincrement()) @map("match_id")
  matchWinners   Player[]
  playerSessions PlayerSession[]
  setId          Int             @map("set_id")
  set            GameSet         @relation(fields: [setId], references: [setId], onDelete: Cascade)
  date           DateTime        @default(now()) // Date video posted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("matches")
}

// Join Table between Session & Player
model PlayerSession {
  playerSessionId Int          @id @default(autoincrement()) @map("player_session_id")
  playerId        Int          @map("player_id")
  player          Player       @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  playerStats     PlayerStat[]
  sessionId       Int          @map("session_id")
  matchId         Int          @map("match_id")
  match           Match        @relation(fields: [matchId], references: [matchId], onDelete: Cascade)
  setId           Int          @map("set_id")
  set             GameSet      @relation(fields: [setId], references: [setId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("player_sessions")
}

// { player_game_stat_id: 1, player_id: 1, game_id: 1, stat_id: 1, value: }
model PlayerStat {
  playerStatId    Int           @id @default(autoincrement()) @map("player_stat_id")
  playerId        Int           @map("player_id")
  player          Player        @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  gameId          Int           @map("game_id")
  game            Game          @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  playerSessionId Int           @map("player_session_id")
  playerSession   PlayerSession @relation(fields: [playerSessionId], references: [playerSessionId], onDelete: Cascade)
  statId          Int           @map("stat_id")
  gameStat        GameStat      @relation(fields: [statId], references: [statId], onDelete: Cascade)
  value           String
  date            DateTime      @default(now()) // Date video posted

  @@map("player_stats")
}

model User {
  id            String               @id @default(cuid())
  name          String?
  email         String               @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  // Inverse relations for session edit requests
  proposedEdits SessionEditRequest[] @relation("SessionEditProposer")
  reviewedEdits SessionEditRequest[] @relation("SessionEditReviewer")
}

model SheetSync {
  id          Int      @id @default(autoincrement())
  sheetName   String   @unique
  lastRow     Int      @default(0)
  lastVideoId String?
  lastUpdated DateTime @updatedAt
  summary     String?

  @@map("sheet_sync")
}

enum EditStatus {
  PENDING
  APPROVED
  REJECTED
}

model SessionEditRequest {
  id           Int        @id @default(autoincrement())
  sessionId    Int        @map("session_id")
  session      Session    @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  proposerId   String?    @map("proposer_id")
  proposer     User?      @relation("SessionEditProposer", fields: [proposerId], references: [id])
  proposedData Json       @map("proposed_data") // arbitrary proposed fields, e.g. { sessionName, thumbnail, mvpId, mvpDescription, mvpStats, videoId, ... }
  status       EditStatus @default(PENDING)
  reviewerId   String?    @map("reviewer_id")
  reviewer     User?      @relation("SessionEditReviewer", fields: [reviewerId], references: [id])
  reviewNote   String?    @map("review_note")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  reviewedAt   DateTime?  @map("reviewed_at")
  appliedAt    DateTime?  @map("applied_at") // when changes were applied to sessions
  appliedBy    String?    @map("applied_by")

  @@index([sessionId, status])
  @@map("session_edit_requests")
}

model SessionRevision {
  id        Int      @id @default(autoincrement())
  sessionId Int      @map("session_id")
  session   Session  @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  snapshot  Json // full session snapshot before change
  createdBy String?  @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("session_revisions")
}
