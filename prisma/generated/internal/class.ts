
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "/Users/ty/Developer/Github Repos/Crash Out Co./Project-RDC/prisma/generated",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "typedSql"
    ],
    "sourceFilePath": "/Users/ty/Developer/Github Repos/Crash Out Co./Project-RDC/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativePath": "..",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider        = \"prisma-client\"\n  output          = \"./generated\"\n  engineType      = \"client\"\n  previewFeatures = [\"typedSql\"]\n}\n\ngenerator json {\n  provider = \"prisma-json-types-generator\"\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\") // Used during development to connect to dev db\n}\n\n/////////////////////////\n// Project RDC Models   \n// Player Ids      \n// 1. Mark \n// 2. Dylan\n// 3. Des \n// 4. Ben\n// 5. Lee\n// 6. John \n// 7. Aff \n// 8. Ippi \n//////////////////////\n\n// {player_id: 1, player_name: \"Mark\", player_game_stats: []}\nmodel Player {\n  playerId       Int             @id @default(autoincrement()) @map(\"player_id\")\n  playerName     String          @map(\"player_name\")\n  playerSessions PlayerSession[]\n  playerStats    PlayerStat[]\n  matchWins      Match[]\n  setWins        GameSet[]\n  dayWins        Session[]       @relation(\"DayWinners\")\n  mvpOf          Session[]       @relation(\"Mvp\")\n\n  @@map(\"players\")\n}\n\n// { game_id: 1, game_name: 'Mario Kart', game_stats: [], player_game_stats: [] }\nmodel Game {\n  gameId      Int          @id @default(autoincrement()) @map(\"game_id\")\n  gameName    String       @unique @map(\"game_name\")\n  gameStats   GameStat[]\n  playerStats PlayerStat[]\n  sessions    Session[]\n  createdAt   DateTime     @default(now())\n  updatedAt   DateTime     @updatedAt\n\n  @@map(\"games\")\n}\n\n// Define enum for stat names\n// Keep in sync with enum in utils and seed.\nenum StatName {\n  MK8_POS\n  MK8_DAY\n  RL_SCORE\n  RL_GOALS\n  RL_ASSISTS\n  RL_SAVES\n  RL_SHOTS\n  RL_DAY\n  COD_KILLS\n  COD_DEATHS\n  COD_SCORE\n  COD_POS\n  COD_MELEES\n  LC_DEATHS\n  SR_WINS\n  SR_SETS\n  SR_POS\n}\n\nenum StatType {\n  INT\n  STRING\n}\n\n// { stat_id: 1, game_id: 1, stat_name: 'MK_POS', playerStats: [], type: 'int' }\nmodel GameStat {\n  statId      Int          @id @default(autoincrement()) @map(\"stat_id\")\n  statName    StatName     @map(\"stat_name\")\n  gameId      Int          @map(\"game_id\")\n  game        Game         @relation(fields: [gameId], references: [gameId], onDelete: Cascade)\n  playerStats PlayerStat[]\n  type        StatType     @default(INT) @map(\"type\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  createdBy String @default(\"SYSTEM\") @map(\"created_by\")\n\n  @@map(\"game_stats\")\n}\n\nmodel Session {\n  sessionId      Int       @id @default(autoincrement()) @map(\"session_id\")\n  sessionName    String    @map(\"session_name\")\n  sessionUrl     String    @map(\"session_url\")\n  gameId         Int       @map(\"game_id\")\n  Game           Game      @relation(fields: [gameId], references: [gameId], onDelete: Cascade)\n  sets           GameSet[]\n  dayWinners     Player[]  @relation(\"DayWinners\")\n  thumbnail      String\n  date           DateTime  @default(now()) // Date video posted\n  videoId        String\n  mvp            Player?   @relation(\"Mvp\", fields: [mvpId], references: [playerId], onDelete: SetNull) // on delete not in schema\n  mvpId          Int?\n  mvpDescription String?\n  /// [MvpOutput]\n  mvpStats       Json? // json not in schema\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  isApproved Boolean @default(false) @map(\"is_approved\")\n  createdBy  String  @default(\"SYSTEM\") @map(\"created_by\")\n\n  @@unique([gameId, videoId])\n  @@map(\"sessions\")\n}\n\n// Set Table Concept \nmodel GameSet {\n  setId          Int             @id @default(autoincrement()) @map(\"set_id\")\n  playerSessions PlayerSession[]\n  matches        Match[]\n  sessionId      Int             @map(\"session_id\")\n  session        Session         @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)\n  setWinners     Player[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"sets\")\n}\n\nmodel Match {\n  matchId        Int             @id @default(autoincrement()) @map(\"match_id\")\n  matchWinners   Player[]\n  playerSessions PlayerSession[]\n  setId          Int             @map(\"set_id\")\n  set            GameSet         @relation(fields: [setId], references: [setId], onDelete: Cascade)\n  date           DateTime        @default(now()) // Date video posted\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"matches\")\n}\n\n// Join Table between Session & Player\nmodel PlayerSession {\n  playerSessionId Int          @id @default(autoincrement()) @map(\"player_session_id\")\n  playerId        Int          @map(\"player_id\")\n  player          Player       @relation(fields: [playerId], references: [playerId], onDelete: Cascade)\n  playerStats     PlayerStat[]\n  sessionId       Int          @map(\"session_id\")\n  matchId         Int          @map(\"match_id\")\n  match           Match        @relation(fields: [matchId], references: [matchId], onDelete: Cascade)\n  setId           Int          @map(\"set_id\")\n  set             GameSet      @relation(fields: [setId], references: [setId], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"player_sessions\")\n}\n\n// { player_game_stat_id: 1, player_id: 1, game_id: 1, stat_id: 1, value: }\nmodel PlayerStat {\n  playerStatId    Int           @id @default(autoincrement()) @map(\"player_stat_id\")\n  playerId        Int           @map(\"player_id\")\n  player          Player        @relation(fields: [playerId], references: [playerId], onDelete: Cascade)\n  gameId          Int           @map(\"game_id\")\n  game            Game          @relation(fields: [gameId], references: [gameId], onDelete: Cascade)\n  playerSessionId Int           @map(\"player_session_id\")\n  playerSession   PlayerSession @relation(fields: [playerSessionId], references: [playerSessionId], onDelete: Cascade)\n  statId          Int           @map(\"stat_id\")\n  gameStat        GameStat      @relation(fields: [statId], references: [statId], onDelete: Cascade)\n  value           String\n  date            DateTime      @default(now()) // Date video posted\n\n  @@map(\"player_stats\")\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String    @unique\n  emailVerified DateTime?\n  image         String?\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n}\n\nmodel SheetSync {\n  id          Int      @id @default(autoincrement())\n  sheetName   String   @unique\n  lastRow     Int      @default(0)\n  lastVideoId String?\n  lastUpdated DateTime @updatedAt\n  summary     String?\n\n  @@map(\"sheet_sync\")\n}\n",
  "inlineSchemaHash": "d8b093685d47d480b5aa296fbabdbd0a21f0f59dc571825581f79008d6b7732f",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"Player\":{\"fields\":[{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"player_id\"},{\"name\":\"playerName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"player_name\"},{\"name\":\"playerSessions\",\"kind\":\"object\",\"type\":\"PlayerSession\",\"relationName\":\"PlayerToPlayerSession\"},{\"name\":\"playerStats\",\"kind\":\"object\",\"type\":\"PlayerStat\",\"relationName\":\"PlayerToPlayerStat\"},{\"name\":\"matchWins\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"MatchToPlayer\"},{\"name\":\"setWins\",\"kind\":\"object\",\"type\":\"GameSet\",\"relationName\":\"GameSetToPlayer\"},{\"name\":\"dayWins\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"DayWinners\"},{\"name\":\"mvpOf\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"Mvp\"}],\"dbName\":\"players\"},\"Game\":{\"fields\":[{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"game_id\"},{\"name\":\"gameName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"game_name\"},{\"name\":\"gameStats\",\"kind\":\"object\",\"type\":\"GameStat\",\"relationName\":\"GameToGameStat\"},{\"name\":\"playerStats\",\"kind\":\"object\",\"type\":\"PlayerStat\",\"relationName\":\"GameToPlayerStat\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"GameToSession\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"games\"},\"GameStat\":{\"fields\":[{\"name\":\"statId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"stat_id\"},{\"name\":\"statName\",\"kind\":\"enum\",\"type\":\"StatName\",\"dbName\":\"stat_name\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"game_id\"},{\"name\":\"game\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToGameStat\"},{\"name\":\"playerStats\",\"kind\":\"object\",\"type\":\"PlayerStat\",\"relationName\":\"GameStatToPlayerStat\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"StatType\",\"dbName\":\"type\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"created_by\"}],\"dbName\":\"game_stats\"},\"Session\":{\"fields\":[{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"session_id\"},{\"name\":\"sessionName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"session_name\"},{\"name\":\"sessionUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"session_url\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"game_id\"},{\"name\":\"Game\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToSession\"},{\"name\":\"sets\",\"kind\":\"object\",\"type\":\"GameSet\",\"relationName\":\"GameSetToSession\"},{\"name\":\"dayWinners\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"DayWinners\"},{\"name\":\"thumbnail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"videoId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mvp\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"Mvp\"},{\"name\":\"mvpId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"mvpDescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mvpStats\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isApproved\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_approved\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"created_by\"}],\"dbName\":\"sessions\"},\"GameSet\":{\"fields\":[{\"name\":\"setId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"set_id\"},{\"name\":\"playerSessions\",\"kind\":\"object\",\"type\":\"PlayerSession\",\"relationName\":\"GameSetToPlayerSession\"},{\"name\":\"matches\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"GameSetToMatch\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"session_id\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"GameSetToSession\"},{\"name\":\"setWinners\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"GameSetToPlayer\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"sets\"},\"Match\":{\"fields\":[{\"name\":\"matchId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"match_id\"},{\"name\":\"matchWinners\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"MatchToPlayer\"},{\"name\":\"playerSessions\",\"kind\":\"object\",\"type\":\"PlayerSession\",\"relationName\":\"MatchToPlayerSession\"},{\"name\":\"setId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"set_id\"},{\"name\":\"set\",\"kind\":\"object\",\"type\":\"GameSet\",\"relationName\":\"GameSetToMatch\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"matches\"},\"PlayerSession\":{\"fields\":[{\"name\":\"playerSessionId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"player_session_id\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"player_id\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"PlayerToPlayerSession\"},{\"name\":\"playerStats\",\"kind\":\"object\",\"type\":\"PlayerStat\",\"relationName\":\"PlayerSessionToPlayerStat\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"session_id\"},{\"name\":\"matchId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"match_id\"},{\"name\":\"match\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"MatchToPlayerSession\"},{\"name\":\"setId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"set_id\"},{\"name\":\"set\",\"kind\":\"object\",\"type\":\"GameSet\",\"relationName\":\"GameSetToPlayerSession\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"player_sessions\"},\"PlayerStat\":{\"fields\":[{\"name\":\"playerStatId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"player_stat_id\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"player_id\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"PlayerToPlayerStat\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"game_id\"},{\"name\":\"game\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToPlayerStat\"},{\"name\":\"playerSessionId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"player_session_id\"},{\"name\":\"playerSession\",\"kind\":\"object\",\"type\":\"PlayerSession\",\"relationName\":\"PlayerSessionToPlayerStat\"},{\"name\":\"statId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"stat_id\"},{\"name\":\"gameStat\",\"kind\":\"object\",\"type\":\"GameStat\",\"relationName\":\"GameStatToPlayerStat\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"player_stats\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"SheetSync\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sheetName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastRow\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastVideoId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"sheet_sync\"}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Players
   * const players = await prisma.player.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Players
 * const players = await prisma.player.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Executes a typed SQL query and returns a typed result
   * @example
   * ```
   * import { myQuery } from '@prisma/client/sql'
   * 
   * const result = await prisma.$queryRawTyped(myQuery())
   * ```
   */
  $queryRawTyped<T>(typedSql: runtime.TypedSql<unknown[], T>): Prisma.PrismaPromise<T[]>

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.gameStat`: Exposes CRUD operations for the **GameStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameStats
    * const gameStats = await prisma.gameStat.findMany()
    * ```
    */
  get gameStat(): Prisma.GameStatDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.gameSet`: Exposes CRUD operations for the **GameSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameSets
    * const gameSets = await prisma.gameSet.findMany()
    * ```
    */
  get gameSet(): Prisma.GameSetDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.playerSession`: Exposes CRUD operations for the **PlayerSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerSessions
    * const playerSessions = await prisma.playerSession.findMany()
    * ```
    */
  get playerSession(): Prisma.PlayerSessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.playerStat`: Exposes CRUD operations for the **PlayerStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerStats
    * const playerStats = await prisma.playerStat.findMany()
    * ```
    */
  get playerStat(): Prisma.PlayerStatDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.sheetSync`: Exposes CRUD operations for the **SheetSync** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SheetSyncs
    * const sheetSyncs = await prisma.sheetSync.findMany()
    * ```
    */
  get sheetSync(): Prisma.SheetSyncDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
