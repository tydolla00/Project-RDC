
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `GameStat` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GameStat
 * 
 */
export type GameStatModel = runtime.Types.Result.DefaultSelection<Prisma.$GameStatPayload>

export type AggregateGameStat = {
  _count: GameStatCountAggregateOutputType | null
  _avg: GameStatAvgAggregateOutputType | null
  _sum: GameStatSumAggregateOutputType | null
  _min: GameStatMinAggregateOutputType | null
  _max: GameStatMaxAggregateOutputType | null
}

export type GameStatAvgAggregateOutputType = {
  statId: number | null
  gameId: number | null
}

export type GameStatSumAggregateOutputType = {
  statId: number | null
  gameId: number | null
}

export type GameStatMinAggregateOutputType = {
  statId: number | null
  statName: $Enums.StatName | null
  gameId: number | null
  type: $Enums.StatType | null
  createdAt: Date | null
  updatedAt: Date | null
  createdBy: string | null
}

export type GameStatMaxAggregateOutputType = {
  statId: number | null
  statName: $Enums.StatName | null
  gameId: number | null
  type: $Enums.StatType | null
  createdAt: Date | null
  updatedAt: Date | null
  createdBy: string | null
}

export type GameStatCountAggregateOutputType = {
  statId: number
  statName: number
  gameId: number
  type: number
  createdAt: number
  updatedAt: number
  createdBy: number
  _all: number
}


export type GameStatAvgAggregateInputType = {
  statId?: true
  gameId?: true
}

export type GameStatSumAggregateInputType = {
  statId?: true
  gameId?: true
}

export type GameStatMinAggregateInputType = {
  statId?: true
  statName?: true
  gameId?: true
  type?: true
  createdAt?: true
  updatedAt?: true
  createdBy?: true
}

export type GameStatMaxAggregateInputType = {
  statId?: true
  statName?: true
  gameId?: true
  type?: true
  createdAt?: true
  updatedAt?: true
  createdBy?: true
}

export type GameStatCountAggregateInputType = {
  statId?: true
  statName?: true
  gameId?: true
  type?: true
  createdAt?: true
  updatedAt?: true
  createdBy?: true
  _all?: true
}

export type GameStatAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameStat to aggregate.
   */
  where?: Prisma.GameStatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameStats to fetch.
   */
  orderBy?: Prisma.GameStatOrderByWithRelationInput | Prisma.GameStatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameStatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GameStats
  **/
  _count?: true | GameStatCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameStatAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameStatSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameStatMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameStatMaxAggregateInputType
}

export type GetGameStatAggregateType<T extends GameStatAggregateArgs> = {
      [P in keyof T & keyof AggregateGameStat]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGameStat[P]>
    : Prisma.GetScalarType<T[P], AggregateGameStat[P]>
}




export type GameStatGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameStatWhereInput
  orderBy?: Prisma.GameStatOrderByWithAggregationInput | Prisma.GameStatOrderByWithAggregationInput[]
  by: Prisma.GameStatScalarFieldEnum[] | Prisma.GameStatScalarFieldEnum
  having?: Prisma.GameStatScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameStatCountAggregateInputType | true
  _avg?: GameStatAvgAggregateInputType
  _sum?: GameStatSumAggregateInputType
  _min?: GameStatMinAggregateInputType
  _max?: GameStatMaxAggregateInputType
}

export type GameStatGroupByOutputType = {
  statId: number
  statName: $Enums.StatName
  gameId: number
  type: $Enums.StatType
  createdAt: Date
  updatedAt: Date
  createdBy: string
  _count: GameStatCountAggregateOutputType | null
  _avg: GameStatAvgAggregateOutputType | null
  _sum: GameStatSumAggregateOutputType | null
  _min: GameStatMinAggregateOutputType | null
  _max: GameStatMaxAggregateOutputType | null
}

type GetGameStatGroupByPayload<T extends GameStatGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameStatGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameStatGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameStatGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameStatGroupByOutputType[P]>
      }
    >
  >



export type GameStatWhereInput = {
  AND?: Prisma.GameStatWhereInput | Prisma.GameStatWhereInput[]
  OR?: Prisma.GameStatWhereInput[]
  NOT?: Prisma.GameStatWhereInput | Prisma.GameStatWhereInput[]
  statId?: Prisma.IntFilter<"GameStat"> | number
  statName?: Prisma.EnumStatNameFilter<"GameStat"> | $Enums.StatName
  gameId?: Prisma.IntFilter<"GameStat"> | number
  type?: Prisma.EnumStatTypeFilter<"GameStat"> | $Enums.StatType
  createdAt?: Prisma.DateTimeFilter<"GameStat"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameStat"> | Date | string
  createdBy?: Prisma.StringFilter<"GameStat"> | string
  game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  playerStats?: Prisma.PlayerStatListRelationFilter
}

export type GameStatOrderByWithRelationInput = {
  statId?: Prisma.SortOrder
  statName?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  game?: Prisma.GameOrderByWithRelationInput
  playerStats?: Prisma.PlayerStatOrderByRelationAggregateInput
}

export type GameStatWhereUniqueInput = Prisma.AtLeast<{
  statId?: number
  AND?: Prisma.GameStatWhereInput | Prisma.GameStatWhereInput[]
  OR?: Prisma.GameStatWhereInput[]
  NOT?: Prisma.GameStatWhereInput | Prisma.GameStatWhereInput[]
  statName?: Prisma.EnumStatNameFilter<"GameStat"> | $Enums.StatName
  gameId?: Prisma.IntFilter<"GameStat"> | number
  type?: Prisma.EnumStatTypeFilter<"GameStat"> | $Enums.StatType
  createdAt?: Prisma.DateTimeFilter<"GameStat"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameStat"> | Date | string
  createdBy?: Prisma.StringFilter<"GameStat"> | string
  game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  playerStats?: Prisma.PlayerStatListRelationFilter
}, "statId">

export type GameStatOrderByWithAggregationInput = {
  statId?: Prisma.SortOrder
  statName?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  _count?: Prisma.GameStatCountOrderByAggregateInput
  _avg?: Prisma.GameStatAvgOrderByAggregateInput
  _max?: Prisma.GameStatMaxOrderByAggregateInput
  _min?: Prisma.GameStatMinOrderByAggregateInput
  _sum?: Prisma.GameStatSumOrderByAggregateInput
}

export type GameStatScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameStatScalarWhereWithAggregatesInput | Prisma.GameStatScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameStatScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameStatScalarWhereWithAggregatesInput | Prisma.GameStatScalarWhereWithAggregatesInput[]
  statId?: Prisma.IntWithAggregatesFilter<"GameStat"> | number
  statName?: Prisma.EnumStatNameWithAggregatesFilter<"GameStat"> | $Enums.StatName
  gameId?: Prisma.IntWithAggregatesFilter<"GameStat"> | number
  type?: Prisma.EnumStatTypeWithAggregatesFilter<"GameStat"> | $Enums.StatType
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GameStat"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"GameStat"> | Date | string
  createdBy?: Prisma.StringWithAggregatesFilter<"GameStat"> | string
}

export type GameStatCreateInput = {
  statName: $Enums.StatName
  type?: $Enums.StatType
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy?: string
  game: Prisma.GameCreateNestedOneWithoutGameStatsInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutGameStatInput
}

export type GameStatUncheckedCreateInput = {
  statId?: number
  statName: $Enums.StatName
  gameId: number
  type?: $Enums.StatType
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy?: string
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutGameStatInput
}

export type GameStatUpdateInput = {
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  game?: Prisma.GameUpdateOneRequiredWithoutGameStatsNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutGameStatNestedInput
}

export type GameStatUncheckedUpdateInput = {
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutGameStatNestedInput
}

export type GameStatCreateManyInput = {
  statId?: number
  statName: $Enums.StatName
  gameId: number
  type?: $Enums.StatType
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy?: string
}

export type GameStatUpdateManyMutationInput = {
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GameStatUncheckedUpdateManyInput = {
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GameStatListRelationFilter = {
  every?: Prisma.GameStatWhereInput
  some?: Prisma.GameStatWhereInput
  none?: Prisma.GameStatWhereInput
}

export type GameStatOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GameStatCountOrderByAggregateInput = {
  statId?: Prisma.SortOrder
  statName?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
}

export type GameStatAvgOrderByAggregateInput = {
  statId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
}

export type GameStatMaxOrderByAggregateInput = {
  statId?: Prisma.SortOrder
  statName?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
}

export type GameStatMinOrderByAggregateInput = {
  statId?: Prisma.SortOrder
  statName?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
}

export type GameStatSumOrderByAggregateInput = {
  statId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
}

export type GameStatScalarRelationFilter = {
  is?: Prisma.GameStatWhereInput
  isNot?: Prisma.GameStatWhereInput
}

export type GameStatCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.GameStatCreateWithoutGameInput, Prisma.GameStatUncheckedCreateWithoutGameInput> | Prisma.GameStatCreateWithoutGameInput[] | Prisma.GameStatUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameStatCreateOrConnectWithoutGameInput | Prisma.GameStatCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.GameStatCreateManyGameInputEnvelope
  connect?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
}

export type GameStatUncheckedCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.GameStatCreateWithoutGameInput, Prisma.GameStatUncheckedCreateWithoutGameInput> | Prisma.GameStatCreateWithoutGameInput[] | Prisma.GameStatUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameStatCreateOrConnectWithoutGameInput | Prisma.GameStatCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.GameStatCreateManyGameInputEnvelope
  connect?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
}

export type GameStatUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.GameStatCreateWithoutGameInput, Prisma.GameStatUncheckedCreateWithoutGameInput> | Prisma.GameStatCreateWithoutGameInput[] | Prisma.GameStatUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameStatCreateOrConnectWithoutGameInput | Prisma.GameStatCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.GameStatUpsertWithWhereUniqueWithoutGameInput | Prisma.GameStatUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.GameStatCreateManyGameInputEnvelope
  set?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
  disconnect?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
  delete?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
  connect?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
  update?: Prisma.GameStatUpdateWithWhereUniqueWithoutGameInput | Prisma.GameStatUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.GameStatUpdateManyWithWhereWithoutGameInput | Prisma.GameStatUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.GameStatScalarWhereInput | Prisma.GameStatScalarWhereInput[]
}

export type GameStatUncheckedUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.GameStatCreateWithoutGameInput, Prisma.GameStatUncheckedCreateWithoutGameInput> | Prisma.GameStatCreateWithoutGameInput[] | Prisma.GameStatUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameStatCreateOrConnectWithoutGameInput | Prisma.GameStatCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.GameStatUpsertWithWhereUniqueWithoutGameInput | Prisma.GameStatUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.GameStatCreateManyGameInputEnvelope
  set?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
  disconnect?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
  delete?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
  connect?: Prisma.GameStatWhereUniqueInput | Prisma.GameStatWhereUniqueInput[]
  update?: Prisma.GameStatUpdateWithWhereUniqueWithoutGameInput | Prisma.GameStatUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.GameStatUpdateManyWithWhereWithoutGameInput | Prisma.GameStatUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.GameStatScalarWhereInput | Prisma.GameStatScalarWhereInput[]
}

export type EnumStatNameFieldUpdateOperationsInput = {
  set?: $Enums.StatName
}

export type EnumStatTypeFieldUpdateOperationsInput = {
  set?: $Enums.StatType
}

export type GameStatCreateNestedOneWithoutPlayerStatsInput = {
  create?: Prisma.XOR<Prisma.GameStatCreateWithoutPlayerStatsInput, Prisma.GameStatUncheckedCreateWithoutPlayerStatsInput>
  connectOrCreate?: Prisma.GameStatCreateOrConnectWithoutPlayerStatsInput
  connect?: Prisma.GameStatWhereUniqueInput
}

export type GameStatUpdateOneRequiredWithoutPlayerStatsNestedInput = {
  create?: Prisma.XOR<Prisma.GameStatCreateWithoutPlayerStatsInput, Prisma.GameStatUncheckedCreateWithoutPlayerStatsInput>
  connectOrCreate?: Prisma.GameStatCreateOrConnectWithoutPlayerStatsInput
  upsert?: Prisma.GameStatUpsertWithoutPlayerStatsInput
  connect?: Prisma.GameStatWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameStatUpdateToOneWithWhereWithoutPlayerStatsInput, Prisma.GameStatUpdateWithoutPlayerStatsInput>, Prisma.GameStatUncheckedUpdateWithoutPlayerStatsInput>
}

export type GameStatCreateWithoutGameInput = {
  statName: $Enums.StatName
  type?: $Enums.StatType
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy?: string
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutGameStatInput
}

export type GameStatUncheckedCreateWithoutGameInput = {
  statId?: number
  statName: $Enums.StatName
  type?: $Enums.StatType
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy?: string
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutGameStatInput
}

export type GameStatCreateOrConnectWithoutGameInput = {
  where: Prisma.GameStatWhereUniqueInput
  create: Prisma.XOR<Prisma.GameStatCreateWithoutGameInput, Prisma.GameStatUncheckedCreateWithoutGameInput>
}

export type GameStatCreateManyGameInputEnvelope = {
  data: Prisma.GameStatCreateManyGameInput | Prisma.GameStatCreateManyGameInput[]
  skipDuplicates?: boolean
}

export type GameStatUpsertWithWhereUniqueWithoutGameInput = {
  where: Prisma.GameStatWhereUniqueInput
  update: Prisma.XOR<Prisma.GameStatUpdateWithoutGameInput, Prisma.GameStatUncheckedUpdateWithoutGameInput>
  create: Prisma.XOR<Prisma.GameStatCreateWithoutGameInput, Prisma.GameStatUncheckedCreateWithoutGameInput>
}

export type GameStatUpdateWithWhereUniqueWithoutGameInput = {
  where: Prisma.GameStatWhereUniqueInput
  data: Prisma.XOR<Prisma.GameStatUpdateWithoutGameInput, Prisma.GameStatUncheckedUpdateWithoutGameInput>
}

export type GameStatUpdateManyWithWhereWithoutGameInput = {
  where: Prisma.GameStatScalarWhereInput
  data: Prisma.XOR<Prisma.GameStatUpdateManyMutationInput, Prisma.GameStatUncheckedUpdateManyWithoutGameInput>
}

export type GameStatScalarWhereInput = {
  AND?: Prisma.GameStatScalarWhereInput | Prisma.GameStatScalarWhereInput[]
  OR?: Prisma.GameStatScalarWhereInput[]
  NOT?: Prisma.GameStatScalarWhereInput | Prisma.GameStatScalarWhereInput[]
  statId?: Prisma.IntFilter<"GameStat"> | number
  statName?: Prisma.EnumStatNameFilter<"GameStat"> | $Enums.StatName
  gameId?: Prisma.IntFilter<"GameStat"> | number
  type?: Prisma.EnumStatTypeFilter<"GameStat"> | $Enums.StatType
  createdAt?: Prisma.DateTimeFilter<"GameStat"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameStat"> | Date | string
  createdBy?: Prisma.StringFilter<"GameStat"> | string
}

export type GameStatCreateWithoutPlayerStatsInput = {
  statName: $Enums.StatName
  type?: $Enums.StatType
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy?: string
  game: Prisma.GameCreateNestedOneWithoutGameStatsInput
}

export type GameStatUncheckedCreateWithoutPlayerStatsInput = {
  statId?: number
  statName: $Enums.StatName
  gameId: number
  type?: $Enums.StatType
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy?: string
}

export type GameStatCreateOrConnectWithoutPlayerStatsInput = {
  where: Prisma.GameStatWhereUniqueInput
  create: Prisma.XOR<Prisma.GameStatCreateWithoutPlayerStatsInput, Prisma.GameStatUncheckedCreateWithoutPlayerStatsInput>
}

export type GameStatUpsertWithoutPlayerStatsInput = {
  update: Prisma.XOR<Prisma.GameStatUpdateWithoutPlayerStatsInput, Prisma.GameStatUncheckedUpdateWithoutPlayerStatsInput>
  create: Prisma.XOR<Prisma.GameStatCreateWithoutPlayerStatsInput, Prisma.GameStatUncheckedCreateWithoutPlayerStatsInput>
  where?: Prisma.GameStatWhereInput
}

export type GameStatUpdateToOneWithWhereWithoutPlayerStatsInput = {
  where?: Prisma.GameStatWhereInput
  data: Prisma.XOR<Prisma.GameStatUpdateWithoutPlayerStatsInput, Prisma.GameStatUncheckedUpdateWithoutPlayerStatsInput>
}

export type GameStatUpdateWithoutPlayerStatsInput = {
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  game?: Prisma.GameUpdateOneRequiredWithoutGameStatsNestedInput
}

export type GameStatUncheckedUpdateWithoutPlayerStatsInput = {
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GameStatCreateManyGameInput = {
  statId?: number
  statName: $Enums.StatName
  type?: $Enums.StatType
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy?: string
}

export type GameStatUpdateWithoutGameInput = {
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  playerStats?: Prisma.PlayerStatUpdateManyWithoutGameStatNestedInput
}

export type GameStatUncheckedUpdateWithoutGameInput = {
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutGameStatNestedInput
}

export type GameStatUncheckedUpdateManyWithoutGameInput = {
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  statName?: Prisma.EnumStatNameFieldUpdateOperationsInput | $Enums.StatName
  type?: Prisma.EnumStatTypeFieldUpdateOperationsInput | $Enums.StatType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type GameStatCountOutputType
 */

export type GameStatCountOutputType = {
  playerStats: number
}

export type GameStatCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playerStats?: boolean | GameStatCountOutputTypeCountPlayerStatsArgs
}

/**
 * GameStatCountOutputType without action
 */
export type GameStatCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStatCountOutputType
   */
  select?: Prisma.GameStatCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GameStatCountOutputType without action
 */
export type GameStatCountOutputTypeCountPlayerStatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerStatWhereInput
}


export type GameStatSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  statId?: boolean
  statName?: boolean
  gameId?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdBy?: boolean
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  playerStats?: boolean | Prisma.GameStat$playerStatsArgs<ExtArgs>
  _count?: boolean | Prisma.GameStatCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameStat"]>

export type GameStatSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  statId?: boolean
  statName?: boolean
  gameId?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdBy?: boolean
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameStat"]>

export type GameStatSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  statId?: boolean
  statName?: boolean
  gameId?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdBy?: boolean
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameStat"]>

export type GameStatSelectScalar = {
  statId?: boolean
  statName?: boolean
  gameId?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdBy?: boolean
}

export type GameStatOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"statId" | "statName" | "gameId" | "type" | "createdAt" | "updatedAt" | "createdBy", ExtArgs["result"]["gameStat"]>
export type GameStatInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  playerStats?: boolean | Prisma.GameStat$playerStatsArgs<ExtArgs>
  _count?: boolean | Prisma.GameStatCountOutputTypeDefaultArgs<ExtArgs>
}
export type GameStatIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}
export type GameStatIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}

export type $GameStatPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GameStat"
  objects: {
    game: Prisma.$GamePayload<ExtArgs>
    playerStats: Prisma.$PlayerStatPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    statId: number
    statName: $Enums.StatName
    gameId: number
    type: $Enums.StatType
    createdAt: Date
    updatedAt: Date
    createdBy: string
  }, ExtArgs["result"]["gameStat"]>
  composites: {}
}

export type GameStatGetPayload<S extends boolean | null | undefined | GameStatDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GameStatPayload, S>

export type GameStatCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameStatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameStatCountAggregateInputType | true
  }

export interface GameStatDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameStat'], meta: { name: 'GameStat' } }
  /**
   * Find zero or one GameStat that matches the filter.
   * @param {GameStatFindUniqueArgs} args - Arguments to find a GameStat
   * @example
   * // Get one GameStat
   * const gameStat = await prisma.gameStat.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameStatFindUniqueArgs>(args: Prisma.SelectSubset<T, GameStatFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GameStat that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameStatFindUniqueOrThrowArgs} args - Arguments to find a GameStat
   * @example
   * // Get one GameStat
   * const gameStat = await prisma.gameStat.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameStatFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameStatFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameStat that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameStatFindFirstArgs} args - Arguments to find a GameStat
   * @example
   * // Get one GameStat
   * const gameStat = await prisma.gameStat.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameStatFindFirstArgs>(args?: Prisma.SelectSubset<T, GameStatFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameStat that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameStatFindFirstOrThrowArgs} args - Arguments to find a GameStat
   * @example
   * // Get one GameStat
   * const gameStat = await prisma.gameStat.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameStatFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameStatFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GameStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameStatFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GameStats
   * const gameStats = await prisma.gameStat.findMany()
   * 
   * // Get first 10 GameStats
   * const gameStats = await prisma.gameStat.findMany({ take: 10 })
   * 
   * // Only select the `statId`
   * const gameStatWithStatIdOnly = await prisma.gameStat.findMany({ select: { statId: true } })
   * 
   */
  findMany<T extends GameStatFindManyArgs>(args?: Prisma.SelectSubset<T, GameStatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GameStat.
   * @param {GameStatCreateArgs} args - Arguments to create a GameStat.
   * @example
   * // Create one GameStat
   * const GameStat = await prisma.gameStat.create({
   *   data: {
   *     // ... data to create a GameStat
   *   }
   * })
   * 
   */
  create<T extends GameStatCreateArgs>(args: Prisma.SelectSubset<T, GameStatCreateArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GameStats.
   * @param {GameStatCreateManyArgs} args - Arguments to create many GameStats.
   * @example
   * // Create many GameStats
   * const gameStat = await prisma.gameStat.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameStatCreateManyArgs>(args?: Prisma.SelectSubset<T, GameStatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GameStats and returns the data saved in the database.
   * @param {GameStatCreateManyAndReturnArgs} args - Arguments to create many GameStats.
   * @example
   * // Create many GameStats
   * const gameStat = await prisma.gameStat.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GameStats and only return the `statId`
   * const gameStatWithStatIdOnly = await prisma.gameStat.createManyAndReturn({
   *   select: { statId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameStatCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameStatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GameStat.
   * @param {GameStatDeleteArgs} args - Arguments to delete one GameStat.
   * @example
   * // Delete one GameStat
   * const GameStat = await prisma.gameStat.delete({
   *   where: {
   *     // ... filter to delete one GameStat
   *   }
   * })
   * 
   */
  delete<T extends GameStatDeleteArgs>(args: Prisma.SelectSubset<T, GameStatDeleteArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GameStat.
   * @param {GameStatUpdateArgs} args - Arguments to update one GameStat.
   * @example
   * // Update one GameStat
   * const gameStat = await prisma.gameStat.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameStatUpdateArgs>(args: Prisma.SelectSubset<T, GameStatUpdateArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GameStats.
   * @param {GameStatDeleteManyArgs} args - Arguments to filter GameStats to delete.
   * @example
   * // Delete a few GameStats
   * const { count } = await prisma.gameStat.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameStatDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameStatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameStatUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GameStats
   * const gameStat = await prisma.gameStat.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameStatUpdateManyArgs>(args: Prisma.SelectSubset<T, GameStatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameStats and returns the data updated in the database.
   * @param {GameStatUpdateManyAndReturnArgs} args - Arguments to update many GameStats.
   * @example
   * // Update many GameStats
   * const gameStat = await prisma.gameStat.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GameStats and only return the `statId`
   * const gameStatWithStatIdOnly = await prisma.gameStat.updateManyAndReturn({
   *   select: { statId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameStatUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameStatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GameStat.
   * @param {GameStatUpsertArgs} args - Arguments to update or create a GameStat.
   * @example
   * // Update or create a GameStat
   * const gameStat = await prisma.gameStat.upsert({
   *   create: {
   *     // ... data to create a GameStat
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GameStat we want to update
   *   }
   * })
   */
  upsert<T extends GameStatUpsertArgs>(args: Prisma.SelectSubset<T, GameStatUpsertArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GameStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameStatCountArgs} args - Arguments to filter GameStats to count.
   * @example
   * // Count the number of GameStats
   * const count = await prisma.gameStat.count({
   *   where: {
   *     // ... the filter for the GameStats we want to count
   *   }
   * })
  **/
  count<T extends GameStatCountArgs>(
    args?: Prisma.Subset<T, GameStatCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameStatCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GameStat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameStatAggregateArgs>(args: Prisma.Subset<T, GameStatAggregateArgs>): Prisma.PrismaPromise<GetGameStatAggregateType<T>>

  /**
   * Group by GameStat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameStatGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameStatGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameStatGroupByArgs['orderBy'] }
      : { orderBy?: GameStatGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameStatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GameStat model
 */
readonly fields: GameStatFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GameStat.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameStatClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  game<T extends Prisma.GameDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameDefaultArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  playerStats<T extends Prisma.GameStat$playerStatsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameStat$playerStatsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GameStat model
 */
export interface GameStatFieldRefs {
  readonly statId: Prisma.FieldRef<"GameStat", 'Int'>
  readonly statName: Prisma.FieldRef<"GameStat", 'StatName'>
  readonly gameId: Prisma.FieldRef<"GameStat", 'Int'>
  readonly type: Prisma.FieldRef<"GameStat", 'StatType'>
  readonly createdAt: Prisma.FieldRef<"GameStat", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"GameStat", 'DateTime'>
  readonly createdBy: Prisma.FieldRef<"GameStat", 'String'>
}
    

// Custom InputTypes
/**
 * GameStat findUnique
 */
export type GameStatFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * Filter, which GameStat to fetch.
   */
  where: Prisma.GameStatWhereUniqueInput
}

/**
 * GameStat findUniqueOrThrow
 */
export type GameStatFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * Filter, which GameStat to fetch.
   */
  where: Prisma.GameStatWhereUniqueInput
}

/**
 * GameStat findFirst
 */
export type GameStatFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * Filter, which GameStat to fetch.
   */
  where?: Prisma.GameStatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameStats to fetch.
   */
  orderBy?: Prisma.GameStatOrderByWithRelationInput | Prisma.GameStatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameStats.
   */
  cursor?: Prisma.GameStatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameStats.
   */
  distinct?: Prisma.GameStatScalarFieldEnum | Prisma.GameStatScalarFieldEnum[]
}

/**
 * GameStat findFirstOrThrow
 */
export type GameStatFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * Filter, which GameStat to fetch.
   */
  where?: Prisma.GameStatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameStats to fetch.
   */
  orderBy?: Prisma.GameStatOrderByWithRelationInput | Prisma.GameStatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameStats.
   */
  cursor?: Prisma.GameStatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameStats.
   */
  distinct?: Prisma.GameStatScalarFieldEnum | Prisma.GameStatScalarFieldEnum[]
}

/**
 * GameStat findMany
 */
export type GameStatFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * Filter, which GameStats to fetch.
   */
  where?: Prisma.GameStatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameStats to fetch.
   */
  orderBy?: Prisma.GameStatOrderByWithRelationInput | Prisma.GameStatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GameStats.
   */
  cursor?: Prisma.GameStatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameStats.
   */
  skip?: number
  distinct?: Prisma.GameStatScalarFieldEnum | Prisma.GameStatScalarFieldEnum[]
}

/**
 * GameStat create
 */
export type GameStatCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * The data needed to create a GameStat.
   */
  data: Prisma.XOR<Prisma.GameStatCreateInput, Prisma.GameStatUncheckedCreateInput>
}

/**
 * GameStat createMany
 */
export type GameStatCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GameStats.
   */
  data: Prisma.GameStatCreateManyInput | Prisma.GameStatCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameStat createManyAndReturn
 */
export type GameStatCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * The data used to create many GameStats.
   */
  data: Prisma.GameStatCreateManyInput | Prisma.GameStatCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GameStat update
 */
export type GameStatUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * The data needed to update a GameStat.
   */
  data: Prisma.XOR<Prisma.GameStatUpdateInput, Prisma.GameStatUncheckedUpdateInput>
  /**
   * Choose, which GameStat to update.
   */
  where: Prisma.GameStatWhereUniqueInput
}

/**
 * GameStat updateMany
 */
export type GameStatUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GameStats.
   */
  data: Prisma.XOR<Prisma.GameStatUpdateManyMutationInput, Prisma.GameStatUncheckedUpdateManyInput>
  /**
   * Filter which GameStats to update
   */
  where?: Prisma.GameStatWhereInput
  /**
   * Limit how many GameStats to update.
   */
  limit?: number
}

/**
 * GameStat updateManyAndReturn
 */
export type GameStatUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * The data used to update GameStats.
   */
  data: Prisma.XOR<Prisma.GameStatUpdateManyMutationInput, Prisma.GameStatUncheckedUpdateManyInput>
  /**
   * Filter which GameStats to update
   */
  where?: Prisma.GameStatWhereInput
  /**
   * Limit how many GameStats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GameStat upsert
 */
export type GameStatUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * The filter to search for the GameStat to update in case it exists.
   */
  where: Prisma.GameStatWhereUniqueInput
  /**
   * In case the GameStat found by the `where` argument doesn't exist, create a new GameStat with this data.
   */
  create: Prisma.XOR<Prisma.GameStatCreateInput, Prisma.GameStatUncheckedCreateInput>
  /**
   * In case the GameStat was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameStatUpdateInput, Prisma.GameStatUncheckedUpdateInput>
}

/**
 * GameStat delete
 */
export type GameStatDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
  /**
   * Filter which GameStat to delete.
   */
  where: Prisma.GameStatWhereUniqueInput
}

/**
 * GameStat deleteMany
 */
export type GameStatDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameStats to delete
   */
  where?: Prisma.GameStatWhereInput
  /**
   * Limit how many GameStats to delete.
   */
  limit?: number
}

/**
 * GameStat.playerStats
 */
export type GameStat$playerStatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  where?: Prisma.PlayerStatWhereInput
  orderBy?: Prisma.PlayerStatOrderByWithRelationInput | Prisma.PlayerStatOrderByWithRelationInput[]
  cursor?: Prisma.PlayerStatWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlayerStatScalarFieldEnum | Prisma.PlayerStatScalarFieldEnum[]
}

/**
 * GameStat without action
 */
export type GameStatDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameStat
   */
  select?: Prisma.GameStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameStat
   */
  omit?: Prisma.GameStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameStatInclude<ExtArgs> | null
}
