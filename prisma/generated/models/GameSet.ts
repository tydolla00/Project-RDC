
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `GameSet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GameSet
 * 
 */
export type GameSetModel = runtime.Types.Result.DefaultSelection<Prisma.$GameSetPayload>

export type AggregateGameSet = {
  _count: GameSetCountAggregateOutputType | null
  _avg: GameSetAvgAggregateOutputType | null
  _sum: GameSetSumAggregateOutputType | null
  _min: GameSetMinAggregateOutputType | null
  _max: GameSetMaxAggregateOutputType | null
}

export type GameSetAvgAggregateOutputType = {
  setId: number | null
  sessionId: number | null
}

export type GameSetSumAggregateOutputType = {
  setId: number | null
  sessionId: number | null
}

export type GameSetMinAggregateOutputType = {
  setId: number | null
  sessionId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GameSetMaxAggregateOutputType = {
  setId: number | null
  sessionId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GameSetCountAggregateOutputType = {
  setId: number
  sessionId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type GameSetAvgAggregateInputType = {
  setId?: true
  sessionId?: true
}

export type GameSetSumAggregateInputType = {
  setId?: true
  sessionId?: true
}

export type GameSetMinAggregateInputType = {
  setId?: true
  sessionId?: true
  createdAt?: true
  updatedAt?: true
}

export type GameSetMaxAggregateInputType = {
  setId?: true
  sessionId?: true
  createdAt?: true
  updatedAt?: true
}

export type GameSetCountAggregateInputType = {
  setId?: true
  sessionId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type GameSetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameSet to aggregate.
   */
  where?: Prisma.GameSetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSets to fetch.
   */
  orderBy?: Prisma.GameSetOrderByWithRelationInput | Prisma.GameSetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameSetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GameSets
  **/
  _count?: true | GameSetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameSetAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameSetSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameSetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameSetMaxAggregateInputType
}

export type GetGameSetAggregateType<T extends GameSetAggregateArgs> = {
      [P in keyof T & keyof AggregateGameSet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGameSet[P]>
    : Prisma.GetScalarType<T[P], AggregateGameSet[P]>
}




export type GameSetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSetWhereInput
  orderBy?: Prisma.GameSetOrderByWithAggregationInput | Prisma.GameSetOrderByWithAggregationInput[]
  by: Prisma.GameSetScalarFieldEnum[] | Prisma.GameSetScalarFieldEnum
  having?: Prisma.GameSetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameSetCountAggregateInputType | true
  _avg?: GameSetAvgAggregateInputType
  _sum?: GameSetSumAggregateInputType
  _min?: GameSetMinAggregateInputType
  _max?: GameSetMaxAggregateInputType
}

export type GameSetGroupByOutputType = {
  setId: number
  sessionId: number
  createdAt: Date
  updatedAt: Date
  _count: GameSetCountAggregateOutputType | null
  _avg: GameSetAvgAggregateOutputType | null
  _sum: GameSetSumAggregateOutputType | null
  _min: GameSetMinAggregateOutputType | null
  _max: GameSetMaxAggregateOutputType | null
}

type GetGameSetGroupByPayload<T extends GameSetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameSetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameSetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameSetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameSetGroupByOutputType[P]>
      }
    >
  >



export type GameSetWhereInput = {
  AND?: Prisma.GameSetWhereInput | Prisma.GameSetWhereInput[]
  OR?: Prisma.GameSetWhereInput[]
  NOT?: Prisma.GameSetWhereInput | Prisma.GameSetWhereInput[]
  setId?: Prisma.IntFilter<"GameSet"> | number
  sessionId?: Prisma.IntFilter<"GameSet"> | number
  createdAt?: Prisma.DateTimeFilter<"GameSet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameSet"> | Date | string
  playerSessions?: Prisma.PlayerSessionListRelationFilter
  matches?: Prisma.MatchListRelationFilter
  session?: Prisma.XOR<Prisma.SessionScalarRelationFilter, Prisma.SessionWhereInput>
  setWinners?: Prisma.PlayerListRelationFilter
  GameSetToPlayer?: Prisma.GameSetToPlayerListRelationFilter
}

export type GameSetOrderByWithRelationInput = {
  setId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  playerSessions?: Prisma.PlayerSessionOrderByRelationAggregateInput
  matches?: Prisma.MatchOrderByRelationAggregateInput
  session?: Prisma.SessionOrderByWithRelationInput
  setWinners?: Prisma.PlayerOrderByRelationAggregateInput
  GameSetToPlayer?: Prisma.GameSetToPlayerOrderByRelationAggregateInput
}

export type GameSetWhereUniqueInput = Prisma.AtLeast<{
  setId?: number
  AND?: Prisma.GameSetWhereInput | Prisma.GameSetWhereInput[]
  OR?: Prisma.GameSetWhereInput[]
  NOT?: Prisma.GameSetWhereInput | Prisma.GameSetWhereInput[]
  sessionId?: Prisma.IntFilter<"GameSet"> | number
  createdAt?: Prisma.DateTimeFilter<"GameSet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameSet"> | Date | string
  playerSessions?: Prisma.PlayerSessionListRelationFilter
  matches?: Prisma.MatchListRelationFilter
  session?: Prisma.XOR<Prisma.SessionScalarRelationFilter, Prisma.SessionWhereInput>
  setWinners?: Prisma.PlayerListRelationFilter
  GameSetToPlayer?: Prisma.GameSetToPlayerListRelationFilter
}, "setId">

export type GameSetOrderByWithAggregationInput = {
  setId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.GameSetCountOrderByAggregateInput
  _avg?: Prisma.GameSetAvgOrderByAggregateInput
  _max?: Prisma.GameSetMaxOrderByAggregateInput
  _min?: Prisma.GameSetMinOrderByAggregateInput
  _sum?: Prisma.GameSetSumOrderByAggregateInput
}

export type GameSetScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameSetScalarWhereWithAggregatesInput | Prisma.GameSetScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameSetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameSetScalarWhereWithAggregatesInput | Prisma.GameSetScalarWhereWithAggregatesInput[]
  setId?: Prisma.IntWithAggregatesFilter<"GameSet"> | number
  sessionId?: Prisma.IntWithAggregatesFilter<"GameSet"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GameSet"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"GameSet"> | Date | string
}

export type GameSetCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutSetInput
  matches?: Prisma.MatchCreateNestedManyWithoutSetInput
  session: Prisma.SessionCreateNestedOneWithoutSetsInput
  setWinners?: Prisma.PlayerCreateNestedManyWithoutSetWinsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutSetsInput
}

export type GameSetUncheckedCreateInput = {
  setId?: number
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutSetInput
  matches?: Prisma.MatchUncheckedCreateNestedManyWithoutSetInput
  setWinners?: Prisma.PlayerUncheckedCreateNestedManyWithoutSetWinsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutSetsInput
}

export type GameSetUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutSetNestedInput
  matches?: Prisma.MatchUpdateManyWithoutSetNestedInput
  session?: Prisma.SessionUpdateOneRequiredWithoutSetsNestedInput
  setWinners?: Prisma.PlayerUpdateManyWithoutSetWinsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutSetsNestedInput
}

export type GameSetUncheckedUpdateInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutSetNestedInput
  matches?: Prisma.MatchUncheckedUpdateManyWithoutSetNestedInput
  setWinners?: Prisma.PlayerUncheckedUpdateManyWithoutSetWinsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutSetsNestedInput
}

export type GameSetCreateManyInput = {
  setId?: number
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GameSetUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameSetUncheckedUpdateManyInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameSetListRelationFilter = {
  every?: Prisma.GameSetWhereInput
  some?: Prisma.GameSetWhereInput
  none?: Prisma.GameSetWhereInput
}

export type GameSetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GameSetScalarRelationFilter = {
  is?: Prisma.GameSetWhereInput
  isNot?: Prisma.GameSetWhereInput
}

export type GameSetCountOrderByAggregateInput = {
  setId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameSetAvgOrderByAggregateInput = {
  setId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
}

export type GameSetMaxOrderByAggregateInput = {
  setId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameSetMinOrderByAggregateInput = {
  setId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameSetSumOrderByAggregateInput = {
  setId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
}

export type GameSetCreateNestedManyWithoutSetWinnersInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutSetWinnersInput, Prisma.GameSetUncheckedCreateWithoutSetWinnersInput> | Prisma.GameSetCreateWithoutSetWinnersInput[] | Prisma.GameSetUncheckedCreateWithoutSetWinnersInput[]
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutSetWinnersInput | Prisma.GameSetCreateOrConnectWithoutSetWinnersInput[]
  connect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
}

export type GameSetUncheckedCreateNestedManyWithoutSetWinnersInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutSetWinnersInput, Prisma.GameSetUncheckedCreateWithoutSetWinnersInput> | Prisma.GameSetCreateWithoutSetWinnersInput[] | Prisma.GameSetUncheckedCreateWithoutSetWinnersInput[]
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutSetWinnersInput | Prisma.GameSetCreateOrConnectWithoutSetWinnersInput[]
  connect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
}

export type GameSetUpdateManyWithoutSetWinnersNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutSetWinnersInput, Prisma.GameSetUncheckedCreateWithoutSetWinnersInput> | Prisma.GameSetCreateWithoutSetWinnersInput[] | Prisma.GameSetUncheckedCreateWithoutSetWinnersInput[]
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutSetWinnersInput | Prisma.GameSetCreateOrConnectWithoutSetWinnersInput[]
  upsert?: Prisma.GameSetUpsertWithWhereUniqueWithoutSetWinnersInput | Prisma.GameSetUpsertWithWhereUniqueWithoutSetWinnersInput[]
  set?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  disconnect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  delete?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  connect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  update?: Prisma.GameSetUpdateWithWhereUniqueWithoutSetWinnersInput | Prisma.GameSetUpdateWithWhereUniqueWithoutSetWinnersInput[]
  updateMany?: Prisma.GameSetUpdateManyWithWhereWithoutSetWinnersInput | Prisma.GameSetUpdateManyWithWhereWithoutSetWinnersInput[]
  deleteMany?: Prisma.GameSetScalarWhereInput | Prisma.GameSetScalarWhereInput[]
}

export type GameSetUncheckedUpdateManyWithoutSetWinnersNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutSetWinnersInput, Prisma.GameSetUncheckedCreateWithoutSetWinnersInput> | Prisma.GameSetCreateWithoutSetWinnersInput[] | Prisma.GameSetUncheckedCreateWithoutSetWinnersInput[]
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutSetWinnersInput | Prisma.GameSetCreateOrConnectWithoutSetWinnersInput[]
  upsert?: Prisma.GameSetUpsertWithWhereUniqueWithoutSetWinnersInput | Prisma.GameSetUpsertWithWhereUniqueWithoutSetWinnersInput[]
  set?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  disconnect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  delete?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  connect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  update?: Prisma.GameSetUpdateWithWhereUniqueWithoutSetWinnersInput | Prisma.GameSetUpdateWithWhereUniqueWithoutSetWinnersInput[]
  updateMany?: Prisma.GameSetUpdateManyWithWhereWithoutSetWinnersInput | Prisma.GameSetUpdateManyWithWhereWithoutSetWinnersInput[]
  deleteMany?: Prisma.GameSetScalarWhereInput | Prisma.GameSetScalarWhereInput[]
}

export type GameSetCreateNestedOneWithoutGameSetToPlayerInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutGameSetToPlayerInput, Prisma.GameSetUncheckedCreateWithoutGameSetToPlayerInput>
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutGameSetToPlayerInput
  connect?: Prisma.GameSetWhereUniqueInput
}

export type GameSetUpdateOneRequiredWithoutGameSetToPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutGameSetToPlayerInput, Prisma.GameSetUncheckedCreateWithoutGameSetToPlayerInput>
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutGameSetToPlayerInput
  upsert?: Prisma.GameSetUpsertWithoutGameSetToPlayerInput
  connect?: Prisma.GameSetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameSetUpdateToOneWithWhereWithoutGameSetToPlayerInput, Prisma.GameSetUpdateWithoutGameSetToPlayerInput>, Prisma.GameSetUncheckedUpdateWithoutGameSetToPlayerInput>
}

export type GameSetCreateNestedManyWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutSessionInput, Prisma.GameSetUncheckedCreateWithoutSessionInput> | Prisma.GameSetCreateWithoutSessionInput[] | Prisma.GameSetUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutSessionInput | Prisma.GameSetCreateOrConnectWithoutSessionInput[]
  createMany?: Prisma.GameSetCreateManySessionInputEnvelope
  connect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
}

export type GameSetUncheckedCreateNestedManyWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutSessionInput, Prisma.GameSetUncheckedCreateWithoutSessionInput> | Prisma.GameSetCreateWithoutSessionInput[] | Prisma.GameSetUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutSessionInput | Prisma.GameSetCreateOrConnectWithoutSessionInput[]
  createMany?: Prisma.GameSetCreateManySessionInputEnvelope
  connect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
}

export type GameSetUpdateManyWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutSessionInput, Prisma.GameSetUncheckedCreateWithoutSessionInput> | Prisma.GameSetCreateWithoutSessionInput[] | Prisma.GameSetUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutSessionInput | Prisma.GameSetCreateOrConnectWithoutSessionInput[]
  upsert?: Prisma.GameSetUpsertWithWhereUniqueWithoutSessionInput | Prisma.GameSetUpsertWithWhereUniqueWithoutSessionInput[]
  createMany?: Prisma.GameSetCreateManySessionInputEnvelope
  set?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  disconnect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  delete?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  connect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  update?: Prisma.GameSetUpdateWithWhereUniqueWithoutSessionInput | Prisma.GameSetUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.GameSetUpdateManyWithWhereWithoutSessionInput | Prisma.GameSetUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.GameSetScalarWhereInput | Prisma.GameSetScalarWhereInput[]
}

export type GameSetUncheckedUpdateManyWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutSessionInput, Prisma.GameSetUncheckedCreateWithoutSessionInput> | Prisma.GameSetCreateWithoutSessionInput[] | Prisma.GameSetUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutSessionInput | Prisma.GameSetCreateOrConnectWithoutSessionInput[]
  upsert?: Prisma.GameSetUpsertWithWhereUniqueWithoutSessionInput | Prisma.GameSetUpsertWithWhereUniqueWithoutSessionInput[]
  createMany?: Prisma.GameSetCreateManySessionInputEnvelope
  set?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  disconnect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  delete?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  connect?: Prisma.GameSetWhereUniqueInput | Prisma.GameSetWhereUniqueInput[]
  update?: Prisma.GameSetUpdateWithWhereUniqueWithoutSessionInput | Prisma.GameSetUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.GameSetUpdateManyWithWhereWithoutSessionInput | Prisma.GameSetUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.GameSetScalarWhereInput | Prisma.GameSetScalarWhereInput[]
}

export type GameSetCreateNestedOneWithoutMatchesInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutMatchesInput, Prisma.GameSetUncheckedCreateWithoutMatchesInput>
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutMatchesInput
  connect?: Prisma.GameSetWhereUniqueInput
}

export type GameSetUpdateOneRequiredWithoutMatchesNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutMatchesInput, Prisma.GameSetUncheckedCreateWithoutMatchesInput>
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutMatchesInput
  upsert?: Prisma.GameSetUpsertWithoutMatchesInput
  connect?: Prisma.GameSetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameSetUpdateToOneWithWhereWithoutMatchesInput, Prisma.GameSetUpdateWithoutMatchesInput>, Prisma.GameSetUncheckedUpdateWithoutMatchesInput>
}

export type GameSetCreateNestedOneWithoutPlayerSessionsInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutPlayerSessionsInput, Prisma.GameSetUncheckedCreateWithoutPlayerSessionsInput>
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutPlayerSessionsInput
  connect?: Prisma.GameSetWhereUniqueInput
}

export type GameSetUpdateOneRequiredWithoutPlayerSessionsNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetCreateWithoutPlayerSessionsInput, Prisma.GameSetUncheckedCreateWithoutPlayerSessionsInput>
  connectOrCreate?: Prisma.GameSetCreateOrConnectWithoutPlayerSessionsInput
  upsert?: Prisma.GameSetUpsertWithoutPlayerSessionsInput
  connect?: Prisma.GameSetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameSetUpdateToOneWithWhereWithoutPlayerSessionsInput, Prisma.GameSetUpdateWithoutPlayerSessionsInput>, Prisma.GameSetUncheckedUpdateWithoutPlayerSessionsInput>
}

export type GameSetCreateWithoutSetWinnersInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutSetInput
  matches?: Prisma.MatchCreateNestedManyWithoutSetInput
  session: Prisma.SessionCreateNestedOneWithoutSetsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutSetsInput
}

export type GameSetUncheckedCreateWithoutSetWinnersInput = {
  setId?: number
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutSetInput
  matches?: Prisma.MatchUncheckedCreateNestedManyWithoutSetInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutSetsInput
}

export type GameSetCreateOrConnectWithoutSetWinnersInput = {
  where: Prisma.GameSetWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSetCreateWithoutSetWinnersInput, Prisma.GameSetUncheckedCreateWithoutSetWinnersInput>
}

export type GameSetUpsertWithWhereUniqueWithoutSetWinnersInput = {
  where: Prisma.GameSetWhereUniqueInput
  update: Prisma.XOR<Prisma.GameSetUpdateWithoutSetWinnersInput, Prisma.GameSetUncheckedUpdateWithoutSetWinnersInput>
  create: Prisma.XOR<Prisma.GameSetCreateWithoutSetWinnersInput, Prisma.GameSetUncheckedCreateWithoutSetWinnersInput>
}

export type GameSetUpdateWithWhereUniqueWithoutSetWinnersInput = {
  where: Prisma.GameSetWhereUniqueInput
  data: Prisma.XOR<Prisma.GameSetUpdateWithoutSetWinnersInput, Prisma.GameSetUncheckedUpdateWithoutSetWinnersInput>
}

export type GameSetUpdateManyWithWhereWithoutSetWinnersInput = {
  where: Prisma.GameSetScalarWhereInput
  data: Prisma.XOR<Prisma.GameSetUpdateManyMutationInput, Prisma.GameSetUncheckedUpdateManyWithoutSetWinnersInput>
}

export type GameSetScalarWhereInput = {
  AND?: Prisma.GameSetScalarWhereInput | Prisma.GameSetScalarWhereInput[]
  OR?: Prisma.GameSetScalarWhereInput[]
  NOT?: Prisma.GameSetScalarWhereInput | Prisma.GameSetScalarWhereInput[]
  setId?: Prisma.IntFilter<"GameSet"> | number
  sessionId?: Prisma.IntFilter<"GameSet"> | number
  createdAt?: Prisma.DateTimeFilter<"GameSet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameSet"> | Date | string
}

export type GameSetCreateWithoutGameSetToPlayerInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutSetInput
  matches?: Prisma.MatchCreateNestedManyWithoutSetInput
  session: Prisma.SessionCreateNestedOneWithoutSetsInput
  setWinners?: Prisma.PlayerCreateNestedManyWithoutSetWinsInput
}

export type GameSetUncheckedCreateWithoutGameSetToPlayerInput = {
  setId?: number
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutSetInput
  matches?: Prisma.MatchUncheckedCreateNestedManyWithoutSetInput
  setWinners?: Prisma.PlayerUncheckedCreateNestedManyWithoutSetWinsInput
}

export type GameSetCreateOrConnectWithoutGameSetToPlayerInput = {
  where: Prisma.GameSetWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSetCreateWithoutGameSetToPlayerInput, Prisma.GameSetUncheckedCreateWithoutGameSetToPlayerInput>
}

export type GameSetUpsertWithoutGameSetToPlayerInput = {
  update: Prisma.XOR<Prisma.GameSetUpdateWithoutGameSetToPlayerInput, Prisma.GameSetUncheckedUpdateWithoutGameSetToPlayerInput>
  create: Prisma.XOR<Prisma.GameSetCreateWithoutGameSetToPlayerInput, Prisma.GameSetUncheckedCreateWithoutGameSetToPlayerInput>
  where?: Prisma.GameSetWhereInput
}

export type GameSetUpdateToOneWithWhereWithoutGameSetToPlayerInput = {
  where?: Prisma.GameSetWhereInput
  data: Prisma.XOR<Prisma.GameSetUpdateWithoutGameSetToPlayerInput, Prisma.GameSetUncheckedUpdateWithoutGameSetToPlayerInput>
}

export type GameSetUpdateWithoutGameSetToPlayerInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutSetNestedInput
  matches?: Prisma.MatchUpdateManyWithoutSetNestedInput
  session?: Prisma.SessionUpdateOneRequiredWithoutSetsNestedInput
  setWinners?: Prisma.PlayerUpdateManyWithoutSetWinsNestedInput
}

export type GameSetUncheckedUpdateWithoutGameSetToPlayerInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutSetNestedInput
  matches?: Prisma.MatchUncheckedUpdateManyWithoutSetNestedInput
  setWinners?: Prisma.PlayerUncheckedUpdateManyWithoutSetWinsNestedInput
}

export type GameSetCreateWithoutSessionInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutSetInput
  matches?: Prisma.MatchCreateNestedManyWithoutSetInput
  setWinners?: Prisma.PlayerCreateNestedManyWithoutSetWinsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutSetsInput
}

export type GameSetUncheckedCreateWithoutSessionInput = {
  setId?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutSetInput
  matches?: Prisma.MatchUncheckedCreateNestedManyWithoutSetInput
  setWinners?: Prisma.PlayerUncheckedCreateNestedManyWithoutSetWinsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutSetsInput
}

export type GameSetCreateOrConnectWithoutSessionInput = {
  where: Prisma.GameSetWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSetCreateWithoutSessionInput, Prisma.GameSetUncheckedCreateWithoutSessionInput>
}

export type GameSetCreateManySessionInputEnvelope = {
  data: Prisma.GameSetCreateManySessionInput | Prisma.GameSetCreateManySessionInput[]
  skipDuplicates?: boolean
}

export type GameSetUpsertWithWhereUniqueWithoutSessionInput = {
  where: Prisma.GameSetWhereUniqueInput
  update: Prisma.XOR<Prisma.GameSetUpdateWithoutSessionInput, Prisma.GameSetUncheckedUpdateWithoutSessionInput>
  create: Prisma.XOR<Prisma.GameSetCreateWithoutSessionInput, Prisma.GameSetUncheckedCreateWithoutSessionInput>
}

export type GameSetUpdateWithWhereUniqueWithoutSessionInput = {
  where: Prisma.GameSetWhereUniqueInput
  data: Prisma.XOR<Prisma.GameSetUpdateWithoutSessionInput, Prisma.GameSetUncheckedUpdateWithoutSessionInput>
}

export type GameSetUpdateManyWithWhereWithoutSessionInput = {
  where: Prisma.GameSetScalarWhereInput
  data: Prisma.XOR<Prisma.GameSetUpdateManyMutationInput, Prisma.GameSetUncheckedUpdateManyWithoutSessionInput>
}

export type GameSetCreateWithoutMatchesInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutSetInput
  session: Prisma.SessionCreateNestedOneWithoutSetsInput
  setWinners?: Prisma.PlayerCreateNestedManyWithoutSetWinsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutSetsInput
}

export type GameSetUncheckedCreateWithoutMatchesInput = {
  setId?: number
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutSetInput
  setWinners?: Prisma.PlayerUncheckedCreateNestedManyWithoutSetWinsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutSetsInput
}

export type GameSetCreateOrConnectWithoutMatchesInput = {
  where: Prisma.GameSetWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSetCreateWithoutMatchesInput, Prisma.GameSetUncheckedCreateWithoutMatchesInput>
}

export type GameSetUpsertWithoutMatchesInput = {
  update: Prisma.XOR<Prisma.GameSetUpdateWithoutMatchesInput, Prisma.GameSetUncheckedUpdateWithoutMatchesInput>
  create: Prisma.XOR<Prisma.GameSetCreateWithoutMatchesInput, Prisma.GameSetUncheckedCreateWithoutMatchesInput>
  where?: Prisma.GameSetWhereInput
}

export type GameSetUpdateToOneWithWhereWithoutMatchesInput = {
  where?: Prisma.GameSetWhereInput
  data: Prisma.XOR<Prisma.GameSetUpdateWithoutMatchesInput, Prisma.GameSetUncheckedUpdateWithoutMatchesInput>
}

export type GameSetUpdateWithoutMatchesInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutSetNestedInput
  session?: Prisma.SessionUpdateOneRequiredWithoutSetsNestedInput
  setWinners?: Prisma.PlayerUpdateManyWithoutSetWinsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutSetsNestedInput
}

export type GameSetUncheckedUpdateWithoutMatchesInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutSetNestedInput
  setWinners?: Prisma.PlayerUncheckedUpdateManyWithoutSetWinsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutSetsNestedInput
}

export type GameSetCreateWithoutPlayerSessionsInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  matches?: Prisma.MatchCreateNestedManyWithoutSetInput
  session: Prisma.SessionCreateNestedOneWithoutSetsInput
  setWinners?: Prisma.PlayerCreateNestedManyWithoutSetWinsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutSetsInput
}

export type GameSetUncheckedCreateWithoutPlayerSessionsInput = {
  setId?: number
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  matches?: Prisma.MatchUncheckedCreateNestedManyWithoutSetInput
  setWinners?: Prisma.PlayerUncheckedCreateNestedManyWithoutSetWinsInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutSetsInput
}

export type GameSetCreateOrConnectWithoutPlayerSessionsInput = {
  where: Prisma.GameSetWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSetCreateWithoutPlayerSessionsInput, Prisma.GameSetUncheckedCreateWithoutPlayerSessionsInput>
}

export type GameSetUpsertWithoutPlayerSessionsInput = {
  update: Prisma.XOR<Prisma.GameSetUpdateWithoutPlayerSessionsInput, Prisma.GameSetUncheckedUpdateWithoutPlayerSessionsInput>
  create: Prisma.XOR<Prisma.GameSetCreateWithoutPlayerSessionsInput, Prisma.GameSetUncheckedCreateWithoutPlayerSessionsInput>
  where?: Prisma.GameSetWhereInput
}

export type GameSetUpdateToOneWithWhereWithoutPlayerSessionsInput = {
  where?: Prisma.GameSetWhereInput
  data: Prisma.XOR<Prisma.GameSetUpdateWithoutPlayerSessionsInput, Prisma.GameSetUncheckedUpdateWithoutPlayerSessionsInput>
}

export type GameSetUpdateWithoutPlayerSessionsInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  matches?: Prisma.MatchUpdateManyWithoutSetNestedInput
  session?: Prisma.SessionUpdateOneRequiredWithoutSetsNestedInput
  setWinners?: Prisma.PlayerUpdateManyWithoutSetWinsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutSetsNestedInput
}

export type GameSetUncheckedUpdateWithoutPlayerSessionsInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  matches?: Prisma.MatchUncheckedUpdateManyWithoutSetNestedInput
  setWinners?: Prisma.PlayerUncheckedUpdateManyWithoutSetWinsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutSetsNestedInput
}

export type GameSetUpdateWithoutSetWinnersInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutSetNestedInput
  matches?: Prisma.MatchUpdateManyWithoutSetNestedInput
  session?: Prisma.SessionUpdateOneRequiredWithoutSetsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutSetsNestedInput
}

export type GameSetUncheckedUpdateWithoutSetWinnersInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutSetNestedInput
  matches?: Prisma.MatchUncheckedUpdateManyWithoutSetNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutSetsNestedInput
}

export type GameSetUncheckedUpdateManyWithoutSetWinnersInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameSetCreateManySessionInput = {
  setId?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GameSetUpdateWithoutSessionInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutSetNestedInput
  matches?: Prisma.MatchUpdateManyWithoutSetNestedInput
  setWinners?: Prisma.PlayerUpdateManyWithoutSetWinsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutSetsNestedInput
}

export type GameSetUncheckedUpdateWithoutSessionInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutSetNestedInput
  matches?: Prisma.MatchUncheckedUpdateManyWithoutSetNestedInput
  setWinners?: Prisma.PlayerUncheckedUpdateManyWithoutSetWinsNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutSetsNestedInput
}

export type GameSetUncheckedUpdateManyWithoutSessionInput = {
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type GameSetCountOutputType
 */

export type GameSetCountOutputType = {
  playerSessions: number
  matches: number
  setWinners: number
  GameSetToPlayer: number
}

export type GameSetCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playerSessions?: boolean | GameSetCountOutputTypeCountPlayerSessionsArgs
  matches?: boolean | GameSetCountOutputTypeCountMatchesArgs
  setWinners?: boolean | GameSetCountOutputTypeCountSetWinnersArgs
  GameSetToPlayer?: boolean | GameSetCountOutputTypeCountGameSetToPlayerArgs
}

/**
 * GameSetCountOutputType without action
 */
export type GameSetCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetCountOutputType
   */
  select?: Prisma.GameSetCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GameSetCountOutputType without action
 */
export type GameSetCountOutputTypeCountPlayerSessionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerSessionWhereInput
}

/**
 * GameSetCountOutputType without action
 */
export type GameSetCountOutputTypeCountMatchesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MatchWhereInput
}

/**
 * GameSetCountOutputType without action
 */
export type GameSetCountOutputTypeCountSetWinnersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerWhereInput
}

/**
 * GameSetCountOutputType without action
 */
export type GameSetCountOutputTypeCountGameSetToPlayerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSetToPlayerWhereInput
}


export type GameSetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  setId?: boolean
  sessionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  playerSessions?: boolean | Prisma.GameSet$playerSessionsArgs<ExtArgs>
  matches?: boolean | Prisma.GameSet$matchesArgs<ExtArgs>
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
  setWinners?: boolean | Prisma.GameSet$setWinnersArgs<ExtArgs>
  GameSetToPlayer?: boolean | Prisma.GameSet$GameSetToPlayerArgs<ExtArgs>
  _count?: boolean | Prisma.GameSetCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSet"]>

export type GameSetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  setId?: boolean
  sessionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSet"]>

export type GameSetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  setId?: boolean
  sessionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSet"]>

export type GameSetSelectScalar = {
  setId?: boolean
  sessionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type GameSetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"setId" | "sessionId" | "createdAt" | "updatedAt", ExtArgs["result"]["gameSet"]>
export type GameSetInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playerSessions?: boolean | Prisma.GameSet$playerSessionsArgs<ExtArgs>
  matches?: boolean | Prisma.GameSet$matchesArgs<ExtArgs>
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
  setWinners?: boolean | Prisma.GameSet$setWinnersArgs<ExtArgs>
  GameSetToPlayer?: boolean | Prisma.GameSet$GameSetToPlayerArgs<ExtArgs>
  _count?: boolean | Prisma.GameSetCountOutputTypeDefaultArgs<ExtArgs>
}
export type GameSetIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}
export type GameSetIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}

export type $GameSetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GameSet"
  objects: {
    playerSessions: Prisma.$PlayerSessionPayload<ExtArgs>[]
    matches: Prisma.$MatchPayload<ExtArgs>[]
    session: Prisma.$SessionPayload<ExtArgs>
    setWinners: Prisma.$PlayerPayload<ExtArgs>[]
    GameSetToPlayer: Prisma.$GameSetToPlayerPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    setId: number
    sessionId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["gameSet"]>
  composites: {}
}

export type GameSetGetPayload<S extends boolean | null | undefined | GameSetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GameSetPayload, S>

export type GameSetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameSetCountAggregateInputType | true
  }

export interface GameSetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSet'], meta: { name: 'GameSet' } }
  /**
   * Find zero or one GameSet that matches the filter.
   * @param {GameSetFindUniqueArgs} args - Arguments to find a GameSet
   * @example
   * // Get one GameSet
   * const gameSet = await prisma.gameSet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameSetFindUniqueArgs>(args: Prisma.SelectSubset<T, GameSetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GameSet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameSetFindUniqueOrThrowArgs} args - Arguments to find a GameSet
   * @example
   * // Get one GameSet
   * const gameSet = await prisma.gameSet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameSetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameSet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetFindFirstArgs} args - Arguments to find a GameSet
   * @example
   * // Get one GameSet
   * const gameSet = await prisma.gameSet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameSetFindFirstArgs>(args?: Prisma.SelectSubset<T, GameSetFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameSet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetFindFirstOrThrowArgs} args - Arguments to find a GameSet
   * @example
   * // Get one GameSet
   * const gameSet = await prisma.gameSet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameSetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameSetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GameSets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GameSets
   * const gameSets = await prisma.gameSet.findMany()
   * 
   * // Get first 10 GameSets
   * const gameSets = await prisma.gameSet.findMany({ take: 10 })
   * 
   * // Only select the `setId`
   * const gameSetWithSetIdOnly = await prisma.gameSet.findMany({ select: { setId: true } })
   * 
   */
  findMany<T extends GameSetFindManyArgs>(args?: Prisma.SelectSubset<T, GameSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GameSet.
   * @param {GameSetCreateArgs} args - Arguments to create a GameSet.
   * @example
   * // Create one GameSet
   * const GameSet = await prisma.gameSet.create({
   *   data: {
   *     // ... data to create a GameSet
   *   }
   * })
   * 
   */
  create<T extends GameSetCreateArgs>(args: Prisma.SelectSubset<T, GameSetCreateArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GameSets.
   * @param {GameSetCreateManyArgs} args - Arguments to create many GameSets.
   * @example
   * // Create many GameSets
   * const gameSet = await prisma.gameSet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameSetCreateManyArgs>(args?: Prisma.SelectSubset<T, GameSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GameSets and returns the data saved in the database.
   * @param {GameSetCreateManyAndReturnArgs} args - Arguments to create many GameSets.
   * @example
   * // Create many GameSets
   * const gameSet = await prisma.gameSet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GameSets and only return the `setId`
   * const gameSetWithSetIdOnly = await prisma.gameSet.createManyAndReturn({
   *   select: { setId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameSetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GameSet.
   * @param {GameSetDeleteArgs} args - Arguments to delete one GameSet.
   * @example
   * // Delete one GameSet
   * const GameSet = await prisma.gameSet.delete({
   *   where: {
   *     // ... filter to delete one GameSet
   *   }
   * })
   * 
   */
  delete<T extends GameSetDeleteArgs>(args: Prisma.SelectSubset<T, GameSetDeleteArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GameSet.
   * @param {GameSetUpdateArgs} args - Arguments to update one GameSet.
   * @example
   * // Update one GameSet
   * const gameSet = await prisma.gameSet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameSetUpdateArgs>(args: Prisma.SelectSubset<T, GameSetUpdateArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GameSets.
   * @param {GameSetDeleteManyArgs} args - Arguments to filter GameSets to delete.
   * @example
   * // Delete a few GameSets
   * const { count } = await prisma.gameSet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameSetDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameSets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GameSets
   * const gameSet = await prisma.gameSet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameSetUpdateManyArgs>(args: Prisma.SelectSubset<T, GameSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameSets and returns the data updated in the database.
   * @param {GameSetUpdateManyAndReturnArgs} args - Arguments to update many GameSets.
   * @example
   * // Update many GameSets
   * const gameSet = await prisma.gameSet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GameSets and only return the `setId`
   * const gameSetWithSetIdOnly = await prisma.gameSet.updateManyAndReturn({
   *   select: { setId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameSetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GameSet.
   * @param {GameSetUpsertArgs} args - Arguments to update or create a GameSet.
   * @example
   * // Update or create a GameSet
   * const gameSet = await prisma.gameSet.upsert({
   *   create: {
   *     // ... data to create a GameSet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GameSet we want to update
   *   }
   * })
   */
  upsert<T extends GameSetUpsertArgs>(args: Prisma.SelectSubset<T, GameSetUpsertArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GameSets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetCountArgs} args - Arguments to filter GameSets to count.
   * @example
   * // Count the number of GameSets
   * const count = await prisma.gameSet.count({
   *   where: {
   *     // ... the filter for the GameSets we want to count
   *   }
   * })
  **/
  count<T extends GameSetCountArgs>(
    args?: Prisma.Subset<T, GameSetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameSetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GameSet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameSetAggregateArgs>(args: Prisma.Subset<T, GameSetAggregateArgs>): Prisma.PrismaPromise<GetGameSetAggregateType<T>>

  /**
   * Group by GameSet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameSetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameSetGroupByArgs['orderBy'] }
      : { orderBy?: GameSetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GameSet model
 */
readonly fields: GameSetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GameSet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameSetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  playerSessions<T extends Prisma.GameSet$playerSessionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSet$playerSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  matches<T extends Prisma.GameSet$matchesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSet$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  session<T extends Prisma.SessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SessionDefaultArgs<ExtArgs>>): Prisma.Prisma__SessionClient<runtime.Types.Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  setWinners<T extends Prisma.GameSet$setWinnersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSet$setWinnersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  GameSetToPlayer<T extends Prisma.GameSet$GameSetToPlayerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSet$GameSetToPlayerArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GameSet model
 */
export interface GameSetFieldRefs {
  readonly setId: Prisma.FieldRef<"GameSet", 'Int'>
  readonly sessionId: Prisma.FieldRef<"GameSet", 'Int'>
  readonly createdAt: Prisma.FieldRef<"GameSet", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"GameSet", 'DateTime'>
}
    

// Custom InputTypes
/**
 * GameSet findUnique
 */
export type GameSetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * Filter, which GameSet to fetch.
   */
  where: Prisma.GameSetWhereUniqueInput
}

/**
 * GameSet findUniqueOrThrow
 */
export type GameSetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * Filter, which GameSet to fetch.
   */
  where: Prisma.GameSetWhereUniqueInput
}

/**
 * GameSet findFirst
 */
export type GameSetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * Filter, which GameSet to fetch.
   */
  where?: Prisma.GameSetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSets to fetch.
   */
  orderBy?: Prisma.GameSetOrderByWithRelationInput | Prisma.GameSetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameSets.
   */
  cursor?: Prisma.GameSetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameSets.
   */
  distinct?: Prisma.GameSetScalarFieldEnum | Prisma.GameSetScalarFieldEnum[]
}

/**
 * GameSet findFirstOrThrow
 */
export type GameSetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * Filter, which GameSet to fetch.
   */
  where?: Prisma.GameSetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSets to fetch.
   */
  orderBy?: Prisma.GameSetOrderByWithRelationInput | Prisma.GameSetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameSets.
   */
  cursor?: Prisma.GameSetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameSets.
   */
  distinct?: Prisma.GameSetScalarFieldEnum | Prisma.GameSetScalarFieldEnum[]
}

/**
 * GameSet findMany
 */
export type GameSetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * Filter, which GameSets to fetch.
   */
  where?: Prisma.GameSetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSets to fetch.
   */
  orderBy?: Prisma.GameSetOrderByWithRelationInput | Prisma.GameSetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GameSets.
   */
  cursor?: Prisma.GameSetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSets.
   */
  skip?: number
  distinct?: Prisma.GameSetScalarFieldEnum | Prisma.GameSetScalarFieldEnum[]
}

/**
 * GameSet create
 */
export type GameSetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * The data needed to create a GameSet.
   */
  data: Prisma.XOR<Prisma.GameSetCreateInput, Prisma.GameSetUncheckedCreateInput>
}

/**
 * GameSet createMany
 */
export type GameSetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GameSets.
   */
  data: Prisma.GameSetCreateManyInput | Prisma.GameSetCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameSet createManyAndReturn
 */
export type GameSetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * The data used to create many GameSets.
   */
  data: Prisma.GameSetCreateManyInput | Prisma.GameSetCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GameSet update
 */
export type GameSetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * The data needed to update a GameSet.
   */
  data: Prisma.XOR<Prisma.GameSetUpdateInput, Prisma.GameSetUncheckedUpdateInput>
  /**
   * Choose, which GameSet to update.
   */
  where: Prisma.GameSetWhereUniqueInput
}

/**
 * GameSet updateMany
 */
export type GameSetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GameSets.
   */
  data: Prisma.XOR<Prisma.GameSetUpdateManyMutationInput, Prisma.GameSetUncheckedUpdateManyInput>
  /**
   * Filter which GameSets to update
   */
  where?: Prisma.GameSetWhereInput
  /**
   * Limit how many GameSets to update.
   */
  limit?: number
}

/**
 * GameSet updateManyAndReturn
 */
export type GameSetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * The data used to update GameSets.
   */
  data: Prisma.XOR<Prisma.GameSetUpdateManyMutationInput, Prisma.GameSetUncheckedUpdateManyInput>
  /**
   * Filter which GameSets to update
   */
  where?: Prisma.GameSetWhereInput
  /**
   * Limit how many GameSets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GameSet upsert
 */
export type GameSetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * The filter to search for the GameSet to update in case it exists.
   */
  where: Prisma.GameSetWhereUniqueInput
  /**
   * In case the GameSet found by the `where` argument doesn't exist, create a new GameSet with this data.
   */
  create: Prisma.XOR<Prisma.GameSetCreateInput, Prisma.GameSetUncheckedCreateInput>
  /**
   * In case the GameSet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameSetUpdateInput, Prisma.GameSetUncheckedUpdateInput>
}

/**
 * GameSet delete
 */
export type GameSetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  /**
   * Filter which GameSet to delete.
   */
  where: Prisma.GameSetWhereUniqueInput
}

/**
 * GameSet deleteMany
 */
export type GameSetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameSets to delete
   */
  where?: Prisma.GameSetWhereInput
  /**
   * Limit how many GameSets to delete.
   */
  limit?: number
}

/**
 * GameSet.playerSessions
 */
export type GameSet$playerSessionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  where?: Prisma.PlayerSessionWhereInput
  orderBy?: Prisma.PlayerSessionOrderByWithRelationInput | Prisma.PlayerSessionOrderByWithRelationInput[]
  cursor?: Prisma.PlayerSessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlayerSessionScalarFieldEnum | Prisma.PlayerSessionScalarFieldEnum[]
}

/**
 * GameSet.matches
 */
export type GameSet$matchesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  where?: Prisma.MatchWhereInput
  orderBy?: Prisma.MatchOrderByWithRelationInput | Prisma.MatchOrderByWithRelationInput[]
  cursor?: Prisma.MatchWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MatchScalarFieldEnum | Prisma.MatchScalarFieldEnum[]
}

/**
 * GameSet.setWinners
 */
export type GameSet$setWinnersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  where?: Prisma.PlayerWhereInput
  orderBy?: Prisma.PlayerOrderByWithRelationInput | Prisma.PlayerOrderByWithRelationInput[]
  cursor?: Prisma.PlayerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlayerScalarFieldEnum | Prisma.PlayerScalarFieldEnum[]
}

/**
 * GameSet.GameSetToPlayer
 */
export type GameSet$GameSetToPlayerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  where?: Prisma.GameSetToPlayerWhereInput
  orderBy?: Prisma.GameSetToPlayerOrderByWithRelationInput | Prisma.GameSetToPlayerOrderByWithRelationInput[]
  cursor?: Prisma.GameSetToPlayerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameSetToPlayerScalarFieldEnum | Prisma.GameSetToPlayerScalarFieldEnum[]
}

/**
 * GameSet without action
 */
export type GameSetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
}
