
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `GameSetToPlayer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GameSetToPlayer
 * 
 */
export type GameSetToPlayerModel = runtime.Types.Result.DefaultSelection<Prisma.$GameSetToPlayerPayload>

export type AggregateGameSetToPlayer = {
  _count: GameSetToPlayerCountAggregateOutputType | null
  _avg: GameSetToPlayerAvgAggregateOutputType | null
  _sum: GameSetToPlayerSumAggregateOutputType | null
  _min: GameSetToPlayerMinAggregateOutputType | null
  _max: GameSetToPlayerMaxAggregateOutputType | null
}

export type GameSetToPlayerAvgAggregateOutputType = {
  A: number | null
  B: number | null
}

export type GameSetToPlayerSumAggregateOutputType = {
  A: number | null
  B: number | null
}

export type GameSetToPlayerMinAggregateOutputType = {
  A: number | null
  B: number | null
}

export type GameSetToPlayerMaxAggregateOutputType = {
  A: number | null
  B: number | null
}

export type GameSetToPlayerCountAggregateOutputType = {
  A: number
  B: number
  _all: number
}


export type GameSetToPlayerAvgAggregateInputType = {
  A?: true
  B?: true
}

export type GameSetToPlayerSumAggregateInputType = {
  A?: true
  B?: true
}

export type GameSetToPlayerMinAggregateInputType = {
  A?: true
  B?: true
}

export type GameSetToPlayerMaxAggregateInputType = {
  A?: true
  B?: true
}

export type GameSetToPlayerCountAggregateInputType = {
  A?: true
  B?: true
  _all?: true
}

export type GameSetToPlayerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameSetToPlayer to aggregate.
   */
  where?: Prisma.GameSetToPlayerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSetToPlayers to fetch.
   */
  orderBy?: Prisma.GameSetToPlayerOrderByWithRelationInput | Prisma.GameSetToPlayerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameSetToPlayerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSetToPlayers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSetToPlayers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GameSetToPlayers
  **/
  _count?: true | GameSetToPlayerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameSetToPlayerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameSetToPlayerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameSetToPlayerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameSetToPlayerMaxAggregateInputType
}

export type GetGameSetToPlayerAggregateType<T extends GameSetToPlayerAggregateArgs> = {
      [P in keyof T & keyof AggregateGameSetToPlayer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGameSetToPlayer[P]>
    : Prisma.GetScalarType<T[P], AggregateGameSetToPlayer[P]>
}




export type GameSetToPlayerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSetToPlayerWhereInput
  orderBy?: Prisma.GameSetToPlayerOrderByWithAggregationInput | Prisma.GameSetToPlayerOrderByWithAggregationInput[]
  by: Prisma.GameSetToPlayerScalarFieldEnum[] | Prisma.GameSetToPlayerScalarFieldEnum
  having?: Prisma.GameSetToPlayerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameSetToPlayerCountAggregateInputType | true
  _avg?: GameSetToPlayerAvgAggregateInputType
  _sum?: GameSetToPlayerSumAggregateInputType
  _min?: GameSetToPlayerMinAggregateInputType
  _max?: GameSetToPlayerMaxAggregateInputType
}

export type GameSetToPlayerGroupByOutputType = {
  A: number
  B: number
  _count: GameSetToPlayerCountAggregateOutputType | null
  _avg: GameSetToPlayerAvgAggregateOutputType | null
  _sum: GameSetToPlayerSumAggregateOutputType | null
  _min: GameSetToPlayerMinAggregateOutputType | null
  _max: GameSetToPlayerMaxAggregateOutputType | null
}

type GetGameSetToPlayerGroupByPayload<T extends GameSetToPlayerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameSetToPlayerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameSetToPlayerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameSetToPlayerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameSetToPlayerGroupByOutputType[P]>
      }
    >
  >



export type GameSetToPlayerWhereInput = {
  AND?: Prisma.GameSetToPlayerWhereInput | Prisma.GameSetToPlayerWhereInput[]
  OR?: Prisma.GameSetToPlayerWhereInput[]
  NOT?: Prisma.GameSetToPlayerWhereInput | Prisma.GameSetToPlayerWhereInput[]
  A?: Prisma.IntFilter<"GameSetToPlayer"> | number
  B?: Prisma.IntFilter<"GameSetToPlayer"> | number
  sets?: Prisma.XOR<Prisma.GameSetScalarRelationFilter, Prisma.GameSetWhereInput>
  players?: Prisma.XOR<Prisma.PlayerScalarRelationFilter, Prisma.PlayerWhereInput>
}

export type GameSetToPlayerOrderByWithRelationInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
  sets?: Prisma.GameSetOrderByWithRelationInput
  players?: Prisma.PlayerOrderByWithRelationInput
}

export type GameSetToPlayerWhereUniqueInput = Prisma.AtLeast<{
  A_B?: Prisma.GameSetToPlayerABCompoundUniqueInput
  AND?: Prisma.GameSetToPlayerWhereInput | Prisma.GameSetToPlayerWhereInput[]
  OR?: Prisma.GameSetToPlayerWhereInput[]
  NOT?: Prisma.GameSetToPlayerWhereInput | Prisma.GameSetToPlayerWhereInput[]
  A?: Prisma.IntFilter<"GameSetToPlayer"> | number
  B?: Prisma.IntFilter<"GameSetToPlayer"> | number
  sets?: Prisma.XOR<Prisma.GameSetScalarRelationFilter, Prisma.GameSetWhereInput>
  players?: Prisma.XOR<Prisma.PlayerScalarRelationFilter, Prisma.PlayerWhereInput>
}, "A_B">

export type GameSetToPlayerOrderByWithAggregationInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
  _count?: Prisma.GameSetToPlayerCountOrderByAggregateInput
  _avg?: Prisma.GameSetToPlayerAvgOrderByAggregateInput
  _max?: Prisma.GameSetToPlayerMaxOrderByAggregateInput
  _min?: Prisma.GameSetToPlayerMinOrderByAggregateInput
  _sum?: Prisma.GameSetToPlayerSumOrderByAggregateInput
}

export type GameSetToPlayerScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameSetToPlayerScalarWhereWithAggregatesInput | Prisma.GameSetToPlayerScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameSetToPlayerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameSetToPlayerScalarWhereWithAggregatesInput | Prisma.GameSetToPlayerScalarWhereWithAggregatesInput[]
  A?: Prisma.IntWithAggregatesFilter<"GameSetToPlayer"> | number
  B?: Prisma.IntWithAggregatesFilter<"GameSetToPlayer"> | number
}

export type GameSetToPlayerCreateInput = {
  sets: Prisma.GameSetCreateNestedOneWithoutGameSetToPlayerInput
  players: Prisma.PlayerCreateNestedOneWithoutGameSetToPlayerInput
}

export type GameSetToPlayerUncheckedCreateInput = {
  A: number
  B: number
}

export type GameSetToPlayerUpdateInput = {
  sets?: Prisma.GameSetUpdateOneRequiredWithoutGameSetToPlayerNestedInput
  players?: Prisma.PlayerUpdateOneRequiredWithoutGameSetToPlayerNestedInput
}

export type GameSetToPlayerUncheckedUpdateInput = {
  A?: Prisma.IntFieldUpdateOperationsInput | number
  B?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GameSetToPlayerCreateManyInput = {
  A: number
  B: number
}

export type GameSetToPlayerUpdateManyMutationInput = {

}

export type GameSetToPlayerUncheckedUpdateManyInput = {
  A?: Prisma.IntFieldUpdateOperationsInput | number
  B?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GameSetToPlayerListRelationFilter = {
  every?: Prisma.GameSetToPlayerWhereInput
  some?: Prisma.GameSetToPlayerWhereInput
  none?: Prisma.GameSetToPlayerWhereInput
}

export type GameSetToPlayerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GameSetToPlayerABCompoundUniqueInput = {
  A: number
  B: number
}

export type GameSetToPlayerCountOrderByAggregateInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
}

export type GameSetToPlayerAvgOrderByAggregateInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
}

export type GameSetToPlayerMaxOrderByAggregateInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
}

export type GameSetToPlayerMinOrderByAggregateInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
}

export type GameSetToPlayerSumOrderByAggregateInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
}

export type GameSetToPlayerCreateNestedManyWithoutPlayersInput = {
  create?: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutPlayersInput, Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput> | Prisma.GameSetToPlayerCreateWithoutPlayersInput[] | Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput[]
  connectOrCreate?: Prisma.GameSetToPlayerCreateOrConnectWithoutPlayersInput | Prisma.GameSetToPlayerCreateOrConnectWithoutPlayersInput[]
  createMany?: Prisma.GameSetToPlayerCreateManyPlayersInputEnvelope
  connect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
}

export type GameSetToPlayerUncheckedCreateNestedManyWithoutPlayersInput = {
  create?: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutPlayersInput, Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput> | Prisma.GameSetToPlayerCreateWithoutPlayersInput[] | Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput[]
  connectOrCreate?: Prisma.GameSetToPlayerCreateOrConnectWithoutPlayersInput | Prisma.GameSetToPlayerCreateOrConnectWithoutPlayersInput[]
  createMany?: Prisma.GameSetToPlayerCreateManyPlayersInputEnvelope
  connect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
}

export type GameSetToPlayerUpdateManyWithoutPlayersNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutPlayersInput, Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput> | Prisma.GameSetToPlayerCreateWithoutPlayersInput[] | Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput[]
  connectOrCreate?: Prisma.GameSetToPlayerCreateOrConnectWithoutPlayersInput | Prisma.GameSetToPlayerCreateOrConnectWithoutPlayersInput[]
  upsert?: Prisma.GameSetToPlayerUpsertWithWhereUniqueWithoutPlayersInput | Prisma.GameSetToPlayerUpsertWithWhereUniqueWithoutPlayersInput[]
  createMany?: Prisma.GameSetToPlayerCreateManyPlayersInputEnvelope
  set?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  disconnect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  delete?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  connect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  update?: Prisma.GameSetToPlayerUpdateWithWhereUniqueWithoutPlayersInput | Prisma.GameSetToPlayerUpdateWithWhereUniqueWithoutPlayersInput[]
  updateMany?: Prisma.GameSetToPlayerUpdateManyWithWhereWithoutPlayersInput | Prisma.GameSetToPlayerUpdateManyWithWhereWithoutPlayersInput[]
  deleteMany?: Prisma.GameSetToPlayerScalarWhereInput | Prisma.GameSetToPlayerScalarWhereInput[]
}

export type GameSetToPlayerUncheckedUpdateManyWithoutPlayersNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutPlayersInput, Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput> | Prisma.GameSetToPlayerCreateWithoutPlayersInput[] | Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput[]
  connectOrCreate?: Prisma.GameSetToPlayerCreateOrConnectWithoutPlayersInput | Prisma.GameSetToPlayerCreateOrConnectWithoutPlayersInput[]
  upsert?: Prisma.GameSetToPlayerUpsertWithWhereUniqueWithoutPlayersInput | Prisma.GameSetToPlayerUpsertWithWhereUniqueWithoutPlayersInput[]
  createMany?: Prisma.GameSetToPlayerCreateManyPlayersInputEnvelope
  set?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  disconnect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  delete?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  connect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  update?: Prisma.GameSetToPlayerUpdateWithWhereUniqueWithoutPlayersInput | Prisma.GameSetToPlayerUpdateWithWhereUniqueWithoutPlayersInput[]
  updateMany?: Prisma.GameSetToPlayerUpdateManyWithWhereWithoutPlayersInput | Prisma.GameSetToPlayerUpdateManyWithWhereWithoutPlayersInput[]
  deleteMany?: Prisma.GameSetToPlayerScalarWhereInput | Prisma.GameSetToPlayerScalarWhereInput[]
}

export type GameSetToPlayerCreateNestedManyWithoutSetsInput = {
  create?: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutSetsInput, Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput> | Prisma.GameSetToPlayerCreateWithoutSetsInput[] | Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput[]
  connectOrCreate?: Prisma.GameSetToPlayerCreateOrConnectWithoutSetsInput | Prisma.GameSetToPlayerCreateOrConnectWithoutSetsInput[]
  createMany?: Prisma.GameSetToPlayerCreateManySetsInputEnvelope
  connect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
}

export type GameSetToPlayerUncheckedCreateNestedManyWithoutSetsInput = {
  create?: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutSetsInput, Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput> | Prisma.GameSetToPlayerCreateWithoutSetsInput[] | Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput[]
  connectOrCreate?: Prisma.GameSetToPlayerCreateOrConnectWithoutSetsInput | Prisma.GameSetToPlayerCreateOrConnectWithoutSetsInput[]
  createMany?: Prisma.GameSetToPlayerCreateManySetsInputEnvelope
  connect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
}

export type GameSetToPlayerUpdateManyWithoutSetsNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutSetsInput, Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput> | Prisma.GameSetToPlayerCreateWithoutSetsInput[] | Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput[]
  connectOrCreate?: Prisma.GameSetToPlayerCreateOrConnectWithoutSetsInput | Prisma.GameSetToPlayerCreateOrConnectWithoutSetsInput[]
  upsert?: Prisma.GameSetToPlayerUpsertWithWhereUniqueWithoutSetsInput | Prisma.GameSetToPlayerUpsertWithWhereUniqueWithoutSetsInput[]
  createMany?: Prisma.GameSetToPlayerCreateManySetsInputEnvelope
  set?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  disconnect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  delete?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  connect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  update?: Prisma.GameSetToPlayerUpdateWithWhereUniqueWithoutSetsInput | Prisma.GameSetToPlayerUpdateWithWhereUniqueWithoutSetsInput[]
  updateMany?: Prisma.GameSetToPlayerUpdateManyWithWhereWithoutSetsInput | Prisma.GameSetToPlayerUpdateManyWithWhereWithoutSetsInput[]
  deleteMany?: Prisma.GameSetToPlayerScalarWhereInput | Prisma.GameSetToPlayerScalarWhereInput[]
}

export type GameSetToPlayerUncheckedUpdateManyWithoutSetsNestedInput = {
  create?: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutSetsInput, Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput> | Prisma.GameSetToPlayerCreateWithoutSetsInput[] | Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput[]
  connectOrCreate?: Prisma.GameSetToPlayerCreateOrConnectWithoutSetsInput | Prisma.GameSetToPlayerCreateOrConnectWithoutSetsInput[]
  upsert?: Prisma.GameSetToPlayerUpsertWithWhereUniqueWithoutSetsInput | Prisma.GameSetToPlayerUpsertWithWhereUniqueWithoutSetsInput[]
  createMany?: Prisma.GameSetToPlayerCreateManySetsInputEnvelope
  set?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  disconnect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  delete?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  connect?: Prisma.GameSetToPlayerWhereUniqueInput | Prisma.GameSetToPlayerWhereUniqueInput[]
  update?: Prisma.GameSetToPlayerUpdateWithWhereUniqueWithoutSetsInput | Prisma.GameSetToPlayerUpdateWithWhereUniqueWithoutSetsInput[]
  updateMany?: Prisma.GameSetToPlayerUpdateManyWithWhereWithoutSetsInput | Prisma.GameSetToPlayerUpdateManyWithWhereWithoutSetsInput[]
  deleteMany?: Prisma.GameSetToPlayerScalarWhereInput | Prisma.GameSetToPlayerScalarWhereInput[]
}

export type GameSetToPlayerCreateWithoutPlayersInput = {
  sets: Prisma.GameSetCreateNestedOneWithoutGameSetToPlayerInput
}

export type GameSetToPlayerUncheckedCreateWithoutPlayersInput = {
  A: number
}

export type GameSetToPlayerCreateOrConnectWithoutPlayersInput = {
  where: Prisma.GameSetToPlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutPlayersInput, Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput>
}

export type GameSetToPlayerCreateManyPlayersInputEnvelope = {
  data: Prisma.GameSetToPlayerCreateManyPlayersInput | Prisma.GameSetToPlayerCreateManyPlayersInput[]
  skipDuplicates?: boolean
}

export type GameSetToPlayerUpsertWithWhereUniqueWithoutPlayersInput = {
  where: Prisma.GameSetToPlayerWhereUniqueInput
  update: Prisma.XOR<Prisma.GameSetToPlayerUpdateWithoutPlayersInput, Prisma.GameSetToPlayerUncheckedUpdateWithoutPlayersInput>
  create: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutPlayersInput, Prisma.GameSetToPlayerUncheckedCreateWithoutPlayersInput>
}

export type GameSetToPlayerUpdateWithWhereUniqueWithoutPlayersInput = {
  where: Prisma.GameSetToPlayerWhereUniqueInput
  data: Prisma.XOR<Prisma.GameSetToPlayerUpdateWithoutPlayersInput, Prisma.GameSetToPlayerUncheckedUpdateWithoutPlayersInput>
}

export type GameSetToPlayerUpdateManyWithWhereWithoutPlayersInput = {
  where: Prisma.GameSetToPlayerScalarWhereInput
  data: Prisma.XOR<Prisma.GameSetToPlayerUpdateManyMutationInput, Prisma.GameSetToPlayerUncheckedUpdateManyWithoutPlayersInput>
}

export type GameSetToPlayerScalarWhereInput = {
  AND?: Prisma.GameSetToPlayerScalarWhereInput | Prisma.GameSetToPlayerScalarWhereInput[]
  OR?: Prisma.GameSetToPlayerScalarWhereInput[]
  NOT?: Prisma.GameSetToPlayerScalarWhereInput | Prisma.GameSetToPlayerScalarWhereInput[]
  A?: Prisma.IntFilter<"GameSetToPlayer"> | number
  B?: Prisma.IntFilter<"GameSetToPlayer"> | number
}

export type GameSetToPlayerCreateWithoutSetsInput = {
  players: Prisma.PlayerCreateNestedOneWithoutGameSetToPlayerInput
}

export type GameSetToPlayerUncheckedCreateWithoutSetsInput = {
  B: number
}

export type GameSetToPlayerCreateOrConnectWithoutSetsInput = {
  where: Prisma.GameSetToPlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutSetsInput, Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput>
}

export type GameSetToPlayerCreateManySetsInputEnvelope = {
  data: Prisma.GameSetToPlayerCreateManySetsInput | Prisma.GameSetToPlayerCreateManySetsInput[]
  skipDuplicates?: boolean
}

export type GameSetToPlayerUpsertWithWhereUniqueWithoutSetsInput = {
  where: Prisma.GameSetToPlayerWhereUniqueInput
  update: Prisma.XOR<Prisma.GameSetToPlayerUpdateWithoutSetsInput, Prisma.GameSetToPlayerUncheckedUpdateWithoutSetsInput>
  create: Prisma.XOR<Prisma.GameSetToPlayerCreateWithoutSetsInput, Prisma.GameSetToPlayerUncheckedCreateWithoutSetsInput>
}

export type GameSetToPlayerUpdateWithWhereUniqueWithoutSetsInput = {
  where: Prisma.GameSetToPlayerWhereUniqueInput
  data: Prisma.XOR<Prisma.GameSetToPlayerUpdateWithoutSetsInput, Prisma.GameSetToPlayerUncheckedUpdateWithoutSetsInput>
}

export type GameSetToPlayerUpdateManyWithWhereWithoutSetsInput = {
  where: Prisma.GameSetToPlayerScalarWhereInput
  data: Prisma.XOR<Prisma.GameSetToPlayerUpdateManyMutationInput, Prisma.GameSetToPlayerUncheckedUpdateManyWithoutSetsInput>
}

export type GameSetToPlayerCreateManyPlayersInput = {
  A: number
}

export type GameSetToPlayerUpdateWithoutPlayersInput = {
  sets?: Prisma.GameSetUpdateOneRequiredWithoutGameSetToPlayerNestedInput
}

export type GameSetToPlayerUncheckedUpdateWithoutPlayersInput = {
  A?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GameSetToPlayerUncheckedUpdateManyWithoutPlayersInput = {
  A?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GameSetToPlayerCreateManySetsInput = {
  B: number
}

export type GameSetToPlayerUpdateWithoutSetsInput = {
  players?: Prisma.PlayerUpdateOneRequiredWithoutGameSetToPlayerNestedInput
}

export type GameSetToPlayerUncheckedUpdateWithoutSetsInput = {
  B?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GameSetToPlayerUncheckedUpdateManyWithoutSetsInput = {
  B?: Prisma.IntFieldUpdateOperationsInput | number
}



export type GameSetToPlayerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  A?: boolean
  B?: boolean
  sets?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
  players?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSetToPlayer"]>

export type GameSetToPlayerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  A?: boolean
  B?: boolean
  sets?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
  players?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSetToPlayer"]>

export type GameSetToPlayerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  A?: boolean
  B?: boolean
  sets?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
  players?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSetToPlayer"]>

export type GameSetToPlayerSelectScalar = {
  A?: boolean
  B?: boolean
}

export type GameSetToPlayerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"A" | "B", ExtArgs["result"]["gameSetToPlayer"]>
export type GameSetToPlayerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
  players?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
}
export type GameSetToPlayerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
  players?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
}
export type GameSetToPlayerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
  players?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
}

export type $GameSetToPlayerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GameSetToPlayer"
  objects: {
    sets: Prisma.$GameSetPayload<ExtArgs>
    players: Prisma.$PlayerPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    A: number
    B: number
  }, ExtArgs["result"]["gameSetToPlayer"]>
  composites: {}
}

export type GameSetToPlayerGetPayload<S extends boolean | null | undefined | GameSetToPlayerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload, S>

export type GameSetToPlayerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameSetToPlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameSetToPlayerCountAggregateInputType | true
  }

export interface GameSetToPlayerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSetToPlayer'], meta: { name: 'GameSetToPlayer' } }
  /**
   * Find zero or one GameSetToPlayer that matches the filter.
   * @param {GameSetToPlayerFindUniqueArgs} args - Arguments to find a GameSetToPlayer
   * @example
   * // Get one GameSetToPlayer
   * const gameSetToPlayer = await prisma.gameSetToPlayer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameSetToPlayerFindUniqueArgs>(args: Prisma.SelectSubset<T, GameSetToPlayerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameSetToPlayerClient<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GameSetToPlayer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameSetToPlayerFindUniqueOrThrowArgs} args - Arguments to find a GameSetToPlayer
   * @example
   * // Get one GameSetToPlayer
   * const gameSetToPlayer = await prisma.gameSetToPlayer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameSetToPlayerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameSetToPlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameSetToPlayerClient<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameSetToPlayer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetToPlayerFindFirstArgs} args - Arguments to find a GameSetToPlayer
   * @example
   * // Get one GameSetToPlayer
   * const gameSetToPlayer = await prisma.gameSetToPlayer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameSetToPlayerFindFirstArgs>(args?: Prisma.SelectSubset<T, GameSetToPlayerFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameSetToPlayerClient<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameSetToPlayer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetToPlayerFindFirstOrThrowArgs} args - Arguments to find a GameSetToPlayer
   * @example
   * // Get one GameSetToPlayer
   * const gameSetToPlayer = await prisma.gameSetToPlayer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameSetToPlayerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameSetToPlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameSetToPlayerClient<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GameSetToPlayers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetToPlayerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GameSetToPlayers
   * const gameSetToPlayers = await prisma.gameSetToPlayer.findMany()
   * 
   * // Get first 10 GameSetToPlayers
   * const gameSetToPlayers = await prisma.gameSetToPlayer.findMany({ take: 10 })
   * 
   * // Only select the `A`
   * const gameSetToPlayerWithAOnly = await prisma.gameSetToPlayer.findMany({ select: { A: true } })
   * 
   */
  findMany<T extends GameSetToPlayerFindManyArgs>(args?: Prisma.SelectSubset<T, GameSetToPlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GameSetToPlayer.
   * @param {GameSetToPlayerCreateArgs} args - Arguments to create a GameSetToPlayer.
   * @example
   * // Create one GameSetToPlayer
   * const GameSetToPlayer = await prisma.gameSetToPlayer.create({
   *   data: {
   *     // ... data to create a GameSetToPlayer
   *   }
   * })
   * 
   */
  create<T extends GameSetToPlayerCreateArgs>(args: Prisma.SelectSubset<T, GameSetToPlayerCreateArgs<ExtArgs>>): Prisma.Prisma__GameSetToPlayerClient<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GameSetToPlayers.
   * @param {GameSetToPlayerCreateManyArgs} args - Arguments to create many GameSetToPlayers.
   * @example
   * // Create many GameSetToPlayers
   * const gameSetToPlayer = await prisma.gameSetToPlayer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameSetToPlayerCreateManyArgs>(args?: Prisma.SelectSubset<T, GameSetToPlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GameSetToPlayers and returns the data saved in the database.
   * @param {GameSetToPlayerCreateManyAndReturnArgs} args - Arguments to create many GameSetToPlayers.
   * @example
   * // Create many GameSetToPlayers
   * const gameSetToPlayer = await prisma.gameSetToPlayer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GameSetToPlayers and only return the `A`
   * const gameSetToPlayerWithAOnly = await prisma.gameSetToPlayer.createManyAndReturn({
   *   select: { A: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameSetToPlayerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameSetToPlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GameSetToPlayer.
   * @param {GameSetToPlayerDeleteArgs} args - Arguments to delete one GameSetToPlayer.
   * @example
   * // Delete one GameSetToPlayer
   * const GameSetToPlayer = await prisma.gameSetToPlayer.delete({
   *   where: {
   *     // ... filter to delete one GameSetToPlayer
   *   }
   * })
   * 
   */
  delete<T extends GameSetToPlayerDeleteArgs>(args: Prisma.SelectSubset<T, GameSetToPlayerDeleteArgs<ExtArgs>>): Prisma.Prisma__GameSetToPlayerClient<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GameSetToPlayer.
   * @param {GameSetToPlayerUpdateArgs} args - Arguments to update one GameSetToPlayer.
   * @example
   * // Update one GameSetToPlayer
   * const gameSetToPlayer = await prisma.gameSetToPlayer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameSetToPlayerUpdateArgs>(args: Prisma.SelectSubset<T, GameSetToPlayerUpdateArgs<ExtArgs>>): Prisma.Prisma__GameSetToPlayerClient<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GameSetToPlayers.
   * @param {GameSetToPlayerDeleteManyArgs} args - Arguments to filter GameSetToPlayers to delete.
   * @example
   * // Delete a few GameSetToPlayers
   * const { count } = await prisma.gameSetToPlayer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameSetToPlayerDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameSetToPlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameSetToPlayers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetToPlayerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GameSetToPlayers
   * const gameSetToPlayer = await prisma.gameSetToPlayer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameSetToPlayerUpdateManyArgs>(args: Prisma.SelectSubset<T, GameSetToPlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameSetToPlayers and returns the data updated in the database.
   * @param {GameSetToPlayerUpdateManyAndReturnArgs} args - Arguments to update many GameSetToPlayers.
   * @example
   * // Update many GameSetToPlayers
   * const gameSetToPlayer = await prisma.gameSetToPlayer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GameSetToPlayers and only return the `A`
   * const gameSetToPlayerWithAOnly = await prisma.gameSetToPlayer.updateManyAndReturn({
   *   select: { A: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameSetToPlayerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameSetToPlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GameSetToPlayer.
   * @param {GameSetToPlayerUpsertArgs} args - Arguments to update or create a GameSetToPlayer.
   * @example
   * // Update or create a GameSetToPlayer
   * const gameSetToPlayer = await prisma.gameSetToPlayer.upsert({
   *   create: {
   *     // ... data to create a GameSetToPlayer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GameSetToPlayer we want to update
   *   }
   * })
   */
  upsert<T extends GameSetToPlayerUpsertArgs>(args: Prisma.SelectSubset<T, GameSetToPlayerUpsertArgs<ExtArgs>>): Prisma.Prisma__GameSetToPlayerClient<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GameSetToPlayers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetToPlayerCountArgs} args - Arguments to filter GameSetToPlayers to count.
   * @example
   * // Count the number of GameSetToPlayers
   * const count = await prisma.gameSetToPlayer.count({
   *   where: {
   *     // ... the filter for the GameSetToPlayers we want to count
   *   }
   * })
  **/
  count<T extends GameSetToPlayerCountArgs>(
    args?: Prisma.Subset<T, GameSetToPlayerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameSetToPlayerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GameSetToPlayer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetToPlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameSetToPlayerAggregateArgs>(args: Prisma.Subset<T, GameSetToPlayerAggregateArgs>): Prisma.PrismaPromise<GetGameSetToPlayerAggregateType<T>>

  /**
   * Group by GameSetToPlayer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSetToPlayerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameSetToPlayerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameSetToPlayerGroupByArgs['orderBy'] }
      : { orderBy?: GameSetToPlayerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameSetToPlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSetToPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GameSetToPlayer model
 */
readonly fields: GameSetToPlayerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GameSetToPlayer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameSetToPlayerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sets<T extends Prisma.GameSetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSetDefaultArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  players<T extends Prisma.PlayerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlayerDefaultArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GameSetToPlayer model
 */
export interface GameSetToPlayerFieldRefs {
  readonly A: Prisma.FieldRef<"GameSetToPlayer", 'Int'>
  readonly B: Prisma.FieldRef<"GameSetToPlayer", 'Int'>
}
    

// Custom InputTypes
/**
 * GameSetToPlayer findUnique
 */
export type GameSetToPlayerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * Filter, which GameSetToPlayer to fetch.
   */
  where: Prisma.GameSetToPlayerWhereUniqueInput
}

/**
 * GameSetToPlayer findUniqueOrThrow
 */
export type GameSetToPlayerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * Filter, which GameSetToPlayer to fetch.
   */
  where: Prisma.GameSetToPlayerWhereUniqueInput
}

/**
 * GameSetToPlayer findFirst
 */
export type GameSetToPlayerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * Filter, which GameSetToPlayer to fetch.
   */
  where?: Prisma.GameSetToPlayerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSetToPlayers to fetch.
   */
  orderBy?: Prisma.GameSetToPlayerOrderByWithRelationInput | Prisma.GameSetToPlayerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameSetToPlayers.
   */
  cursor?: Prisma.GameSetToPlayerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSetToPlayers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSetToPlayers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameSetToPlayers.
   */
  distinct?: Prisma.GameSetToPlayerScalarFieldEnum | Prisma.GameSetToPlayerScalarFieldEnum[]
}

/**
 * GameSetToPlayer findFirstOrThrow
 */
export type GameSetToPlayerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * Filter, which GameSetToPlayer to fetch.
   */
  where?: Prisma.GameSetToPlayerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSetToPlayers to fetch.
   */
  orderBy?: Prisma.GameSetToPlayerOrderByWithRelationInput | Prisma.GameSetToPlayerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameSetToPlayers.
   */
  cursor?: Prisma.GameSetToPlayerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSetToPlayers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSetToPlayers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameSetToPlayers.
   */
  distinct?: Prisma.GameSetToPlayerScalarFieldEnum | Prisma.GameSetToPlayerScalarFieldEnum[]
}

/**
 * GameSetToPlayer findMany
 */
export type GameSetToPlayerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * Filter, which GameSetToPlayers to fetch.
   */
  where?: Prisma.GameSetToPlayerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSetToPlayers to fetch.
   */
  orderBy?: Prisma.GameSetToPlayerOrderByWithRelationInput | Prisma.GameSetToPlayerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GameSetToPlayers.
   */
  cursor?: Prisma.GameSetToPlayerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSetToPlayers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSetToPlayers.
   */
  skip?: number
  distinct?: Prisma.GameSetToPlayerScalarFieldEnum | Prisma.GameSetToPlayerScalarFieldEnum[]
}

/**
 * GameSetToPlayer create
 */
export type GameSetToPlayerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * The data needed to create a GameSetToPlayer.
   */
  data: Prisma.XOR<Prisma.GameSetToPlayerCreateInput, Prisma.GameSetToPlayerUncheckedCreateInput>
}

/**
 * GameSetToPlayer createMany
 */
export type GameSetToPlayerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GameSetToPlayers.
   */
  data: Prisma.GameSetToPlayerCreateManyInput | Prisma.GameSetToPlayerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameSetToPlayer createManyAndReturn
 */
export type GameSetToPlayerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * The data used to create many GameSetToPlayers.
   */
  data: Prisma.GameSetToPlayerCreateManyInput | Prisma.GameSetToPlayerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GameSetToPlayer update
 */
export type GameSetToPlayerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * The data needed to update a GameSetToPlayer.
   */
  data: Prisma.XOR<Prisma.GameSetToPlayerUpdateInput, Prisma.GameSetToPlayerUncheckedUpdateInput>
  /**
   * Choose, which GameSetToPlayer to update.
   */
  where: Prisma.GameSetToPlayerWhereUniqueInput
}

/**
 * GameSetToPlayer updateMany
 */
export type GameSetToPlayerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GameSetToPlayers.
   */
  data: Prisma.XOR<Prisma.GameSetToPlayerUpdateManyMutationInput, Prisma.GameSetToPlayerUncheckedUpdateManyInput>
  /**
   * Filter which GameSetToPlayers to update
   */
  where?: Prisma.GameSetToPlayerWhereInput
  /**
   * Limit how many GameSetToPlayers to update.
   */
  limit?: number
}

/**
 * GameSetToPlayer updateManyAndReturn
 */
export type GameSetToPlayerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * The data used to update GameSetToPlayers.
   */
  data: Prisma.XOR<Prisma.GameSetToPlayerUpdateManyMutationInput, Prisma.GameSetToPlayerUncheckedUpdateManyInput>
  /**
   * Filter which GameSetToPlayers to update
   */
  where?: Prisma.GameSetToPlayerWhereInput
  /**
   * Limit how many GameSetToPlayers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GameSetToPlayer upsert
 */
export type GameSetToPlayerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * The filter to search for the GameSetToPlayer to update in case it exists.
   */
  where: Prisma.GameSetToPlayerWhereUniqueInput
  /**
   * In case the GameSetToPlayer found by the `where` argument doesn't exist, create a new GameSetToPlayer with this data.
   */
  create: Prisma.XOR<Prisma.GameSetToPlayerCreateInput, Prisma.GameSetToPlayerUncheckedCreateInput>
  /**
   * In case the GameSetToPlayer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameSetToPlayerUpdateInput, Prisma.GameSetToPlayerUncheckedUpdateInput>
}

/**
 * GameSetToPlayer delete
 */
export type GameSetToPlayerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  /**
   * Filter which GameSetToPlayer to delete.
   */
  where: Prisma.GameSetToPlayerWhereUniqueInput
}

/**
 * GameSetToPlayer deleteMany
 */
export type GameSetToPlayerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameSetToPlayers to delete
   */
  where?: Prisma.GameSetToPlayerWhereInput
  /**
   * Limit how many GameSetToPlayers to delete.
   */
  limit?: number
}

/**
 * GameSetToPlayer without action
 */
export type GameSetToPlayerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
}
