
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SessionRevision` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SessionRevision
 * 
 */
export type SessionRevisionModel = runtime.Types.Result.DefaultSelection<Prisma.$SessionRevisionPayload>

export type AggregateSessionRevision = {
  _count: SessionRevisionCountAggregateOutputType | null
  _avg: SessionRevisionAvgAggregateOutputType | null
  _sum: SessionRevisionSumAggregateOutputType | null
  _min: SessionRevisionMinAggregateOutputType | null
  _max: SessionRevisionMaxAggregateOutputType | null
}

export type SessionRevisionAvgAggregateOutputType = {
  id: number | null
  sessionId: number | null
}

export type SessionRevisionSumAggregateOutputType = {
  id: number | null
  sessionId: number | null
}

export type SessionRevisionMinAggregateOutputType = {
  id: number | null
  sessionId: number | null
  createdBy: string | null
  createdAt: Date | null
}

export type SessionRevisionMaxAggregateOutputType = {
  id: number | null
  sessionId: number | null
  createdBy: string | null
  createdAt: Date | null
}

export type SessionRevisionCountAggregateOutputType = {
  id: number
  sessionId: number
  snapshot: number
  createdBy: number
  createdAt: number
  _all: number
}


export type SessionRevisionAvgAggregateInputType = {
  id?: true
  sessionId?: true
}

export type SessionRevisionSumAggregateInputType = {
  id?: true
  sessionId?: true
}

export type SessionRevisionMinAggregateInputType = {
  id?: true
  sessionId?: true
  createdBy?: true
  createdAt?: true
}

export type SessionRevisionMaxAggregateInputType = {
  id?: true
  sessionId?: true
  createdBy?: true
  createdAt?: true
}

export type SessionRevisionCountAggregateInputType = {
  id?: true
  sessionId?: true
  snapshot?: true
  createdBy?: true
  createdAt?: true
  _all?: true
}

export type SessionRevisionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SessionRevision to aggregate.
   */
  where?: Prisma.SessionRevisionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SessionRevisions to fetch.
   */
  orderBy?: Prisma.SessionRevisionOrderByWithRelationInput | Prisma.SessionRevisionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SessionRevisionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SessionRevisions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SessionRevisions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SessionRevisions
  **/
  _count?: true | SessionRevisionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SessionRevisionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SessionRevisionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SessionRevisionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SessionRevisionMaxAggregateInputType
}

export type GetSessionRevisionAggregateType<T extends SessionRevisionAggregateArgs> = {
      [P in keyof T & keyof AggregateSessionRevision]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSessionRevision[P]>
    : Prisma.GetScalarType<T[P], AggregateSessionRevision[P]>
}




export type SessionRevisionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SessionRevisionWhereInput
  orderBy?: Prisma.SessionRevisionOrderByWithAggregationInput | Prisma.SessionRevisionOrderByWithAggregationInput[]
  by: Prisma.SessionRevisionScalarFieldEnum[] | Prisma.SessionRevisionScalarFieldEnum
  having?: Prisma.SessionRevisionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SessionRevisionCountAggregateInputType | true
  _avg?: SessionRevisionAvgAggregateInputType
  _sum?: SessionRevisionSumAggregateInputType
  _min?: SessionRevisionMinAggregateInputType
  _max?: SessionRevisionMaxAggregateInputType
}

export type SessionRevisionGroupByOutputType = {
  id: number
  sessionId: number
  snapshot: unknown
  createdBy: string | null
  createdAt: Date
  _count: SessionRevisionCountAggregateOutputType | null
  _avg: SessionRevisionAvgAggregateOutputType | null
  _sum: SessionRevisionSumAggregateOutputType | null
  _min: SessionRevisionMinAggregateOutputType | null
  _max: SessionRevisionMaxAggregateOutputType | null
}

type GetSessionRevisionGroupByPayload<T extends SessionRevisionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SessionRevisionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SessionRevisionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SessionRevisionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SessionRevisionGroupByOutputType[P]>
      }
    >
  >



export type SessionRevisionWhereInput = {
  AND?: Prisma.SessionRevisionWhereInput | Prisma.SessionRevisionWhereInput[]
  OR?: Prisma.SessionRevisionWhereInput[]
  NOT?: Prisma.SessionRevisionWhereInput | Prisma.SessionRevisionWhereInput[]
  id?: Prisma.IntFilter<"SessionRevision"> | number
  sessionId?: Prisma.IntFilter<"SessionRevision"> | number
  snapshot?: Prisma.JsonFilter<"SessionRevision">
  createdBy?: Prisma.StringNullableFilter<"SessionRevision"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SessionRevision"> | Date | string
  session?: Prisma.XOR<Prisma.SessionScalarRelationFilter, Prisma.SessionWhereInput>
}

export type SessionRevisionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  snapshot?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  session?: Prisma.SessionOrderByWithRelationInput
}

export type SessionRevisionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.SessionRevisionWhereInput | Prisma.SessionRevisionWhereInput[]
  OR?: Prisma.SessionRevisionWhereInput[]
  NOT?: Prisma.SessionRevisionWhereInput | Prisma.SessionRevisionWhereInput[]
  sessionId?: Prisma.IntFilter<"SessionRevision"> | number
  snapshot?: Prisma.JsonFilter<"SessionRevision">
  createdBy?: Prisma.StringNullableFilter<"SessionRevision"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SessionRevision"> | Date | string
  session?: Prisma.XOR<Prisma.SessionScalarRelationFilter, Prisma.SessionWhereInput>
}, "id">

export type SessionRevisionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  snapshot?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.SessionRevisionCountOrderByAggregateInput
  _avg?: Prisma.SessionRevisionAvgOrderByAggregateInput
  _max?: Prisma.SessionRevisionMaxOrderByAggregateInput
  _min?: Prisma.SessionRevisionMinOrderByAggregateInput
  _sum?: Prisma.SessionRevisionSumOrderByAggregateInput
}

export type SessionRevisionScalarWhereWithAggregatesInput = {
  AND?: Prisma.SessionRevisionScalarWhereWithAggregatesInput | Prisma.SessionRevisionScalarWhereWithAggregatesInput[]
  OR?: Prisma.SessionRevisionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SessionRevisionScalarWhereWithAggregatesInput | Prisma.SessionRevisionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"SessionRevision"> | number
  sessionId?: Prisma.IntWithAggregatesFilter<"SessionRevision"> | number
  snapshot?: Prisma.JsonWithAggregatesFilter<"SessionRevision">
  createdBy?: Prisma.StringNullableWithAggregatesFilter<"SessionRevision"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SessionRevision"> | Date | string
}

export type SessionRevisionCreateInput = {
  snapshot: unknown
  createdBy?: string | null
  createdAt?: Date | string
  session: Prisma.SessionCreateNestedOneWithoutSessionRevisionsInput
}

export type SessionRevisionUncheckedCreateInput = {
  id?: number
  sessionId: number
  snapshot: unknown
  createdBy?: string | null
  createdAt?: Date | string
}

export type SessionRevisionUpdateInput = {
  snapshot?: unknown
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  session?: Prisma.SessionUpdateOneRequiredWithoutSessionRevisionsNestedInput
}

export type SessionRevisionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  snapshot?: unknown
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SessionRevisionCreateManyInput = {
  id?: number
  sessionId: number
  snapshot: unknown
  createdBy?: string | null
  createdAt?: Date | string
}

export type SessionRevisionUpdateManyMutationInput = {
  snapshot?: unknown
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SessionRevisionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  snapshot?: unknown
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SessionRevisionListRelationFilter = {
  every?: Prisma.SessionRevisionWhereInput
  some?: Prisma.SessionRevisionWhereInput
  none?: Prisma.SessionRevisionWhereInput
}

export type SessionRevisionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SessionRevisionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  snapshot?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SessionRevisionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
}

export type SessionRevisionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SessionRevisionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SessionRevisionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
}

export type SessionRevisionCreateNestedManyWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.SessionRevisionCreateWithoutSessionInput, Prisma.SessionRevisionUncheckedCreateWithoutSessionInput> | Prisma.SessionRevisionCreateWithoutSessionInput[] | Prisma.SessionRevisionUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.SessionRevisionCreateOrConnectWithoutSessionInput | Prisma.SessionRevisionCreateOrConnectWithoutSessionInput[]
  createMany?: Prisma.SessionRevisionCreateManySessionInputEnvelope
  connect?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
}

export type SessionRevisionUncheckedCreateNestedManyWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.SessionRevisionCreateWithoutSessionInput, Prisma.SessionRevisionUncheckedCreateWithoutSessionInput> | Prisma.SessionRevisionCreateWithoutSessionInput[] | Prisma.SessionRevisionUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.SessionRevisionCreateOrConnectWithoutSessionInput | Prisma.SessionRevisionCreateOrConnectWithoutSessionInput[]
  createMany?: Prisma.SessionRevisionCreateManySessionInputEnvelope
  connect?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
}

export type SessionRevisionUpdateManyWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.SessionRevisionCreateWithoutSessionInput, Prisma.SessionRevisionUncheckedCreateWithoutSessionInput> | Prisma.SessionRevisionCreateWithoutSessionInput[] | Prisma.SessionRevisionUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.SessionRevisionCreateOrConnectWithoutSessionInput | Prisma.SessionRevisionCreateOrConnectWithoutSessionInput[]
  upsert?: Prisma.SessionRevisionUpsertWithWhereUniqueWithoutSessionInput | Prisma.SessionRevisionUpsertWithWhereUniqueWithoutSessionInput[]
  createMany?: Prisma.SessionRevisionCreateManySessionInputEnvelope
  set?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
  disconnect?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
  delete?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
  connect?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
  update?: Prisma.SessionRevisionUpdateWithWhereUniqueWithoutSessionInput | Prisma.SessionRevisionUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.SessionRevisionUpdateManyWithWhereWithoutSessionInput | Prisma.SessionRevisionUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.SessionRevisionScalarWhereInput | Prisma.SessionRevisionScalarWhereInput[]
}

export type SessionRevisionUncheckedUpdateManyWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.SessionRevisionCreateWithoutSessionInput, Prisma.SessionRevisionUncheckedCreateWithoutSessionInput> | Prisma.SessionRevisionCreateWithoutSessionInput[] | Prisma.SessionRevisionUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.SessionRevisionCreateOrConnectWithoutSessionInput | Prisma.SessionRevisionCreateOrConnectWithoutSessionInput[]
  upsert?: Prisma.SessionRevisionUpsertWithWhereUniqueWithoutSessionInput | Prisma.SessionRevisionUpsertWithWhereUniqueWithoutSessionInput[]
  createMany?: Prisma.SessionRevisionCreateManySessionInputEnvelope
  set?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
  disconnect?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
  delete?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
  connect?: Prisma.SessionRevisionWhereUniqueInput | Prisma.SessionRevisionWhereUniqueInput[]
  update?: Prisma.SessionRevisionUpdateWithWhereUniqueWithoutSessionInput | Prisma.SessionRevisionUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.SessionRevisionUpdateManyWithWhereWithoutSessionInput | Prisma.SessionRevisionUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.SessionRevisionScalarWhereInput | Prisma.SessionRevisionScalarWhereInput[]
}

export type SessionRevisionCreateWithoutSessionInput = {
  snapshot: unknown
  createdBy?: string | null
  createdAt?: Date | string
}

export type SessionRevisionUncheckedCreateWithoutSessionInput = {
  id?: number
  snapshot: unknown
  createdBy?: string | null
  createdAt?: Date | string
}

export type SessionRevisionCreateOrConnectWithoutSessionInput = {
  where: Prisma.SessionRevisionWhereUniqueInput
  create: Prisma.XOR<Prisma.SessionRevisionCreateWithoutSessionInput, Prisma.SessionRevisionUncheckedCreateWithoutSessionInput>
}

export type SessionRevisionCreateManySessionInputEnvelope = {
  data: Prisma.SessionRevisionCreateManySessionInput | Prisma.SessionRevisionCreateManySessionInput[]
  skipDuplicates?: boolean
}

export type SessionRevisionUpsertWithWhereUniqueWithoutSessionInput = {
  where: Prisma.SessionRevisionWhereUniqueInput
  update: Prisma.XOR<Prisma.SessionRevisionUpdateWithoutSessionInput, Prisma.SessionRevisionUncheckedUpdateWithoutSessionInput>
  create: Prisma.XOR<Prisma.SessionRevisionCreateWithoutSessionInput, Prisma.SessionRevisionUncheckedCreateWithoutSessionInput>
}

export type SessionRevisionUpdateWithWhereUniqueWithoutSessionInput = {
  where: Prisma.SessionRevisionWhereUniqueInput
  data: Prisma.XOR<Prisma.SessionRevisionUpdateWithoutSessionInput, Prisma.SessionRevisionUncheckedUpdateWithoutSessionInput>
}

export type SessionRevisionUpdateManyWithWhereWithoutSessionInput = {
  where: Prisma.SessionRevisionScalarWhereInput
  data: Prisma.XOR<Prisma.SessionRevisionUpdateManyMutationInput, Prisma.SessionRevisionUncheckedUpdateManyWithoutSessionInput>
}

export type SessionRevisionScalarWhereInput = {
  AND?: Prisma.SessionRevisionScalarWhereInput | Prisma.SessionRevisionScalarWhereInput[]
  OR?: Prisma.SessionRevisionScalarWhereInput[]
  NOT?: Prisma.SessionRevisionScalarWhereInput | Prisma.SessionRevisionScalarWhereInput[]
  id?: Prisma.IntFilter<"SessionRevision"> | number
  sessionId?: Prisma.IntFilter<"SessionRevision"> | number
  snapshot?: Prisma.JsonFilter<"SessionRevision">
  createdBy?: Prisma.StringNullableFilter<"SessionRevision"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SessionRevision"> | Date | string
}

export type SessionRevisionCreateManySessionInput = {
  id?: number
  snapshot: unknown
  createdBy?: string | null
  createdAt?: Date | string
}

export type SessionRevisionUpdateWithoutSessionInput = {
  snapshot?: unknown
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SessionRevisionUncheckedUpdateWithoutSessionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  snapshot?: unknown
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SessionRevisionUncheckedUpdateManyWithoutSessionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  snapshot?: unknown
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type SessionRevisionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  snapshot?: boolean
  createdBy?: boolean
  createdAt?: boolean
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sessionRevision"]>

export type SessionRevisionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  snapshot?: boolean
  createdBy?: boolean
  createdAt?: boolean
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sessionRevision"]>

export type SessionRevisionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  snapshot?: boolean
  createdBy?: boolean
  createdAt?: boolean
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sessionRevision"]>

export type SessionRevisionSelectScalar = {
  id?: boolean
  sessionId?: boolean
  snapshot?: boolean
  createdBy?: boolean
  createdAt?: boolean
}

export type SessionRevisionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sessionId" | "snapshot" | "createdBy" | "createdAt", ExtArgs["result"]["sessionRevision"]>
export type SessionRevisionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}
export type SessionRevisionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}
export type SessionRevisionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  session?: boolean | Prisma.SessionDefaultArgs<ExtArgs>
}

export type $SessionRevisionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SessionRevision"
  objects: {
    session: Prisma.$SessionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    sessionId: number
    snapshot: unknown
    createdBy: string | null
    createdAt: Date
  }, ExtArgs["result"]["sessionRevision"]>
  composites: {}
}

export type SessionRevisionGetPayload<S extends boolean | null | undefined | SessionRevisionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload, S>

export type SessionRevisionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SessionRevisionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SessionRevisionCountAggregateInputType | true
  }

export interface SessionRevisionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionRevision'], meta: { name: 'SessionRevision' } }
  /**
   * Find zero or one SessionRevision that matches the filter.
   * @param {SessionRevisionFindUniqueArgs} args - Arguments to find a SessionRevision
   * @example
   * // Get one SessionRevision
   * const sessionRevision = await prisma.sessionRevision.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SessionRevisionFindUniqueArgs>(args: Prisma.SelectSubset<T, SessionRevisionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SessionRevisionClient<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SessionRevision that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SessionRevisionFindUniqueOrThrowArgs} args - Arguments to find a SessionRevision
   * @example
   * // Get one SessionRevision
   * const sessionRevision = await prisma.sessionRevision.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SessionRevisionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SessionRevisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SessionRevisionClient<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SessionRevision that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionRevisionFindFirstArgs} args - Arguments to find a SessionRevision
   * @example
   * // Get one SessionRevision
   * const sessionRevision = await prisma.sessionRevision.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SessionRevisionFindFirstArgs>(args?: Prisma.SelectSubset<T, SessionRevisionFindFirstArgs<ExtArgs>>): Prisma.Prisma__SessionRevisionClient<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SessionRevision that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionRevisionFindFirstOrThrowArgs} args - Arguments to find a SessionRevision
   * @example
   * // Get one SessionRevision
   * const sessionRevision = await prisma.sessionRevision.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SessionRevisionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SessionRevisionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SessionRevisionClient<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SessionRevisions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionRevisionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SessionRevisions
   * const sessionRevisions = await prisma.sessionRevision.findMany()
   * 
   * // Get first 10 SessionRevisions
   * const sessionRevisions = await prisma.sessionRevision.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const sessionRevisionWithIdOnly = await prisma.sessionRevision.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SessionRevisionFindManyArgs>(args?: Prisma.SelectSubset<T, SessionRevisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SessionRevision.
   * @param {SessionRevisionCreateArgs} args - Arguments to create a SessionRevision.
   * @example
   * // Create one SessionRevision
   * const SessionRevision = await prisma.sessionRevision.create({
   *   data: {
   *     // ... data to create a SessionRevision
   *   }
   * })
   * 
   */
  create<T extends SessionRevisionCreateArgs>(args: Prisma.SelectSubset<T, SessionRevisionCreateArgs<ExtArgs>>): Prisma.Prisma__SessionRevisionClient<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SessionRevisions.
   * @param {SessionRevisionCreateManyArgs} args - Arguments to create many SessionRevisions.
   * @example
   * // Create many SessionRevisions
   * const sessionRevision = await prisma.sessionRevision.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SessionRevisionCreateManyArgs>(args?: Prisma.SelectSubset<T, SessionRevisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SessionRevisions and returns the data saved in the database.
   * @param {SessionRevisionCreateManyAndReturnArgs} args - Arguments to create many SessionRevisions.
   * @example
   * // Create many SessionRevisions
   * const sessionRevision = await prisma.sessionRevision.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SessionRevisions and only return the `id`
   * const sessionRevisionWithIdOnly = await prisma.sessionRevision.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SessionRevisionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SessionRevisionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SessionRevision.
   * @param {SessionRevisionDeleteArgs} args - Arguments to delete one SessionRevision.
   * @example
   * // Delete one SessionRevision
   * const SessionRevision = await prisma.sessionRevision.delete({
   *   where: {
   *     // ... filter to delete one SessionRevision
   *   }
   * })
   * 
   */
  delete<T extends SessionRevisionDeleteArgs>(args: Prisma.SelectSubset<T, SessionRevisionDeleteArgs<ExtArgs>>): Prisma.Prisma__SessionRevisionClient<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SessionRevision.
   * @param {SessionRevisionUpdateArgs} args - Arguments to update one SessionRevision.
   * @example
   * // Update one SessionRevision
   * const sessionRevision = await prisma.sessionRevision.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SessionRevisionUpdateArgs>(args: Prisma.SelectSubset<T, SessionRevisionUpdateArgs<ExtArgs>>): Prisma.Prisma__SessionRevisionClient<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SessionRevisions.
   * @param {SessionRevisionDeleteManyArgs} args - Arguments to filter SessionRevisions to delete.
   * @example
   * // Delete a few SessionRevisions
   * const { count } = await prisma.sessionRevision.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SessionRevisionDeleteManyArgs>(args?: Prisma.SelectSubset<T, SessionRevisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SessionRevisions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionRevisionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SessionRevisions
   * const sessionRevision = await prisma.sessionRevision.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SessionRevisionUpdateManyArgs>(args: Prisma.SelectSubset<T, SessionRevisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SessionRevisions and returns the data updated in the database.
   * @param {SessionRevisionUpdateManyAndReturnArgs} args - Arguments to update many SessionRevisions.
   * @example
   * // Update many SessionRevisions
   * const sessionRevision = await prisma.sessionRevision.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SessionRevisions and only return the `id`
   * const sessionRevisionWithIdOnly = await prisma.sessionRevision.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SessionRevisionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SessionRevisionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SessionRevision.
   * @param {SessionRevisionUpsertArgs} args - Arguments to update or create a SessionRevision.
   * @example
   * // Update or create a SessionRevision
   * const sessionRevision = await prisma.sessionRevision.upsert({
   *   create: {
   *     // ... data to create a SessionRevision
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SessionRevision we want to update
   *   }
   * })
   */
  upsert<T extends SessionRevisionUpsertArgs>(args: Prisma.SelectSubset<T, SessionRevisionUpsertArgs<ExtArgs>>): Prisma.Prisma__SessionRevisionClient<runtime.Types.Result.GetResult<Prisma.$SessionRevisionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SessionRevisions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionRevisionCountArgs} args - Arguments to filter SessionRevisions to count.
   * @example
   * // Count the number of SessionRevisions
   * const count = await prisma.sessionRevision.count({
   *   where: {
   *     // ... the filter for the SessionRevisions we want to count
   *   }
   * })
  **/
  count<T extends SessionRevisionCountArgs>(
    args?: Prisma.Subset<T, SessionRevisionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SessionRevisionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SessionRevision.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionRevisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SessionRevisionAggregateArgs>(args: Prisma.Subset<T, SessionRevisionAggregateArgs>): Prisma.PrismaPromise<GetSessionRevisionAggregateType<T>>

  /**
   * Group by SessionRevision.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SessionRevisionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SessionRevisionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SessionRevisionGroupByArgs['orderBy'] }
      : { orderBy?: SessionRevisionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SessionRevisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionRevisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SessionRevision model
 */
readonly fields: SessionRevisionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SessionRevision.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SessionRevisionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  session<T extends Prisma.SessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SessionDefaultArgs<ExtArgs>>): Prisma.Prisma__SessionClient<runtime.Types.Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SessionRevision model
 */
export interface SessionRevisionFieldRefs {
  readonly id: Prisma.FieldRef<"SessionRevision", 'Int'>
  readonly sessionId: Prisma.FieldRef<"SessionRevision", 'Int'>
  readonly snapshot: Prisma.FieldRef<"SessionRevision", 'Json'>
  readonly createdBy: Prisma.FieldRef<"SessionRevision", 'String'>
  readonly createdAt: Prisma.FieldRef<"SessionRevision", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SessionRevision findUnique
 */
export type SessionRevisionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * Filter, which SessionRevision to fetch.
   */
  where: Prisma.SessionRevisionWhereUniqueInput
}

/**
 * SessionRevision findUniqueOrThrow
 */
export type SessionRevisionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * Filter, which SessionRevision to fetch.
   */
  where: Prisma.SessionRevisionWhereUniqueInput
}

/**
 * SessionRevision findFirst
 */
export type SessionRevisionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * Filter, which SessionRevision to fetch.
   */
  where?: Prisma.SessionRevisionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SessionRevisions to fetch.
   */
  orderBy?: Prisma.SessionRevisionOrderByWithRelationInput | Prisma.SessionRevisionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SessionRevisions.
   */
  cursor?: Prisma.SessionRevisionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SessionRevisions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SessionRevisions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SessionRevisions.
   */
  distinct?: Prisma.SessionRevisionScalarFieldEnum | Prisma.SessionRevisionScalarFieldEnum[]
}

/**
 * SessionRevision findFirstOrThrow
 */
export type SessionRevisionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * Filter, which SessionRevision to fetch.
   */
  where?: Prisma.SessionRevisionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SessionRevisions to fetch.
   */
  orderBy?: Prisma.SessionRevisionOrderByWithRelationInput | Prisma.SessionRevisionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SessionRevisions.
   */
  cursor?: Prisma.SessionRevisionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SessionRevisions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SessionRevisions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SessionRevisions.
   */
  distinct?: Prisma.SessionRevisionScalarFieldEnum | Prisma.SessionRevisionScalarFieldEnum[]
}

/**
 * SessionRevision findMany
 */
export type SessionRevisionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * Filter, which SessionRevisions to fetch.
   */
  where?: Prisma.SessionRevisionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SessionRevisions to fetch.
   */
  orderBy?: Prisma.SessionRevisionOrderByWithRelationInput | Prisma.SessionRevisionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SessionRevisions.
   */
  cursor?: Prisma.SessionRevisionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SessionRevisions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SessionRevisions.
   */
  skip?: number
  distinct?: Prisma.SessionRevisionScalarFieldEnum | Prisma.SessionRevisionScalarFieldEnum[]
}

/**
 * SessionRevision create
 */
export type SessionRevisionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * The data needed to create a SessionRevision.
   */
  data: Prisma.XOR<Prisma.SessionRevisionCreateInput, Prisma.SessionRevisionUncheckedCreateInput>
}

/**
 * SessionRevision createMany
 */
export type SessionRevisionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SessionRevisions.
   */
  data: Prisma.SessionRevisionCreateManyInput | Prisma.SessionRevisionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SessionRevision createManyAndReturn
 */
export type SessionRevisionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * The data used to create many SessionRevisions.
   */
  data: Prisma.SessionRevisionCreateManyInput | Prisma.SessionRevisionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SessionRevision update
 */
export type SessionRevisionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * The data needed to update a SessionRevision.
   */
  data: Prisma.XOR<Prisma.SessionRevisionUpdateInput, Prisma.SessionRevisionUncheckedUpdateInput>
  /**
   * Choose, which SessionRevision to update.
   */
  where: Prisma.SessionRevisionWhereUniqueInput
}

/**
 * SessionRevision updateMany
 */
export type SessionRevisionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SessionRevisions.
   */
  data: Prisma.XOR<Prisma.SessionRevisionUpdateManyMutationInput, Prisma.SessionRevisionUncheckedUpdateManyInput>
  /**
   * Filter which SessionRevisions to update
   */
  where?: Prisma.SessionRevisionWhereInput
  /**
   * Limit how many SessionRevisions to update.
   */
  limit?: number
}

/**
 * SessionRevision updateManyAndReturn
 */
export type SessionRevisionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * The data used to update SessionRevisions.
   */
  data: Prisma.XOR<Prisma.SessionRevisionUpdateManyMutationInput, Prisma.SessionRevisionUncheckedUpdateManyInput>
  /**
   * Filter which SessionRevisions to update
   */
  where?: Prisma.SessionRevisionWhereInput
  /**
   * Limit how many SessionRevisions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SessionRevision upsert
 */
export type SessionRevisionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * The filter to search for the SessionRevision to update in case it exists.
   */
  where: Prisma.SessionRevisionWhereUniqueInput
  /**
   * In case the SessionRevision found by the `where` argument doesn't exist, create a new SessionRevision with this data.
   */
  create: Prisma.XOR<Prisma.SessionRevisionCreateInput, Prisma.SessionRevisionUncheckedCreateInput>
  /**
   * In case the SessionRevision was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SessionRevisionUpdateInput, Prisma.SessionRevisionUncheckedUpdateInput>
}

/**
 * SessionRevision delete
 */
export type SessionRevisionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
  /**
   * Filter which SessionRevision to delete.
   */
  where: Prisma.SessionRevisionWhereUniqueInput
}

/**
 * SessionRevision deleteMany
 */
export type SessionRevisionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SessionRevisions to delete
   */
  where?: Prisma.SessionRevisionWhereInput
  /**
   * Limit how many SessionRevisions to delete.
   */
  limit?: number
}

/**
 * SessionRevision without action
 */
export type SessionRevisionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SessionRevision
   */
  select?: Prisma.SessionRevisionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SessionRevision
   */
  omit?: Prisma.SessionRevisionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionRevisionInclude<ExtArgs> | null
}
