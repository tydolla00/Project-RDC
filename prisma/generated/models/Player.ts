
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Player` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Player
 * 
 */
export type PlayerModel = runtime.Types.Result.DefaultSelection<Prisma.$PlayerPayload>

export type AggregatePlayer = {
  _count: PlayerCountAggregateOutputType | null
  _avg: PlayerAvgAggregateOutputType | null
  _sum: PlayerSumAggregateOutputType | null
  _min: PlayerMinAggregateOutputType | null
  _max: PlayerMaxAggregateOutputType | null
}

export type PlayerAvgAggregateOutputType = {
  playerId: number | null
}

export type PlayerSumAggregateOutputType = {
  playerId: number | null
}

export type PlayerMinAggregateOutputType = {
  playerId: number | null
  playerName: string | null
}

export type PlayerMaxAggregateOutputType = {
  playerId: number | null
  playerName: string | null
}

export type PlayerCountAggregateOutputType = {
  playerId: number
  playerName: number
  _all: number
}


export type PlayerAvgAggregateInputType = {
  playerId?: true
}

export type PlayerSumAggregateInputType = {
  playerId?: true
}

export type PlayerMinAggregateInputType = {
  playerId?: true
  playerName?: true
}

export type PlayerMaxAggregateInputType = {
  playerId?: true
  playerName?: true
}

export type PlayerCountAggregateInputType = {
  playerId?: true
  playerName?: true
  _all?: true
}

export type PlayerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Player to aggregate.
   */
  where?: Prisma.PlayerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Players to fetch.
   */
  orderBy?: Prisma.PlayerOrderByWithRelationInput | Prisma.PlayerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlayerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Players from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Players.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Players
  **/
  _count?: true | PlayerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlayerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlayerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlayerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlayerMaxAggregateInputType
}

export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
      [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlayer[P]>
    : Prisma.GetScalarType<T[P], AggregatePlayer[P]>
}




export type PlayerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerWhereInput
  orderBy?: Prisma.PlayerOrderByWithAggregationInput | Prisma.PlayerOrderByWithAggregationInput[]
  by: Prisma.PlayerScalarFieldEnum[] | Prisma.PlayerScalarFieldEnum
  having?: Prisma.PlayerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlayerCountAggregateInputType | true
  _avg?: PlayerAvgAggregateInputType
  _sum?: PlayerSumAggregateInputType
  _min?: PlayerMinAggregateInputType
  _max?: PlayerMaxAggregateInputType
}

export type PlayerGroupByOutputType = {
  playerId: number
  playerName: string
  _count: PlayerCountAggregateOutputType | null
  _avg: PlayerAvgAggregateOutputType | null
  _sum: PlayerSumAggregateOutputType | null
  _min: PlayerMinAggregateOutputType | null
  _max: PlayerMaxAggregateOutputType | null
}

type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlayerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlayerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlayerGroupByOutputType[P]>
      }
    >
  >



export type PlayerWhereInput = {
  AND?: Prisma.PlayerWhereInput | Prisma.PlayerWhereInput[]
  OR?: Prisma.PlayerWhereInput[]
  NOT?: Prisma.PlayerWhereInput | Prisma.PlayerWhereInput[]
  playerId?: Prisma.IntFilter<"Player"> | number
  playerName?: Prisma.StringFilter<"Player"> | string
  playerSessions?: Prisma.PlayerSessionListRelationFilter
  playerStats?: Prisma.PlayerStatListRelationFilter
  matchWins?: Prisma.MatchListRelationFilter
  setWins?: Prisma.GameSetListRelationFilter
  dayWins?: Prisma.SessionListRelationFilter
  mvpOf?: Prisma.SessionListRelationFilter
  GameSetToPlayer?: Prisma.GameSetToPlayerListRelationFilter
}

export type PlayerOrderByWithRelationInput = {
  playerId?: Prisma.SortOrder
  playerName?: Prisma.SortOrder
  playerSessions?: Prisma.PlayerSessionOrderByRelationAggregateInput
  playerStats?: Prisma.PlayerStatOrderByRelationAggregateInput
  matchWins?: Prisma.MatchOrderByRelationAggregateInput
  setWins?: Prisma.GameSetOrderByRelationAggregateInput
  dayWins?: Prisma.SessionOrderByRelationAggregateInput
  mvpOf?: Prisma.SessionOrderByRelationAggregateInput
  GameSetToPlayer?: Prisma.GameSetToPlayerOrderByRelationAggregateInput
}

export type PlayerWhereUniqueInput = Prisma.AtLeast<{
  playerId?: number
  AND?: Prisma.PlayerWhereInput | Prisma.PlayerWhereInput[]
  OR?: Prisma.PlayerWhereInput[]
  NOT?: Prisma.PlayerWhereInput | Prisma.PlayerWhereInput[]
  playerName?: Prisma.StringFilter<"Player"> | string
  playerSessions?: Prisma.PlayerSessionListRelationFilter
  playerStats?: Prisma.PlayerStatListRelationFilter
  matchWins?: Prisma.MatchListRelationFilter
  setWins?: Prisma.GameSetListRelationFilter
  dayWins?: Prisma.SessionListRelationFilter
  mvpOf?: Prisma.SessionListRelationFilter
  GameSetToPlayer?: Prisma.GameSetToPlayerListRelationFilter
}, "playerId">

export type PlayerOrderByWithAggregationInput = {
  playerId?: Prisma.SortOrder
  playerName?: Prisma.SortOrder
  _count?: Prisma.PlayerCountOrderByAggregateInput
  _avg?: Prisma.PlayerAvgOrderByAggregateInput
  _max?: Prisma.PlayerMaxOrderByAggregateInput
  _min?: Prisma.PlayerMinOrderByAggregateInput
  _sum?: Prisma.PlayerSumOrderByAggregateInput
}

export type PlayerScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlayerScalarWhereWithAggregatesInput | Prisma.PlayerScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlayerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlayerScalarWhereWithAggregatesInput | Prisma.PlayerScalarWhereWithAggregatesInput[]
  playerId?: Prisma.IntWithAggregatesFilter<"Player"> | number
  playerName?: Prisma.StringWithAggregatesFilter<"Player"> | string
}

export type PlayerCreateInput = {
  playerName: string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutPlayersInput
}

export type PlayerUncheckedCreateInput = {
  playerId?: number
  playerName: string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchUncheckedCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetUncheckedCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionUncheckedCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionUncheckedCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutPlayersInput
}

export type PlayerUpdateInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUncheckedUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUncheckedUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUncheckedUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUncheckedUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutPlayersNestedInput
}

export type PlayerCreateManyInput = {
  playerId?: number
  playerName: string
}

export type PlayerUpdateManyMutationInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlayerUncheckedUpdateManyInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlayerCountOrderByAggregateInput = {
  playerId?: Prisma.SortOrder
  playerName?: Prisma.SortOrder
}

export type PlayerAvgOrderByAggregateInput = {
  playerId?: Prisma.SortOrder
}

export type PlayerMaxOrderByAggregateInput = {
  playerId?: Prisma.SortOrder
  playerName?: Prisma.SortOrder
}

export type PlayerMinOrderByAggregateInput = {
  playerId?: Prisma.SortOrder
  playerName?: Prisma.SortOrder
}

export type PlayerSumOrderByAggregateInput = {
  playerId?: Prisma.SortOrder
}

export type PlayerScalarRelationFilter = {
  is?: Prisma.PlayerWhereInput
  isNot?: Prisma.PlayerWhereInput
}

export type PlayerListRelationFilter = {
  every?: Prisma.PlayerWhereInput
  some?: Prisma.PlayerWhereInput
  none?: Prisma.PlayerWhereInput
}

export type PlayerNullableScalarRelationFilter = {
  is?: Prisma.PlayerWhereInput | null
  isNot?: Prisma.PlayerWhereInput | null
}

export type PlayerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type PlayerCreateNestedOneWithoutGameSetToPlayerInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutGameSetToPlayerInput, Prisma.PlayerUncheckedCreateWithoutGameSetToPlayerInput>
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutGameSetToPlayerInput
  connect?: Prisma.PlayerWhereUniqueInput
}

export type PlayerUpdateOneRequiredWithoutGameSetToPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutGameSetToPlayerInput, Prisma.PlayerUncheckedCreateWithoutGameSetToPlayerInput>
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutGameSetToPlayerInput
  upsert?: Prisma.PlayerUpsertWithoutGameSetToPlayerInput
  connect?: Prisma.PlayerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayerUpdateToOneWithWhereWithoutGameSetToPlayerInput, Prisma.PlayerUpdateWithoutGameSetToPlayerInput>, Prisma.PlayerUncheckedUpdateWithoutGameSetToPlayerInput>
}

export type PlayerCreateNestedManyWithoutDayWinsInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutDayWinsInput, Prisma.PlayerUncheckedCreateWithoutDayWinsInput> | Prisma.PlayerCreateWithoutDayWinsInput[] | Prisma.PlayerUncheckedCreateWithoutDayWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutDayWinsInput | Prisma.PlayerCreateOrConnectWithoutDayWinsInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
}

export type PlayerCreateNestedOneWithoutMvpOfInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutMvpOfInput, Prisma.PlayerUncheckedCreateWithoutMvpOfInput>
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutMvpOfInput
  connect?: Prisma.PlayerWhereUniqueInput
}

export type PlayerUncheckedCreateNestedManyWithoutDayWinsInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutDayWinsInput, Prisma.PlayerUncheckedCreateWithoutDayWinsInput> | Prisma.PlayerCreateWithoutDayWinsInput[] | Prisma.PlayerUncheckedCreateWithoutDayWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutDayWinsInput | Prisma.PlayerCreateOrConnectWithoutDayWinsInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
}

export type PlayerUpdateManyWithoutDayWinsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutDayWinsInput, Prisma.PlayerUncheckedCreateWithoutDayWinsInput> | Prisma.PlayerCreateWithoutDayWinsInput[] | Prisma.PlayerUncheckedCreateWithoutDayWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutDayWinsInput | Prisma.PlayerCreateOrConnectWithoutDayWinsInput[]
  upsert?: Prisma.PlayerUpsertWithWhereUniqueWithoutDayWinsInput | Prisma.PlayerUpsertWithWhereUniqueWithoutDayWinsInput[]
  set?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  disconnect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  delete?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  update?: Prisma.PlayerUpdateWithWhereUniqueWithoutDayWinsInput | Prisma.PlayerUpdateWithWhereUniqueWithoutDayWinsInput[]
  updateMany?: Prisma.PlayerUpdateManyWithWhereWithoutDayWinsInput | Prisma.PlayerUpdateManyWithWhereWithoutDayWinsInput[]
  deleteMany?: Prisma.PlayerScalarWhereInput | Prisma.PlayerScalarWhereInput[]
}

export type PlayerUpdateOneWithoutMvpOfNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutMvpOfInput, Prisma.PlayerUncheckedCreateWithoutMvpOfInput>
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutMvpOfInput
  upsert?: Prisma.PlayerUpsertWithoutMvpOfInput
  disconnect?: Prisma.PlayerWhereInput | boolean
  delete?: Prisma.PlayerWhereInput | boolean
  connect?: Prisma.PlayerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayerUpdateToOneWithWhereWithoutMvpOfInput, Prisma.PlayerUpdateWithoutMvpOfInput>, Prisma.PlayerUncheckedUpdateWithoutMvpOfInput>
}

export type PlayerUncheckedUpdateManyWithoutDayWinsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutDayWinsInput, Prisma.PlayerUncheckedCreateWithoutDayWinsInput> | Prisma.PlayerCreateWithoutDayWinsInput[] | Prisma.PlayerUncheckedCreateWithoutDayWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutDayWinsInput | Prisma.PlayerCreateOrConnectWithoutDayWinsInput[]
  upsert?: Prisma.PlayerUpsertWithWhereUniqueWithoutDayWinsInput | Prisma.PlayerUpsertWithWhereUniqueWithoutDayWinsInput[]
  set?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  disconnect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  delete?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  update?: Prisma.PlayerUpdateWithWhereUniqueWithoutDayWinsInput | Prisma.PlayerUpdateWithWhereUniqueWithoutDayWinsInput[]
  updateMany?: Prisma.PlayerUpdateManyWithWhereWithoutDayWinsInput | Prisma.PlayerUpdateManyWithWhereWithoutDayWinsInput[]
  deleteMany?: Prisma.PlayerScalarWhereInput | Prisma.PlayerScalarWhereInput[]
}

export type PlayerCreateNestedManyWithoutSetWinsInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutSetWinsInput, Prisma.PlayerUncheckedCreateWithoutSetWinsInput> | Prisma.PlayerCreateWithoutSetWinsInput[] | Prisma.PlayerUncheckedCreateWithoutSetWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutSetWinsInput | Prisma.PlayerCreateOrConnectWithoutSetWinsInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
}

export type PlayerUncheckedCreateNestedManyWithoutSetWinsInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutSetWinsInput, Prisma.PlayerUncheckedCreateWithoutSetWinsInput> | Prisma.PlayerCreateWithoutSetWinsInput[] | Prisma.PlayerUncheckedCreateWithoutSetWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutSetWinsInput | Prisma.PlayerCreateOrConnectWithoutSetWinsInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
}

export type PlayerUpdateManyWithoutSetWinsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutSetWinsInput, Prisma.PlayerUncheckedCreateWithoutSetWinsInput> | Prisma.PlayerCreateWithoutSetWinsInput[] | Prisma.PlayerUncheckedCreateWithoutSetWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutSetWinsInput | Prisma.PlayerCreateOrConnectWithoutSetWinsInput[]
  upsert?: Prisma.PlayerUpsertWithWhereUniqueWithoutSetWinsInput | Prisma.PlayerUpsertWithWhereUniqueWithoutSetWinsInput[]
  set?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  disconnect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  delete?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  update?: Prisma.PlayerUpdateWithWhereUniqueWithoutSetWinsInput | Prisma.PlayerUpdateWithWhereUniqueWithoutSetWinsInput[]
  updateMany?: Prisma.PlayerUpdateManyWithWhereWithoutSetWinsInput | Prisma.PlayerUpdateManyWithWhereWithoutSetWinsInput[]
  deleteMany?: Prisma.PlayerScalarWhereInput | Prisma.PlayerScalarWhereInput[]
}

export type PlayerUncheckedUpdateManyWithoutSetWinsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutSetWinsInput, Prisma.PlayerUncheckedCreateWithoutSetWinsInput> | Prisma.PlayerCreateWithoutSetWinsInput[] | Prisma.PlayerUncheckedCreateWithoutSetWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutSetWinsInput | Prisma.PlayerCreateOrConnectWithoutSetWinsInput[]
  upsert?: Prisma.PlayerUpsertWithWhereUniqueWithoutSetWinsInput | Prisma.PlayerUpsertWithWhereUniqueWithoutSetWinsInput[]
  set?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  disconnect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  delete?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  update?: Prisma.PlayerUpdateWithWhereUniqueWithoutSetWinsInput | Prisma.PlayerUpdateWithWhereUniqueWithoutSetWinsInput[]
  updateMany?: Prisma.PlayerUpdateManyWithWhereWithoutSetWinsInput | Prisma.PlayerUpdateManyWithWhereWithoutSetWinsInput[]
  deleteMany?: Prisma.PlayerScalarWhereInput | Prisma.PlayerScalarWhereInput[]
}

export type PlayerCreateNestedManyWithoutMatchWinsInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutMatchWinsInput, Prisma.PlayerUncheckedCreateWithoutMatchWinsInput> | Prisma.PlayerCreateWithoutMatchWinsInput[] | Prisma.PlayerUncheckedCreateWithoutMatchWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutMatchWinsInput | Prisma.PlayerCreateOrConnectWithoutMatchWinsInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
}

export type PlayerUncheckedCreateNestedManyWithoutMatchWinsInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutMatchWinsInput, Prisma.PlayerUncheckedCreateWithoutMatchWinsInput> | Prisma.PlayerCreateWithoutMatchWinsInput[] | Prisma.PlayerUncheckedCreateWithoutMatchWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutMatchWinsInput | Prisma.PlayerCreateOrConnectWithoutMatchWinsInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
}

export type PlayerUpdateManyWithoutMatchWinsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutMatchWinsInput, Prisma.PlayerUncheckedCreateWithoutMatchWinsInput> | Prisma.PlayerCreateWithoutMatchWinsInput[] | Prisma.PlayerUncheckedCreateWithoutMatchWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutMatchWinsInput | Prisma.PlayerCreateOrConnectWithoutMatchWinsInput[]
  upsert?: Prisma.PlayerUpsertWithWhereUniqueWithoutMatchWinsInput | Prisma.PlayerUpsertWithWhereUniqueWithoutMatchWinsInput[]
  set?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  disconnect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  delete?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  update?: Prisma.PlayerUpdateWithWhereUniqueWithoutMatchWinsInput | Prisma.PlayerUpdateWithWhereUniqueWithoutMatchWinsInput[]
  updateMany?: Prisma.PlayerUpdateManyWithWhereWithoutMatchWinsInput | Prisma.PlayerUpdateManyWithWhereWithoutMatchWinsInput[]
  deleteMany?: Prisma.PlayerScalarWhereInput | Prisma.PlayerScalarWhereInput[]
}

export type PlayerUncheckedUpdateManyWithoutMatchWinsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutMatchWinsInput, Prisma.PlayerUncheckedCreateWithoutMatchWinsInput> | Prisma.PlayerCreateWithoutMatchWinsInput[] | Prisma.PlayerUncheckedCreateWithoutMatchWinsInput[]
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutMatchWinsInput | Prisma.PlayerCreateOrConnectWithoutMatchWinsInput[]
  upsert?: Prisma.PlayerUpsertWithWhereUniqueWithoutMatchWinsInput | Prisma.PlayerUpsertWithWhereUniqueWithoutMatchWinsInput[]
  set?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  disconnect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  delete?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  connect?: Prisma.PlayerWhereUniqueInput | Prisma.PlayerWhereUniqueInput[]
  update?: Prisma.PlayerUpdateWithWhereUniqueWithoutMatchWinsInput | Prisma.PlayerUpdateWithWhereUniqueWithoutMatchWinsInput[]
  updateMany?: Prisma.PlayerUpdateManyWithWhereWithoutMatchWinsInput | Prisma.PlayerUpdateManyWithWhereWithoutMatchWinsInput[]
  deleteMany?: Prisma.PlayerScalarWhereInput | Prisma.PlayerScalarWhereInput[]
}

export type PlayerCreateNestedOneWithoutPlayerSessionsInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutPlayerSessionsInput, Prisma.PlayerUncheckedCreateWithoutPlayerSessionsInput>
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutPlayerSessionsInput
  connect?: Prisma.PlayerWhereUniqueInput
}

export type PlayerUpdateOneRequiredWithoutPlayerSessionsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutPlayerSessionsInput, Prisma.PlayerUncheckedCreateWithoutPlayerSessionsInput>
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutPlayerSessionsInput
  upsert?: Prisma.PlayerUpsertWithoutPlayerSessionsInput
  connect?: Prisma.PlayerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayerUpdateToOneWithWhereWithoutPlayerSessionsInput, Prisma.PlayerUpdateWithoutPlayerSessionsInput>, Prisma.PlayerUncheckedUpdateWithoutPlayerSessionsInput>
}

export type PlayerCreateNestedOneWithoutPlayerStatsInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutPlayerStatsInput, Prisma.PlayerUncheckedCreateWithoutPlayerStatsInput>
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutPlayerStatsInput
  connect?: Prisma.PlayerWhereUniqueInput
}

export type PlayerUpdateOneRequiredWithoutPlayerStatsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerCreateWithoutPlayerStatsInput, Prisma.PlayerUncheckedCreateWithoutPlayerStatsInput>
  connectOrCreate?: Prisma.PlayerCreateOrConnectWithoutPlayerStatsInput
  upsert?: Prisma.PlayerUpsertWithoutPlayerStatsInput
  connect?: Prisma.PlayerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayerUpdateToOneWithWhereWithoutPlayerStatsInput, Prisma.PlayerUpdateWithoutPlayerStatsInput>, Prisma.PlayerUncheckedUpdateWithoutPlayerStatsInput>
}

export type PlayerCreateWithoutGameSetToPlayerInput = {
  playerName: string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionCreateNestedManyWithoutMvpInput
}

export type PlayerUncheckedCreateWithoutGameSetToPlayerInput = {
  playerId?: number
  playerName: string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchUncheckedCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetUncheckedCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionUncheckedCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionUncheckedCreateNestedManyWithoutMvpInput
}

export type PlayerCreateOrConnectWithoutGameSetToPlayerInput = {
  where: Prisma.PlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerCreateWithoutGameSetToPlayerInput, Prisma.PlayerUncheckedCreateWithoutGameSetToPlayerInput>
}

export type PlayerUpsertWithoutGameSetToPlayerInput = {
  update: Prisma.XOR<Prisma.PlayerUpdateWithoutGameSetToPlayerInput, Prisma.PlayerUncheckedUpdateWithoutGameSetToPlayerInput>
  create: Prisma.XOR<Prisma.PlayerCreateWithoutGameSetToPlayerInput, Prisma.PlayerUncheckedCreateWithoutGameSetToPlayerInput>
  where?: Prisma.PlayerWhereInput
}

export type PlayerUpdateToOneWithWhereWithoutGameSetToPlayerInput = {
  where?: Prisma.PlayerWhereInput
  data: Prisma.XOR<Prisma.PlayerUpdateWithoutGameSetToPlayerInput, Prisma.PlayerUncheckedUpdateWithoutGameSetToPlayerInput>
}

export type PlayerUpdateWithoutGameSetToPlayerInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUpdateManyWithoutMvpNestedInput
}

export type PlayerUncheckedUpdateWithoutGameSetToPlayerInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUncheckedUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUncheckedUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUncheckedUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUncheckedUpdateManyWithoutMvpNestedInput
}

export type PlayerCreateWithoutDayWinsInput = {
  playerName: string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetCreateNestedManyWithoutSetWinnersInput
  mvpOf?: Prisma.SessionCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutPlayersInput
}

export type PlayerUncheckedCreateWithoutDayWinsInput = {
  playerId?: number
  playerName: string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchUncheckedCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetUncheckedCreateNestedManyWithoutSetWinnersInput
  mvpOf?: Prisma.SessionUncheckedCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutPlayersInput
}

export type PlayerCreateOrConnectWithoutDayWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerCreateWithoutDayWinsInput, Prisma.PlayerUncheckedCreateWithoutDayWinsInput>
}

export type PlayerCreateWithoutMvpOfInput = {
  playerName: string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionCreateNestedManyWithoutDayWinnersInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutPlayersInput
}

export type PlayerUncheckedCreateWithoutMvpOfInput = {
  playerId?: number
  playerName: string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchUncheckedCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetUncheckedCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionUncheckedCreateNestedManyWithoutDayWinnersInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutPlayersInput
}

export type PlayerCreateOrConnectWithoutMvpOfInput = {
  where: Prisma.PlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerCreateWithoutMvpOfInput, Prisma.PlayerUncheckedCreateWithoutMvpOfInput>
}

export type PlayerUpsertWithWhereUniqueWithoutDayWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerUpdateWithoutDayWinsInput, Prisma.PlayerUncheckedUpdateWithoutDayWinsInput>
  create: Prisma.XOR<Prisma.PlayerCreateWithoutDayWinsInput, Prisma.PlayerUncheckedCreateWithoutDayWinsInput>
}

export type PlayerUpdateWithWhereUniqueWithoutDayWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerUpdateWithoutDayWinsInput, Prisma.PlayerUncheckedUpdateWithoutDayWinsInput>
}

export type PlayerUpdateManyWithWhereWithoutDayWinsInput = {
  where: Prisma.PlayerScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerUpdateManyMutationInput, Prisma.PlayerUncheckedUpdateManyWithoutDayWinsInput>
}

export type PlayerScalarWhereInput = {
  AND?: Prisma.PlayerScalarWhereInput | Prisma.PlayerScalarWhereInput[]
  OR?: Prisma.PlayerScalarWhereInput[]
  NOT?: Prisma.PlayerScalarWhereInput | Prisma.PlayerScalarWhereInput[]
  playerId?: Prisma.IntFilter<"Player"> | number
  playerName?: Prisma.StringFilter<"Player"> | string
}

export type PlayerUpsertWithoutMvpOfInput = {
  update: Prisma.XOR<Prisma.PlayerUpdateWithoutMvpOfInput, Prisma.PlayerUncheckedUpdateWithoutMvpOfInput>
  create: Prisma.XOR<Prisma.PlayerCreateWithoutMvpOfInput, Prisma.PlayerUncheckedCreateWithoutMvpOfInput>
  where?: Prisma.PlayerWhereInput
}

export type PlayerUpdateToOneWithWhereWithoutMvpOfInput = {
  where?: Prisma.PlayerWhereInput
  data: Prisma.XOR<Prisma.PlayerUpdateWithoutMvpOfInput, Prisma.PlayerUncheckedUpdateWithoutMvpOfInput>
}

export type PlayerUpdateWithoutMvpOfInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUpdateManyWithoutDayWinnersNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateWithoutMvpOfInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUncheckedUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUncheckedUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUncheckedUpdateManyWithoutDayWinnersNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutPlayersNestedInput
}

export type PlayerCreateWithoutSetWinsInput = {
  playerName: string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchCreateNestedManyWithoutMatchWinnersInput
  dayWins?: Prisma.SessionCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutPlayersInput
}

export type PlayerUncheckedCreateWithoutSetWinsInput = {
  playerId?: number
  playerName: string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchUncheckedCreateNestedManyWithoutMatchWinnersInput
  dayWins?: Prisma.SessionUncheckedCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionUncheckedCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutPlayersInput
}

export type PlayerCreateOrConnectWithoutSetWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerCreateWithoutSetWinsInput, Prisma.PlayerUncheckedCreateWithoutSetWinsInput>
}

export type PlayerUpsertWithWhereUniqueWithoutSetWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerUpdateWithoutSetWinsInput, Prisma.PlayerUncheckedUpdateWithoutSetWinsInput>
  create: Prisma.XOR<Prisma.PlayerCreateWithoutSetWinsInput, Prisma.PlayerUncheckedCreateWithoutSetWinsInput>
}

export type PlayerUpdateWithWhereUniqueWithoutSetWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerUpdateWithoutSetWinsInput, Prisma.PlayerUncheckedUpdateWithoutSetWinsInput>
}

export type PlayerUpdateManyWithWhereWithoutSetWinsInput = {
  where: Prisma.PlayerScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerUpdateManyMutationInput, Prisma.PlayerUncheckedUpdateManyWithoutSetWinsInput>
}

export type PlayerCreateWithoutMatchWinsInput = {
  playerName: string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerInput
  setWins?: Prisma.GameSetCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutPlayersInput
}

export type PlayerUncheckedCreateWithoutMatchWinsInput = {
  playerId?: number
  playerName: string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutPlayerInput
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  setWins?: Prisma.GameSetUncheckedCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionUncheckedCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionUncheckedCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutPlayersInput
}

export type PlayerCreateOrConnectWithoutMatchWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerCreateWithoutMatchWinsInput, Prisma.PlayerUncheckedCreateWithoutMatchWinsInput>
}

export type PlayerUpsertWithWhereUniqueWithoutMatchWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerUpdateWithoutMatchWinsInput, Prisma.PlayerUncheckedUpdateWithoutMatchWinsInput>
  create: Prisma.XOR<Prisma.PlayerCreateWithoutMatchWinsInput, Prisma.PlayerUncheckedCreateWithoutMatchWinsInput>
}

export type PlayerUpdateWithWhereUniqueWithoutMatchWinsInput = {
  where: Prisma.PlayerWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerUpdateWithoutMatchWinsInput, Prisma.PlayerUncheckedUpdateWithoutMatchWinsInput>
}

export type PlayerUpdateManyWithWhereWithoutMatchWinsInput = {
  where: Prisma.PlayerScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerUpdateManyMutationInput, Prisma.PlayerUncheckedUpdateManyWithoutMatchWinsInput>
}

export type PlayerCreateWithoutPlayerSessionsInput = {
  playerName: string
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutPlayersInput
}

export type PlayerUncheckedCreateWithoutPlayerSessionsInput = {
  playerId?: number
  playerName: string
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchUncheckedCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetUncheckedCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionUncheckedCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionUncheckedCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutPlayersInput
}

export type PlayerCreateOrConnectWithoutPlayerSessionsInput = {
  where: Prisma.PlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerCreateWithoutPlayerSessionsInput, Prisma.PlayerUncheckedCreateWithoutPlayerSessionsInput>
}

export type PlayerUpsertWithoutPlayerSessionsInput = {
  update: Prisma.XOR<Prisma.PlayerUpdateWithoutPlayerSessionsInput, Prisma.PlayerUncheckedUpdateWithoutPlayerSessionsInput>
  create: Prisma.XOR<Prisma.PlayerCreateWithoutPlayerSessionsInput, Prisma.PlayerUncheckedCreateWithoutPlayerSessionsInput>
  where?: Prisma.PlayerWhereInput
}

export type PlayerUpdateToOneWithWhereWithoutPlayerSessionsInput = {
  where?: Prisma.PlayerWhereInput
  data: Prisma.XOR<Prisma.PlayerUpdateWithoutPlayerSessionsInput, Prisma.PlayerUncheckedUpdateWithoutPlayerSessionsInput>
}

export type PlayerUpdateWithoutPlayerSessionsInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateWithoutPlayerSessionsInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUncheckedUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUncheckedUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUncheckedUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUncheckedUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutPlayersNestedInput
}

export type PlayerCreateWithoutPlayerStatsInput = {
  playerName: string
  playerSessions?: Prisma.PlayerSessionCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerCreateNestedManyWithoutPlayersInput
}

export type PlayerUncheckedCreateWithoutPlayerStatsInput = {
  playerId?: number
  playerName: string
  playerSessions?: Prisma.PlayerSessionUncheckedCreateNestedManyWithoutPlayerInput
  matchWins?: Prisma.MatchUncheckedCreateNestedManyWithoutMatchWinnersInput
  setWins?: Prisma.GameSetUncheckedCreateNestedManyWithoutSetWinnersInput
  dayWins?: Prisma.SessionUncheckedCreateNestedManyWithoutDayWinnersInput
  mvpOf?: Prisma.SessionUncheckedCreateNestedManyWithoutMvpInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedCreateNestedManyWithoutPlayersInput
}

export type PlayerCreateOrConnectWithoutPlayerStatsInput = {
  where: Prisma.PlayerWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerCreateWithoutPlayerStatsInput, Prisma.PlayerUncheckedCreateWithoutPlayerStatsInput>
}

export type PlayerUpsertWithoutPlayerStatsInput = {
  update: Prisma.XOR<Prisma.PlayerUpdateWithoutPlayerStatsInput, Prisma.PlayerUncheckedUpdateWithoutPlayerStatsInput>
  create: Prisma.XOR<Prisma.PlayerCreateWithoutPlayerStatsInput, Prisma.PlayerUncheckedCreateWithoutPlayerStatsInput>
  where?: Prisma.PlayerWhereInput
}

export type PlayerUpdateToOneWithWhereWithoutPlayerStatsInput = {
  where?: Prisma.PlayerWhereInput
  data: Prisma.XOR<Prisma.PlayerUpdateWithoutPlayerStatsInput, Prisma.PlayerUncheckedUpdateWithoutPlayerStatsInput>
}

export type PlayerUpdateWithoutPlayerStatsInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateWithoutPlayerStatsInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUncheckedUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUncheckedUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUncheckedUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUncheckedUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutPlayersNestedInput
}

export type PlayerUpdateWithoutDayWinsInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUpdateManyWithoutSetWinnersNestedInput
  mvpOf?: Prisma.SessionUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateWithoutDayWinsInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUncheckedUpdateManyWithoutMatchWinnersNestedInput
  setWins?: Prisma.GameSetUncheckedUpdateManyWithoutSetWinnersNestedInput
  mvpOf?: Prisma.SessionUncheckedUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateManyWithoutDayWinsInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlayerUpdateWithoutSetWinsInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUpdateManyWithoutMatchWinnersNestedInput
  dayWins?: Prisma.SessionUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateWithoutSetWinsInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  matchWins?: Prisma.MatchUncheckedUpdateManyWithoutMatchWinnersNestedInput
  dayWins?: Prisma.SessionUncheckedUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUncheckedUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateManyWithoutSetWinsInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlayerUpdateWithoutMatchWinsInput = {
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerNestedInput
  setWins?: Prisma.GameSetUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateWithoutMatchWinsInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
  playerSessions?: Prisma.PlayerSessionUncheckedUpdateManyWithoutPlayerNestedInput
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput
  setWins?: Prisma.GameSetUncheckedUpdateManyWithoutSetWinnersNestedInput
  dayWins?: Prisma.SessionUncheckedUpdateManyWithoutDayWinnersNestedInput
  mvpOf?: Prisma.SessionUncheckedUpdateManyWithoutMvpNestedInput
  GameSetToPlayer?: Prisma.GameSetToPlayerUncheckedUpdateManyWithoutPlayersNestedInput
}

export type PlayerUncheckedUpdateManyWithoutMatchWinsInput = {
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerName?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type PlayerCountOutputType
 */

export type PlayerCountOutputType = {
  playerSessions: number
  playerStats: number
  matchWins: number
  setWins: number
  dayWins: number
  mvpOf: number
  GameSetToPlayer: number
}

export type PlayerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playerSessions?: boolean | PlayerCountOutputTypeCountPlayerSessionsArgs
  playerStats?: boolean | PlayerCountOutputTypeCountPlayerStatsArgs
  matchWins?: boolean | PlayerCountOutputTypeCountMatchWinsArgs
  setWins?: boolean | PlayerCountOutputTypeCountSetWinsArgs
  dayWins?: boolean | PlayerCountOutputTypeCountDayWinsArgs
  mvpOf?: boolean | PlayerCountOutputTypeCountMvpOfArgs
  GameSetToPlayer?: boolean | PlayerCountOutputTypeCountGameSetToPlayerArgs
}

/**
 * PlayerCountOutputType without action
 */
export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerCountOutputType
   */
  select?: Prisma.PlayerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PlayerCountOutputType without action
 */
export type PlayerCountOutputTypeCountPlayerSessionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerSessionWhereInput
}

/**
 * PlayerCountOutputType without action
 */
export type PlayerCountOutputTypeCountPlayerStatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerStatWhereInput
}

/**
 * PlayerCountOutputType without action
 */
export type PlayerCountOutputTypeCountMatchWinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MatchWhereInput
}

/**
 * PlayerCountOutputType without action
 */
export type PlayerCountOutputTypeCountSetWinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSetWhereInput
}

/**
 * PlayerCountOutputType without action
 */
export type PlayerCountOutputTypeCountDayWinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SessionWhereInput
}

/**
 * PlayerCountOutputType without action
 */
export type PlayerCountOutputTypeCountMvpOfArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SessionWhereInput
}

/**
 * PlayerCountOutputType without action
 */
export type PlayerCountOutputTypeCountGameSetToPlayerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSetToPlayerWhereInput
}


export type PlayerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerId?: boolean
  playerName?: boolean
  playerSessions?: boolean | Prisma.Player$playerSessionsArgs<ExtArgs>
  playerStats?: boolean | Prisma.Player$playerStatsArgs<ExtArgs>
  matchWins?: boolean | Prisma.Player$matchWinsArgs<ExtArgs>
  setWins?: boolean | Prisma.Player$setWinsArgs<ExtArgs>
  dayWins?: boolean | Prisma.Player$dayWinsArgs<ExtArgs>
  mvpOf?: boolean | Prisma.Player$mvpOfArgs<ExtArgs>
  GameSetToPlayer?: boolean | Prisma.Player$GameSetToPlayerArgs<ExtArgs>
  _count?: boolean | Prisma.PlayerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["player"]>

export type PlayerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerId?: boolean
  playerName?: boolean
}, ExtArgs["result"]["player"]>

export type PlayerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerId?: boolean
  playerName?: boolean
}, ExtArgs["result"]["player"]>

export type PlayerSelectScalar = {
  playerId?: boolean
  playerName?: boolean
}

export type PlayerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"playerId" | "playerName", ExtArgs["result"]["player"]>
export type PlayerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playerSessions?: boolean | Prisma.Player$playerSessionsArgs<ExtArgs>
  playerStats?: boolean | Prisma.Player$playerStatsArgs<ExtArgs>
  matchWins?: boolean | Prisma.Player$matchWinsArgs<ExtArgs>
  setWins?: boolean | Prisma.Player$setWinsArgs<ExtArgs>
  dayWins?: boolean | Prisma.Player$dayWinsArgs<ExtArgs>
  mvpOf?: boolean | Prisma.Player$mvpOfArgs<ExtArgs>
  GameSetToPlayer?: boolean | Prisma.Player$GameSetToPlayerArgs<ExtArgs>
  _count?: boolean | Prisma.PlayerCountOutputTypeDefaultArgs<ExtArgs>
}
export type PlayerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PlayerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PlayerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Player"
  objects: {
    playerSessions: Prisma.$PlayerSessionPayload<ExtArgs>[]
    playerStats: Prisma.$PlayerStatPayload<ExtArgs>[]
    matchWins: Prisma.$MatchPayload<ExtArgs>[]
    setWins: Prisma.$GameSetPayload<ExtArgs>[]
    dayWins: Prisma.$SessionPayload<ExtArgs>[]
    mvpOf: Prisma.$SessionPayload<ExtArgs>[]
    GameSetToPlayer: Prisma.$GameSetToPlayerPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    playerId: number
    playerName: string
  }, ExtArgs["result"]["player"]>
  composites: {}
}

export type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlayerPayload, S>

export type PlayerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlayerCountAggregateInputType | true
  }

export interface PlayerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
  /**
   * Find zero or one Player that matches the filter.
   * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
   * @example
   * // Get one Player
   * const player = await prisma.player.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlayerFindUniqueArgs>(args: Prisma.SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Player that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
   * @example
   * // Get one Player
   * const player = await prisma.player.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Player that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerFindFirstArgs} args - Arguments to find a Player
   * @example
   * // Get one Player
   * const player = await prisma.player.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlayerFindFirstArgs>(args?: Prisma.SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Player that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
   * @example
   * // Get one Player
   * const player = await prisma.player.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Players that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Players
   * const players = await prisma.player.findMany()
   * 
   * // Get first 10 Players
   * const players = await prisma.player.findMany({ take: 10 })
   * 
   * // Only select the `playerId`
   * const playerWithPlayerIdOnly = await prisma.player.findMany({ select: { playerId: true } })
   * 
   */
  findMany<T extends PlayerFindManyArgs>(args?: Prisma.SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Player.
   * @param {PlayerCreateArgs} args - Arguments to create a Player.
   * @example
   * // Create one Player
   * const Player = await prisma.player.create({
   *   data: {
   *     // ... data to create a Player
   *   }
   * })
   * 
   */
  create<T extends PlayerCreateArgs>(args: Prisma.SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Players.
   * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
   * @example
   * // Create many Players
   * const player = await prisma.player.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlayerCreateManyArgs>(args?: Prisma.SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Players and returns the data saved in the database.
   * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
   * @example
   * // Create many Players
   * const player = await prisma.player.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Players and only return the `playerId`
   * const playerWithPlayerIdOnly = await prisma.player.createManyAndReturn({
   *   select: { playerId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Player.
   * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
   * @example
   * // Delete one Player
   * const Player = await prisma.player.delete({
   *   where: {
   *     // ... filter to delete one Player
   *   }
   * })
   * 
   */
  delete<T extends PlayerDeleteArgs>(args: Prisma.SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Player.
   * @param {PlayerUpdateArgs} args - Arguments to update one Player.
   * @example
   * // Update one Player
   * const player = await prisma.player.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlayerUpdateArgs>(args: Prisma.SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Players.
   * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
   * @example
   * // Delete a few Players
   * const { count } = await prisma.player.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlayerDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Players.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Players
   * const player = await prisma.player.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlayerUpdateManyArgs>(args: Prisma.SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Players and returns the data updated in the database.
   * @param {PlayerUpdateManyAndReturnArgs} args - Arguments to update many Players.
   * @example
   * // Update many Players
   * const player = await prisma.player.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Players and only return the `playerId`
   * const playerWithPlayerIdOnly = await prisma.player.updateManyAndReturn({
   *   select: { playerId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlayerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Player.
   * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
   * @example
   * // Update or create a Player
   * const player = await prisma.player.upsert({
   *   create: {
   *     // ... data to create a Player
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Player we want to update
   *   }
   * })
   */
  upsert<T extends PlayerUpsertArgs>(args: Prisma.SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Players.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerCountArgs} args - Arguments to filter Players to count.
   * @example
   * // Count the number of Players
   * const count = await prisma.player.count({
   *   where: {
   *     // ... the filter for the Players we want to count
   *   }
   * })
  **/
  count<T extends PlayerCountArgs>(
    args?: Prisma.Subset<T, PlayerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlayerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Player.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlayerAggregateArgs>(args: Prisma.Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

  /**
   * Group by Player.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlayerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlayerGroupByArgs['orderBy'] }
      : { orderBy?: PlayerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Player model
 */
readonly fields: PlayerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Player.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  playerSessions<T extends Prisma.Player$playerSessionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Player$playerSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  playerStats<T extends Prisma.Player$playerStatsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Player$playerStatsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  matchWins<T extends Prisma.Player$matchWinsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Player$matchWinsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  setWins<T extends Prisma.Player$setWinsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Player$setWinsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  dayWins<T extends Prisma.Player$dayWinsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Player$dayWinsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  mvpOf<T extends Prisma.Player$mvpOfArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Player$mvpOfArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  GameSetToPlayer<T extends Prisma.Player$GameSetToPlayerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Player$GameSetToPlayerArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSetToPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Player model
 */
export interface PlayerFieldRefs {
  readonly playerId: Prisma.FieldRef<"Player", 'Int'>
  readonly playerName: Prisma.FieldRef<"Player", 'String'>
}
    

// Custom InputTypes
/**
 * Player findUnique
 */
export type PlayerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * Filter, which Player to fetch.
   */
  where: Prisma.PlayerWhereUniqueInput
}

/**
 * Player findUniqueOrThrow
 */
export type PlayerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * Filter, which Player to fetch.
   */
  where: Prisma.PlayerWhereUniqueInput
}

/**
 * Player findFirst
 */
export type PlayerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * Filter, which Player to fetch.
   */
  where?: Prisma.PlayerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Players to fetch.
   */
  orderBy?: Prisma.PlayerOrderByWithRelationInput | Prisma.PlayerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Players.
   */
  cursor?: Prisma.PlayerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Players from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Players.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Players.
   */
  distinct?: Prisma.PlayerScalarFieldEnum | Prisma.PlayerScalarFieldEnum[]
}

/**
 * Player findFirstOrThrow
 */
export type PlayerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * Filter, which Player to fetch.
   */
  where?: Prisma.PlayerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Players to fetch.
   */
  orderBy?: Prisma.PlayerOrderByWithRelationInput | Prisma.PlayerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Players.
   */
  cursor?: Prisma.PlayerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Players from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Players.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Players.
   */
  distinct?: Prisma.PlayerScalarFieldEnum | Prisma.PlayerScalarFieldEnum[]
}

/**
 * Player findMany
 */
export type PlayerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * Filter, which Players to fetch.
   */
  where?: Prisma.PlayerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Players to fetch.
   */
  orderBy?: Prisma.PlayerOrderByWithRelationInput | Prisma.PlayerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Players.
   */
  cursor?: Prisma.PlayerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Players from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Players.
   */
  skip?: number
  distinct?: Prisma.PlayerScalarFieldEnum | Prisma.PlayerScalarFieldEnum[]
}

/**
 * Player create
 */
export type PlayerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * The data needed to create a Player.
   */
  data: Prisma.XOR<Prisma.PlayerCreateInput, Prisma.PlayerUncheckedCreateInput>
}

/**
 * Player createMany
 */
export type PlayerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Players.
   */
  data: Prisma.PlayerCreateManyInput | Prisma.PlayerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Player createManyAndReturn
 */
export type PlayerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * The data used to create many Players.
   */
  data: Prisma.PlayerCreateManyInput | Prisma.PlayerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Player update
 */
export type PlayerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * The data needed to update a Player.
   */
  data: Prisma.XOR<Prisma.PlayerUpdateInput, Prisma.PlayerUncheckedUpdateInput>
  /**
   * Choose, which Player to update.
   */
  where: Prisma.PlayerWhereUniqueInput
}

/**
 * Player updateMany
 */
export type PlayerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Players.
   */
  data: Prisma.XOR<Prisma.PlayerUpdateManyMutationInput, Prisma.PlayerUncheckedUpdateManyInput>
  /**
   * Filter which Players to update
   */
  where?: Prisma.PlayerWhereInput
  /**
   * Limit how many Players to update.
   */
  limit?: number
}

/**
 * Player updateManyAndReturn
 */
export type PlayerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * The data used to update Players.
   */
  data: Prisma.XOR<Prisma.PlayerUpdateManyMutationInput, Prisma.PlayerUncheckedUpdateManyInput>
  /**
   * Filter which Players to update
   */
  where?: Prisma.PlayerWhereInput
  /**
   * Limit how many Players to update.
   */
  limit?: number
}

/**
 * Player upsert
 */
export type PlayerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * The filter to search for the Player to update in case it exists.
   */
  where: Prisma.PlayerWhereUniqueInput
  /**
   * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
   */
  create: Prisma.XOR<Prisma.PlayerCreateInput, Prisma.PlayerUncheckedCreateInput>
  /**
   * In case the Player was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlayerUpdateInput, Prisma.PlayerUncheckedUpdateInput>
}

/**
 * Player delete
 */
export type PlayerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
  /**
   * Filter which Player to delete.
   */
  where: Prisma.PlayerWhereUniqueInput
}

/**
 * Player deleteMany
 */
export type PlayerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Players to delete
   */
  where?: Prisma.PlayerWhereInput
  /**
   * Limit how many Players to delete.
   */
  limit?: number
}

/**
 * Player.playerSessions
 */
export type Player$playerSessionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  where?: Prisma.PlayerSessionWhereInput
  orderBy?: Prisma.PlayerSessionOrderByWithRelationInput | Prisma.PlayerSessionOrderByWithRelationInput[]
  cursor?: Prisma.PlayerSessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlayerSessionScalarFieldEnum | Prisma.PlayerSessionScalarFieldEnum[]
}

/**
 * Player.playerStats
 */
export type Player$playerStatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  where?: Prisma.PlayerStatWhereInput
  orderBy?: Prisma.PlayerStatOrderByWithRelationInput | Prisma.PlayerStatOrderByWithRelationInput[]
  cursor?: Prisma.PlayerStatWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlayerStatScalarFieldEnum | Prisma.PlayerStatScalarFieldEnum[]
}

/**
 * Player.matchWins
 */
export type Player$matchWinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  where?: Prisma.MatchWhereInput
  orderBy?: Prisma.MatchOrderByWithRelationInput | Prisma.MatchOrderByWithRelationInput[]
  cursor?: Prisma.MatchWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MatchScalarFieldEnum | Prisma.MatchScalarFieldEnum[]
}

/**
 * Player.setWins
 */
export type Player$setWinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSet
   */
  select?: Prisma.GameSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSet
   */
  omit?: Prisma.GameSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetInclude<ExtArgs> | null
  where?: Prisma.GameSetWhereInput
  orderBy?: Prisma.GameSetOrderByWithRelationInput | Prisma.GameSetOrderByWithRelationInput[]
  cursor?: Prisma.GameSetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameSetScalarFieldEnum | Prisma.GameSetScalarFieldEnum[]
}

/**
 * Player.dayWins
 */
export type Player$dayWinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Session
   */
  select?: Prisma.SessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Session
   */
  omit?: Prisma.SessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionInclude<ExtArgs> | null
  where?: Prisma.SessionWhereInput
  orderBy?: Prisma.SessionOrderByWithRelationInput | Prisma.SessionOrderByWithRelationInput[]
  cursor?: Prisma.SessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SessionScalarFieldEnum | Prisma.SessionScalarFieldEnum[]
}

/**
 * Player.mvpOf
 */
export type Player$mvpOfArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Session
   */
  select?: Prisma.SessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Session
   */
  omit?: Prisma.SessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionInclude<ExtArgs> | null
  where?: Prisma.SessionWhereInput
  orderBy?: Prisma.SessionOrderByWithRelationInput | Prisma.SessionOrderByWithRelationInput[]
  cursor?: Prisma.SessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SessionScalarFieldEnum | Prisma.SessionScalarFieldEnum[]
}

/**
 * Player.GameSetToPlayer
 */
export type Player$GameSetToPlayerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSetToPlayer
   */
  select?: Prisma.GameSetToPlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSetToPlayer
   */
  omit?: Prisma.GameSetToPlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSetToPlayerInclude<ExtArgs> | null
  where?: Prisma.GameSetToPlayerWhereInput
  orderBy?: Prisma.GameSetToPlayerOrderByWithRelationInput | Prisma.GameSetToPlayerOrderByWithRelationInput[]
  cursor?: Prisma.GameSetToPlayerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameSetToPlayerScalarFieldEnum | Prisma.GameSetToPlayerScalarFieldEnum[]
}

/**
 * Player without action
 */
export type PlayerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Player
   */
  select?: Prisma.PlayerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Player
   */
  omit?: Prisma.PlayerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerInclude<ExtArgs> | null
}
