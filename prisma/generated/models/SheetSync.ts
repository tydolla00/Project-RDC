
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SheetSync` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SheetSync
 * 
 */
export type SheetSyncModel = runtime.Types.Result.DefaultSelection<Prisma.$SheetSyncPayload>

export type AggregateSheetSync = {
  _count: SheetSyncCountAggregateOutputType | null
  _avg: SheetSyncAvgAggregateOutputType | null
  _sum: SheetSyncSumAggregateOutputType | null
  _min: SheetSyncMinAggregateOutputType | null
  _max: SheetSyncMaxAggregateOutputType | null
}

export type SheetSyncAvgAggregateOutputType = {
  id: number | null
  lastRow: number | null
}

export type SheetSyncSumAggregateOutputType = {
  id: number | null
  lastRow: number | null
}

export type SheetSyncMinAggregateOutputType = {
  id: number | null
  sheetName: string | null
  lastRow: number | null
  lastVideoId: string | null
  lastUpdated: Date | null
  summary: string | null
}

export type SheetSyncMaxAggregateOutputType = {
  id: number | null
  sheetName: string | null
  lastRow: number | null
  lastVideoId: string | null
  lastUpdated: Date | null
  summary: string | null
}

export type SheetSyncCountAggregateOutputType = {
  id: number
  sheetName: number
  lastRow: number
  lastVideoId: number
  lastUpdated: number
  summary: number
  _all: number
}


export type SheetSyncAvgAggregateInputType = {
  id?: true
  lastRow?: true
}

export type SheetSyncSumAggregateInputType = {
  id?: true
  lastRow?: true
}

export type SheetSyncMinAggregateInputType = {
  id?: true
  sheetName?: true
  lastRow?: true
  lastVideoId?: true
  lastUpdated?: true
  summary?: true
}

export type SheetSyncMaxAggregateInputType = {
  id?: true
  sheetName?: true
  lastRow?: true
  lastVideoId?: true
  lastUpdated?: true
  summary?: true
}

export type SheetSyncCountAggregateInputType = {
  id?: true
  sheetName?: true
  lastRow?: true
  lastVideoId?: true
  lastUpdated?: true
  summary?: true
  _all?: true
}

export type SheetSyncAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SheetSync to aggregate.
   */
  where?: Prisma.SheetSyncWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SheetSyncs to fetch.
   */
  orderBy?: Prisma.SheetSyncOrderByWithRelationInput | Prisma.SheetSyncOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SheetSyncWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SheetSyncs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SheetSyncs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SheetSyncs
  **/
  _count?: true | SheetSyncCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SheetSyncAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SheetSyncSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SheetSyncMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SheetSyncMaxAggregateInputType
}

export type GetSheetSyncAggregateType<T extends SheetSyncAggregateArgs> = {
      [P in keyof T & keyof AggregateSheetSync]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSheetSync[P]>
    : Prisma.GetScalarType<T[P], AggregateSheetSync[P]>
}




export type SheetSyncGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SheetSyncWhereInput
  orderBy?: Prisma.SheetSyncOrderByWithAggregationInput | Prisma.SheetSyncOrderByWithAggregationInput[]
  by: Prisma.SheetSyncScalarFieldEnum[] | Prisma.SheetSyncScalarFieldEnum
  having?: Prisma.SheetSyncScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SheetSyncCountAggregateInputType | true
  _avg?: SheetSyncAvgAggregateInputType
  _sum?: SheetSyncSumAggregateInputType
  _min?: SheetSyncMinAggregateInputType
  _max?: SheetSyncMaxAggregateInputType
}

export type SheetSyncGroupByOutputType = {
  id: number
  sheetName: string
  lastRow: number
  lastVideoId: string | null
  lastUpdated: Date
  summary: string | null
  _count: SheetSyncCountAggregateOutputType | null
  _avg: SheetSyncAvgAggregateOutputType | null
  _sum: SheetSyncSumAggregateOutputType | null
  _min: SheetSyncMinAggregateOutputType | null
  _max: SheetSyncMaxAggregateOutputType | null
}

type GetSheetSyncGroupByPayload<T extends SheetSyncGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SheetSyncGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SheetSyncGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SheetSyncGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SheetSyncGroupByOutputType[P]>
      }
    >
  >



export type SheetSyncWhereInput = {
  AND?: Prisma.SheetSyncWhereInput | Prisma.SheetSyncWhereInput[]
  OR?: Prisma.SheetSyncWhereInput[]
  NOT?: Prisma.SheetSyncWhereInput | Prisma.SheetSyncWhereInput[]
  id?: Prisma.IntFilter<"SheetSync"> | number
  sheetName?: Prisma.StringFilter<"SheetSync"> | string
  lastRow?: Prisma.IntFilter<"SheetSync"> | number
  lastVideoId?: Prisma.StringNullableFilter<"SheetSync"> | string | null
  lastUpdated?: Prisma.DateTimeFilter<"SheetSync"> | Date | string
  summary?: Prisma.StringNullableFilter<"SheetSync"> | string | null
}

export type SheetSyncOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sheetName?: Prisma.SortOrder
  lastRow?: Prisma.SortOrder
  lastVideoId?: Prisma.SortOrderInput | Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type SheetSyncWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  sheetName?: string
  AND?: Prisma.SheetSyncWhereInput | Prisma.SheetSyncWhereInput[]
  OR?: Prisma.SheetSyncWhereInput[]
  NOT?: Prisma.SheetSyncWhereInput | Prisma.SheetSyncWhereInput[]
  lastRow?: Prisma.IntFilter<"SheetSync"> | number
  lastVideoId?: Prisma.StringNullableFilter<"SheetSync"> | string | null
  lastUpdated?: Prisma.DateTimeFilter<"SheetSync"> | Date | string
  summary?: Prisma.StringNullableFilter<"SheetSync"> | string | null
}, "id" | "sheetName">

export type SheetSyncOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sheetName?: Prisma.SortOrder
  lastRow?: Prisma.SortOrder
  lastVideoId?: Prisma.SortOrderInput | Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.SheetSyncCountOrderByAggregateInput
  _avg?: Prisma.SheetSyncAvgOrderByAggregateInput
  _max?: Prisma.SheetSyncMaxOrderByAggregateInput
  _min?: Prisma.SheetSyncMinOrderByAggregateInput
  _sum?: Prisma.SheetSyncSumOrderByAggregateInput
}

export type SheetSyncScalarWhereWithAggregatesInput = {
  AND?: Prisma.SheetSyncScalarWhereWithAggregatesInput | Prisma.SheetSyncScalarWhereWithAggregatesInput[]
  OR?: Prisma.SheetSyncScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SheetSyncScalarWhereWithAggregatesInput | Prisma.SheetSyncScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"SheetSync"> | number
  sheetName?: Prisma.StringWithAggregatesFilter<"SheetSync"> | string
  lastRow?: Prisma.IntWithAggregatesFilter<"SheetSync"> | number
  lastVideoId?: Prisma.StringNullableWithAggregatesFilter<"SheetSync"> | string | null
  lastUpdated?: Prisma.DateTimeWithAggregatesFilter<"SheetSync"> | Date | string
  summary?: Prisma.StringNullableWithAggregatesFilter<"SheetSync"> | string | null
}

export type SheetSyncCreateInput = {
  sheetName: string
  lastRow?: number
  lastVideoId?: string | null
  lastUpdated?: Date | string
  summary?: string | null
}

export type SheetSyncUncheckedCreateInput = {
  id?: number
  sheetName: string
  lastRow?: number
  lastVideoId?: string | null
  lastUpdated?: Date | string
  summary?: string | null
}

export type SheetSyncUpdateInput = {
  sheetName?: Prisma.StringFieldUpdateOperationsInput | string
  lastRow?: Prisma.IntFieldUpdateOperationsInput | number
  lastVideoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SheetSyncUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sheetName?: Prisma.StringFieldUpdateOperationsInput | string
  lastRow?: Prisma.IntFieldUpdateOperationsInput | number
  lastVideoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SheetSyncCreateManyInput = {
  id?: number
  sheetName: string
  lastRow?: number
  lastVideoId?: string | null
  lastUpdated?: Date | string
  summary?: string | null
}

export type SheetSyncUpdateManyMutationInput = {
  sheetName?: Prisma.StringFieldUpdateOperationsInput | string
  lastRow?: Prisma.IntFieldUpdateOperationsInput | number
  lastVideoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SheetSyncUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sheetName?: Prisma.StringFieldUpdateOperationsInput | string
  lastRow?: Prisma.IntFieldUpdateOperationsInput | number
  lastVideoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SheetSyncCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sheetName?: Prisma.SortOrder
  lastRow?: Prisma.SortOrder
  lastVideoId?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  summary?: Prisma.SortOrder
}

export type SheetSyncAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  lastRow?: Prisma.SortOrder
}

export type SheetSyncMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sheetName?: Prisma.SortOrder
  lastRow?: Prisma.SortOrder
  lastVideoId?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  summary?: Prisma.SortOrder
}

export type SheetSyncMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sheetName?: Prisma.SortOrder
  lastRow?: Prisma.SortOrder
  lastVideoId?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  summary?: Prisma.SortOrder
}

export type SheetSyncSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  lastRow?: Prisma.SortOrder
}



export type SheetSyncSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sheetName?: boolean
  lastRow?: boolean
  lastVideoId?: boolean
  lastUpdated?: boolean
  summary?: boolean
}, ExtArgs["result"]["sheetSync"]>

export type SheetSyncSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sheetName?: boolean
  lastRow?: boolean
  lastVideoId?: boolean
  lastUpdated?: boolean
  summary?: boolean
}, ExtArgs["result"]["sheetSync"]>

export type SheetSyncSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sheetName?: boolean
  lastRow?: boolean
  lastVideoId?: boolean
  lastUpdated?: boolean
  summary?: boolean
}, ExtArgs["result"]["sheetSync"]>

export type SheetSyncSelectScalar = {
  id?: boolean
  sheetName?: boolean
  lastRow?: boolean
  lastVideoId?: boolean
  lastUpdated?: boolean
  summary?: boolean
}

export type SheetSyncOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sheetName" | "lastRow" | "lastVideoId" | "lastUpdated" | "summary", ExtArgs["result"]["sheetSync"]>

export type $SheetSyncPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SheetSync"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    sheetName: string
    lastRow: number
    lastVideoId: string | null
    lastUpdated: Date
    summary: string | null
  }, ExtArgs["result"]["sheetSync"]>
  composites: {}
}

export type SheetSyncGetPayload<S extends boolean | null | undefined | SheetSyncDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload, S>

export type SheetSyncCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SheetSyncFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SheetSyncCountAggregateInputType | true
  }

export interface SheetSyncDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SheetSync'], meta: { name: 'SheetSync' } }
  /**
   * Find zero or one SheetSync that matches the filter.
   * @param {SheetSyncFindUniqueArgs} args - Arguments to find a SheetSync
   * @example
   * // Get one SheetSync
   * const sheetSync = await prisma.sheetSync.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SheetSyncFindUniqueArgs>(args: Prisma.SelectSubset<T, SheetSyncFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SheetSyncClient<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SheetSync that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SheetSyncFindUniqueOrThrowArgs} args - Arguments to find a SheetSync
   * @example
   * // Get one SheetSync
   * const sheetSync = await prisma.sheetSync.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SheetSyncFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SheetSyncFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SheetSyncClient<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SheetSync that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SheetSyncFindFirstArgs} args - Arguments to find a SheetSync
   * @example
   * // Get one SheetSync
   * const sheetSync = await prisma.sheetSync.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SheetSyncFindFirstArgs>(args?: Prisma.SelectSubset<T, SheetSyncFindFirstArgs<ExtArgs>>): Prisma.Prisma__SheetSyncClient<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SheetSync that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SheetSyncFindFirstOrThrowArgs} args - Arguments to find a SheetSync
   * @example
   * // Get one SheetSync
   * const sheetSync = await prisma.sheetSync.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SheetSyncFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SheetSyncFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SheetSyncClient<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SheetSyncs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SheetSyncFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SheetSyncs
   * const sheetSyncs = await prisma.sheetSync.findMany()
   * 
   * // Get first 10 SheetSyncs
   * const sheetSyncs = await prisma.sheetSync.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const sheetSyncWithIdOnly = await prisma.sheetSync.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SheetSyncFindManyArgs>(args?: Prisma.SelectSubset<T, SheetSyncFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SheetSync.
   * @param {SheetSyncCreateArgs} args - Arguments to create a SheetSync.
   * @example
   * // Create one SheetSync
   * const SheetSync = await prisma.sheetSync.create({
   *   data: {
   *     // ... data to create a SheetSync
   *   }
   * })
   * 
   */
  create<T extends SheetSyncCreateArgs>(args: Prisma.SelectSubset<T, SheetSyncCreateArgs<ExtArgs>>): Prisma.Prisma__SheetSyncClient<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SheetSyncs.
   * @param {SheetSyncCreateManyArgs} args - Arguments to create many SheetSyncs.
   * @example
   * // Create many SheetSyncs
   * const sheetSync = await prisma.sheetSync.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SheetSyncCreateManyArgs>(args?: Prisma.SelectSubset<T, SheetSyncCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SheetSyncs and returns the data saved in the database.
   * @param {SheetSyncCreateManyAndReturnArgs} args - Arguments to create many SheetSyncs.
   * @example
   * // Create many SheetSyncs
   * const sheetSync = await prisma.sheetSync.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SheetSyncs and only return the `id`
   * const sheetSyncWithIdOnly = await prisma.sheetSync.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SheetSyncCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SheetSyncCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SheetSync.
   * @param {SheetSyncDeleteArgs} args - Arguments to delete one SheetSync.
   * @example
   * // Delete one SheetSync
   * const SheetSync = await prisma.sheetSync.delete({
   *   where: {
   *     // ... filter to delete one SheetSync
   *   }
   * })
   * 
   */
  delete<T extends SheetSyncDeleteArgs>(args: Prisma.SelectSubset<T, SheetSyncDeleteArgs<ExtArgs>>): Prisma.Prisma__SheetSyncClient<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SheetSync.
   * @param {SheetSyncUpdateArgs} args - Arguments to update one SheetSync.
   * @example
   * // Update one SheetSync
   * const sheetSync = await prisma.sheetSync.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SheetSyncUpdateArgs>(args: Prisma.SelectSubset<T, SheetSyncUpdateArgs<ExtArgs>>): Prisma.Prisma__SheetSyncClient<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SheetSyncs.
   * @param {SheetSyncDeleteManyArgs} args - Arguments to filter SheetSyncs to delete.
   * @example
   * // Delete a few SheetSyncs
   * const { count } = await prisma.sheetSync.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SheetSyncDeleteManyArgs>(args?: Prisma.SelectSubset<T, SheetSyncDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SheetSyncs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SheetSyncUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SheetSyncs
   * const sheetSync = await prisma.sheetSync.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SheetSyncUpdateManyArgs>(args: Prisma.SelectSubset<T, SheetSyncUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SheetSyncs and returns the data updated in the database.
   * @param {SheetSyncUpdateManyAndReturnArgs} args - Arguments to update many SheetSyncs.
   * @example
   * // Update many SheetSyncs
   * const sheetSync = await prisma.sheetSync.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SheetSyncs and only return the `id`
   * const sheetSyncWithIdOnly = await prisma.sheetSync.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SheetSyncUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SheetSyncUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SheetSync.
   * @param {SheetSyncUpsertArgs} args - Arguments to update or create a SheetSync.
   * @example
   * // Update or create a SheetSync
   * const sheetSync = await prisma.sheetSync.upsert({
   *   create: {
   *     // ... data to create a SheetSync
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SheetSync we want to update
   *   }
   * })
   */
  upsert<T extends SheetSyncUpsertArgs>(args: Prisma.SelectSubset<T, SheetSyncUpsertArgs<ExtArgs>>): Prisma.Prisma__SheetSyncClient<runtime.Types.Result.GetResult<Prisma.$SheetSyncPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SheetSyncs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SheetSyncCountArgs} args - Arguments to filter SheetSyncs to count.
   * @example
   * // Count the number of SheetSyncs
   * const count = await prisma.sheetSync.count({
   *   where: {
   *     // ... the filter for the SheetSyncs we want to count
   *   }
   * })
  **/
  count<T extends SheetSyncCountArgs>(
    args?: Prisma.Subset<T, SheetSyncCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SheetSyncCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SheetSync.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SheetSyncAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SheetSyncAggregateArgs>(args: Prisma.Subset<T, SheetSyncAggregateArgs>): Prisma.PrismaPromise<GetSheetSyncAggregateType<T>>

  /**
   * Group by SheetSync.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SheetSyncGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SheetSyncGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SheetSyncGroupByArgs['orderBy'] }
      : { orderBy?: SheetSyncGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SheetSyncGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSheetSyncGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SheetSync model
 */
readonly fields: SheetSyncFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SheetSync.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SheetSyncClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SheetSync model
 */
export interface SheetSyncFieldRefs {
  readonly id: Prisma.FieldRef<"SheetSync", 'Int'>
  readonly sheetName: Prisma.FieldRef<"SheetSync", 'String'>
  readonly lastRow: Prisma.FieldRef<"SheetSync", 'Int'>
  readonly lastVideoId: Prisma.FieldRef<"SheetSync", 'String'>
  readonly lastUpdated: Prisma.FieldRef<"SheetSync", 'DateTime'>
  readonly summary: Prisma.FieldRef<"SheetSync", 'String'>
}
    

// Custom InputTypes
/**
 * SheetSync findUnique
 */
export type SheetSyncFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * Filter, which SheetSync to fetch.
   */
  where: Prisma.SheetSyncWhereUniqueInput
}

/**
 * SheetSync findUniqueOrThrow
 */
export type SheetSyncFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * Filter, which SheetSync to fetch.
   */
  where: Prisma.SheetSyncWhereUniqueInput
}

/**
 * SheetSync findFirst
 */
export type SheetSyncFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * Filter, which SheetSync to fetch.
   */
  where?: Prisma.SheetSyncWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SheetSyncs to fetch.
   */
  orderBy?: Prisma.SheetSyncOrderByWithRelationInput | Prisma.SheetSyncOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SheetSyncs.
   */
  cursor?: Prisma.SheetSyncWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SheetSyncs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SheetSyncs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SheetSyncs.
   */
  distinct?: Prisma.SheetSyncScalarFieldEnum | Prisma.SheetSyncScalarFieldEnum[]
}

/**
 * SheetSync findFirstOrThrow
 */
export type SheetSyncFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * Filter, which SheetSync to fetch.
   */
  where?: Prisma.SheetSyncWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SheetSyncs to fetch.
   */
  orderBy?: Prisma.SheetSyncOrderByWithRelationInput | Prisma.SheetSyncOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SheetSyncs.
   */
  cursor?: Prisma.SheetSyncWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SheetSyncs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SheetSyncs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SheetSyncs.
   */
  distinct?: Prisma.SheetSyncScalarFieldEnum | Prisma.SheetSyncScalarFieldEnum[]
}

/**
 * SheetSync findMany
 */
export type SheetSyncFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * Filter, which SheetSyncs to fetch.
   */
  where?: Prisma.SheetSyncWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SheetSyncs to fetch.
   */
  orderBy?: Prisma.SheetSyncOrderByWithRelationInput | Prisma.SheetSyncOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SheetSyncs.
   */
  cursor?: Prisma.SheetSyncWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SheetSyncs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SheetSyncs.
   */
  skip?: number
  distinct?: Prisma.SheetSyncScalarFieldEnum | Prisma.SheetSyncScalarFieldEnum[]
}

/**
 * SheetSync create
 */
export type SheetSyncCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * The data needed to create a SheetSync.
   */
  data: Prisma.XOR<Prisma.SheetSyncCreateInput, Prisma.SheetSyncUncheckedCreateInput>
}

/**
 * SheetSync createMany
 */
export type SheetSyncCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SheetSyncs.
   */
  data: Prisma.SheetSyncCreateManyInput | Prisma.SheetSyncCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SheetSync createManyAndReturn
 */
export type SheetSyncCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * The data used to create many SheetSyncs.
   */
  data: Prisma.SheetSyncCreateManyInput | Prisma.SheetSyncCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SheetSync update
 */
export type SheetSyncUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * The data needed to update a SheetSync.
   */
  data: Prisma.XOR<Prisma.SheetSyncUpdateInput, Prisma.SheetSyncUncheckedUpdateInput>
  /**
   * Choose, which SheetSync to update.
   */
  where: Prisma.SheetSyncWhereUniqueInput
}

/**
 * SheetSync updateMany
 */
export type SheetSyncUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SheetSyncs.
   */
  data: Prisma.XOR<Prisma.SheetSyncUpdateManyMutationInput, Prisma.SheetSyncUncheckedUpdateManyInput>
  /**
   * Filter which SheetSyncs to update
   */
  where?: Prisma.SheetSyncWhereInput
  /**
   * Limit how many SheetSyncs to update.
   */
  limit?: number
}

/**
 * SheetSync updateManyAndReturn
 */
export type SheetSyncUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * The data used to update SheetSyncs.
   */
  data: Prisma.XOR<Prisma.SheetSyncUpdateManyMutationInput, Prisma.SheetSyncUncheckedUpdateManyInput>
  /**
   * Filter which SheetSyncs to update
   */
  where?: Prisma.SheetSyncWhereInput
  /**
   * Limit how many SheetSyncs to update.
   */
  limit?: number
}

/**
 * SheetSync upsert
 */
export type SheetSyncUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * The filter to search for the SheetSync to update in case it exists.
   */
  where: Prisma.SheetSyncWhereUniqueInput
  /**
   * In case the SheetSync found by the `where` argument doesn't exist, create a new SheetSync with this data.
   */
  create: Prisma.XOR<Prisma.SheetSyncCreateInput, Prisma.SheetSyncUncheckedCreateInput>
  /**
   * In case the SheetSync was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SheetSyncUpdateInput, Prisma.SheetSyncUncheckedUpdateInput>
}

/**
 * SheetSync delete
 */
export type SheetSyncDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
  /**
   * Filter which SheetSync to delete.
   */
  where: Prisma.SheetSyncWhereUniqueInput
}

/**
 * SheetSync deleteMany
 */
export type SheetSyncDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SheetSyncs to delete
   */
  where?: Prisma.SheetSyncWhereInput
  /**
   * Limit how many SheetSyncs to delete.
   */
  limit?: number
}

/**
 * SheetSync without action
 */
export type SheetSyncDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SheetSync
   */
  select?: Prisma.SheetSyncSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SheetSync
   */
  omit?: Prisma.SheetSyncOmit<ExtArgs> | null
}
