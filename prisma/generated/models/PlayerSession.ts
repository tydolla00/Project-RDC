
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PlayerSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlayerSession
 * 
 */
export type PlayerSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$PlayerSessionPayload>

export type AggregatePlayerSession = {
  _count: PlayerSessionCountAggregateOutputType | null
  _avg: PlayerSessionAvgAggregateOutputType | null
  _sum: PlayerSessionSumAggregateOutputType | null
  _min: PlayerSessionMinAggregateOutputType | null
  _max: PlayerSessionMaxAggregateOutputType | null
}

export type PlayerSessionAvgAggregateOutputType = {
  playerSessionId: number | null
  playerId: number | null
  sessionId: number | null
  matchId: number | null
  setId: number | null
}

export type PlayerSessionSumAggregateOutputType = {
  playerSessionId: number | null
  playerId: number | null
  sessionId: number | null
  matchId: number | null
  setId: number | null
}

export type PlayerSessionMinAggregateOutputType = {
  playerSessionId: number | null
  playerId: number | null
  sessionId: number | null
  matchId: number | null
  setId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlayerSessionMaxAggregateOutputType = {
  playerSessionId: number | null
  playerId: number | null
  sessionId: number | null
  matchId: number | null
  setId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlayerSessionCountAggregateOutputType = {
  playerSessionId: number
  playerId: number
  sessionId: number
  matchId: number
  setId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PlayerSessionAvgAggregateInputType = {
  playerSessionId?: true
  playerId?: true
  sessionId?: true
  matchId?: true
  setId?: true
}

export type PlayerSessionSumAggregateInputType = {
  playerSessionId?: true
  playerId?: true
  sessionId?: true
  matchId?: true
  setId?: true
}

export type PlayerSessionMinAggregateInputType = {
  playerSessionId?: true
  playerId?: true
  sessionId?: true
  matchId?: true
  setId?: true
  createdAt?: true
  updatedAt?: true
}

export type PlayerSessionMaxAggregateInputType = {
  playerSessionId?: true
  playerId?: true
  sessionId?: true
  matchId?: true
  setId?: true
  createdAt?: true
  updatedAt?: true
}

export type PlayerSessionCountAggregateInputType = {
  playerSessionId?: true
  playerId?: true
  sessionId?: true
  matchId?: true
  setId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PlayerSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlayerSession to aggregate.
   */
  where?: Prisma.PlayerSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayerSessions to fetch.
   */
  orderBy?: Prisma.PlayerSessionOrderByWithRelationInput | Prisma.PlayerSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlayerSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayerSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayerSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlayerSessions
  **/
  _count?: true | PlayerSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlayerSessionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlayerSessionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlayerSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlayerSessionMaxAggregateInputType
}

export type GetPlayerSessionAggregateType<T extends PlayerSessionAggregateArgs> = {
      [P in keyof T & keyof AggregatePlayerSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlayerSession[P]>
    : Prisma.GetScalarType<T[P], AggregatePlayerSession[P]>
}




export type PlayerSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerSessionWhereInput
  orderBy?: Prisma.PlayerSessionOrderByWithAggregationInput | Prisma.PlayerSessionOrderByWithAggregationInput[]
  by: Prisma.PlayerSessionScalarFieldEnum[] | Prisma.PlayerSessionScalarFieldEnum
  having?: Prisma.PlayerSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlayerSessionCountAggregateInputType | true
  _avg?: PlayerSessionAvgAggregateInputType
  _sum?: PlayerSessionSumAggregateInputType
  _min?: PlayerSessionMinAggregateInputType
  _max?: PlayerSessionMaxAggregateInputType
}

export type PlayerSessionGroupByOutputType = {
  playerSessionId: number
  playerId: number
  sessionId: number
  matchId: number
  setId: number
  createdAt: Date
  updatedAt: Date
  _count: PlayerSessionCountAggregateOutputType | null
  _avg: PlayerSessionAvgAggregateOutputType | null
  _sum: PlayerSessionSumAggregateOutputType | null
  _min: PlayerSessionMinAggregateOutputType | null
  _max: PlayerSessionMaxAggregateOutputType | null
}

type GetPlayerSessionGroupByPayload<T extends PlayerSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlayerSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlayerSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlayerSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlayerSessionGroupByOutputType[P]>
      }
    >
  >



export type PlayerSessionWhereInput = {
  AND?: Prisma.PlayerSessionWhereInput | Prisma.PlayerSessionWhereInput[]
  OR?: Prisma.PlayerSessionWhereInput[]
  NOT?: Prisma.PlayerSessionWhereInput | Prisma.PlayerSessionWhereInput[]
  playerSessionId?: Prisma.IntFilter<"PlayerSession"> | number
  playerId?: Prisma.IntFilter<"PlayerSession"> | number
  sessionId?: Prisma.IntFilter<"PlayerSession"> | number
  matchId?: Prisma.IntFilter<"PlayerSession"> | number
  setId?: Prisma.IntFilter<"PlayerSession"> | number
  createdAt?: Prisma.DateTimeFilter<"PlayerSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlayerSession"> | Date | string
  player?: Prisma.XOR<Prisma.PlayerScalarRelationFilter, Prisma.PlayerWhereInput>
  playerStats?: Prisma.PlayerStatListRelationFilter
  match?: Prisma.XOR<Prisma.MatchScalarRelationFilter, Prisma.MatchWhereInput>
  set?: Prisma.XOR<Prisma.GameSetScalarRelationFilter, Prisma.GameSetWhereInput>
}

export type PlayerSessionOrderByWithRelationInput = {
  playerSessionId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  setId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  player?: Prisma.PlayerOrderByWithRelationInput
  playerStats?: Prisma.PlayerStatOrderByRelationAggregateInput
  match?: Prisma.MatchOrderByWithRelationInput
  set?: Prisma.GameSetOrderByWithRelationInput
}

export type PlayerSessionWhereUniqueInput = Prisma.AtLeast<{
  playerSessionId?: number
  AND?: Prisma.PlayerSessionWhereInput | Prisma.PlayerSessionWhereInput[]
  OR?: Prisma.PlayerSessionWhereInput[]
  NOT?: Prisma.PlayerSessionWhereInput | Prisma.PlayerSessionWhereInput[]
  playerId?: Prisma.IntFilter<"PlayerSession"> | number
  sessionId?: Prisma.IntFilter<"PlayerSession"> | number
  matchId?: Prisma.IntFilter<"PlayerSession"> | number
  setId?: Prisma.IntFilter<"PlayerSession"> | number
  createdAt?: Prisma.DateTimeFilter<"PlayerSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlayerSession"> | Date | string
  player?: Prisma.XOR<Prisma.PlayerScalarRelationFilter, Prisma.PlayerWhereInput>
  playerStats?: Prisma.PlayerStatListRelationFilter
  match?: Prisma.XOR<Prisma.MatchScalarRelationFilter, Prisma.MatchWhereInput>
  set?: Prisma.XOR<Prisma.GameSetScalarRelationFilter, Prisma.GameSetWhereInput>
}, "playerSessionId">

export type PlayerSessionOrderByWithAggregationInput = {
  playerSessionId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  setId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PlayerSessionCountOrderByAggregateInput
  _avg?: Prisma.PlayerSessionAvgOrderByAggregateInput
  _max?: Prisma.PlayerSessionMaxOrderByAggregateInput
  _min?: Prisma.PlayerSessionMinOrderByAggregateInput
  _sum?: Prisma.PlayerSessionSumOrderByAggregateInput
}

export type PlayerSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlayerSessionScalarWhereWithAggregatesInput | Prisma.PlayerSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlayerSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlayerSessionScalarWhereWithAggregatesInput | Prisma.PlayerSessionScalarWhereWithAggregatesInput[]
  playerSessionId?: Prisma.IntWithAggregatesFilter<"PlayerSession"> | number
  playerId?: Prisma.IntWithAggregatesFilter<"PlayerSession"> | number
  sessionId?: Prisma.IntWithAggregatesFilter<"PlayerSession"> | number
  matchId?: Prisma.IntWithAggregatesFilter<"PlayerSession"> | number
  setId?: Prisma.IntWithAggregatesFilter<"PlayerSession"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PlayerSession"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PlayerSession"> | Date | string
}

export type PlayerSessionCreateInput = {
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  player: Prisma.PlayerCreateNestedOneWithoutPlayerSessionsInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerSessionInput
  match: Prisma.MatchCreateNestedOneWithoutPlayerSessionsInput
  set: Prisma.GameSetCreateNestedOneWithoutPlayerSessionsInput
}

export type PlayerSessionUncheckedCreateInput = {
  playerSessionId?: number
  playerId: number
  sessionId: number
  matchId: number
  setId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerSessionInput
}

export type PlayerSessionUpdateInput = {
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  player?: Prisma.PlayerUpdateOneRequiredWithoutPlayerSessionsNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerSessionNestedInput
  match?: Prisma.MatchUpdateOneRequiredWithoutPlayerSessionsNestedInput
  set?: Prisma.GameSetUpdateOneRequiredWithoutPlayerSessionsNestedInput
}

export type PlayerSessionUncheckedUpdateInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerSessionNestedInput
}

export type PlayerSessionCreateManyInput = {
  playerSessionId?: number
  playerId: number
  sessionId: number
  matchId: number
  setId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlayerSessionUpdateManyMutationInput = {
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerSessionUncheckedUpdateManyInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerSessionListRelationFilter = {
  every?: Prisma.PlayerSessionWhereInput
  some?: Prisma.PlayerSessionWhereInput
  none?: Prisma.PlayerSessionWhereInput
}

export type PlayerSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PlayerSessionCountOrderByAggregateInput = {
  playerSessionId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  setId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlayerSessionAvgOrderByAggregateInput = {
  playerSessionId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  setId?: Prisma.SortOrder
}

export type PlayerSessionMaxOrderByAggregateInput = {
  playerSessionId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  setId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlayerSessionMinOrderByAggregateInput = {
  playerSessionId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  setId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlayerSessionSumOrderByAggregateInput = {
  playerSessionId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  setId?: Prisma.SortOrder
}

export type PlayerSessionScalarRelationFilter = {
  is?: Prisma.PlayerSessionWhereInput
  isNot?: Prisma.PlayerSessionWhereInput
}

export type PlayerSessionCreateNestedManyWithoutPlayerInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput> | Prisma.PlayerSessionCreateWithoutPlayerInput[] | Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutPlayerInput | Prisma.PlayerSessionCreateOrConnectWithoutPlayerInput[]
  createMany?: Prisma.PlayerSessionCreateManyPlayerInputEnvelope
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
}

export type PlayerSessionUncheckedCreateNestedManyWithoutPlayerInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput> | Prisma.PlayerSessionCreateWithoutPlayerInput[] | Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutPlayerInput | Prisma.PlayerSessionCreateOrConnectWithoutPlayerInput[]
  createMany?: Prisma.PlayerSessionCreateManyPlayerInputEnvelope
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
}

export type PlayerSessionUpdateManyWithoutPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput> | Prisma.PlayerSessionCreateWithoutPlayerInput[] | Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutPlayerInput | Prisma.PlayerSessionCreateOrConnectWithoutPlayerInput[]
  upsert?: Prisma.PlayerSessionUpsertWithWhereUniqueWithoutPlayerInput | Prisma.PlayerSessionUpsertWithWhereUniqueWithoutPlayerInput[]
  createMany?: Prisma.PlayerSessionCreateManyPlayerInputEnvelope
  set?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  disconnect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  delete?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  update?: Prisma.PlayerSessionUpdateWithWhereUniqueWithoutPlayerInput | Prisma.PlayerSessionUpdateWithWhereUniqueWithoutPlayerInput[]
  updateMany?: Prisma.PlayerSessionUpdateManyWithWhereWithoutPlayerInput | Prisma.PlayerSessionUpdateManyWithWhereWithoutPlayerInput[]
  deleteMany?: Prisma.PlayerSessionScalarWhereInput | Prisma.PlayerSessionScalarWhereInput[]
}

export type PlayerSessionUncheckedUpdateManyWithoutPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput> | Prisma.PlayerSessionCreateWithoutPlayerInput[] | Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutPlayerInput | Prisma.PlayerSessionCreateOrConnectWithoutPlayerInput[]
  upsert?: Prisma.PlayerSessionUpsertWithWhereUniqueWithoutPlayerInput | Prisma.PlayerSessionUpsertWithWhereUniqueWithoutPlayerInput[]
  createMany?: Prisma.PlayerSessionCreateManyPlayerInputEnvelope
  set?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  disconnect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  delete?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  update?: Prisma.PlayerSessionUpdateWithWhereUniqueWithoutPlayerInput | Prisma.PlayerSessionUpdateWithWhereUniqueWithoutPlayerInput[]
  updateMany?: Prisma.PlayerSessionUpdateManyWithWhereWithoutPlayerInput | Prisma.PlayerSessionUpdateManyWithWhereWithoutPlayerInput[]
  deleteMany?: Prisma.PlayerSessionScalarWhereInput | Prisma.PlayerSessionScalarWhereInput[]
}

export type PlayerSessionCreateNestedManyWithoutSetInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutSetInput, Prisma.PlayerSessionUncheckedCreateWithoutSetInput> | Prisma.PlayerSessionCreateWithoutSetInput[] | Prisma.PlayerSessionUncheckedCreateWithoutSetInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutSetInput | Prisma.PlayerSessionCreateOrConnectWithoutSetInput[]
  createMany?: Prisma.PlayerSessionCreateManySetInputEnvelope
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
}

export type PlayerSessionUncheckedCreateNestedManyWithoutSetInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutSetInput, Prisma.PlayerSessionUncheckedCreateWithoutSetInput> | Prisma.PlayerSessionCreateWithoutSetInput[] | Prisma.PlayerSessionUncheckedCreateWithoutSetInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutSetInput | Prisma.PlayerSessionCreateOrConnectWithoutSetInput[]
  createMany?: Prisma.PlayerSessionCreateManySetInputEnvelope
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
}

export type PlayerSessionUpdateManyWithoutSetNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutSetInput, Prisma.PlayerSessionUncheckedCreateWithoutSetInput> | Prisma.PlayerSessionCreateWithoutSetInput[] | Prisma.PlayerSessionUncheckedCreateWithoutSetInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutSetInput | Prisma.PlayerSessionCreateOrConnectWithoutSetInput[]
  upsert?: Prisma.PlayerSessionUpsertWithWhereUniqueWithoutSetInput | Prisma.PlayerSessionUpsertWithWhereUniqueWithoutSetInput[]
  createMany?: Prisma.PlayerSessionCreateManySetInputEnvelope
  set?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  disconnect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  delete?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  update?: Prisma.PlayerSessionUpdateWithWhereUniqueWithoutSetInput | Prisma.PlayerSessionUpdateWithWhereUniqueWithoutSetInput[]
  updateMany?: Prisma.PlayerSessionUpdateManyWithWhereWithoutSetInput | Prisma.PlayerSessionUpdateManyWithWhereWithoutSetInput[]
  deleteMany?: Prisma.PlayerSessionScalarWhereInput | Prisma.PlayerSessionScalarWhereInput[]
}

export type PlayerSessionUncheckedUpdateManyWithoutSetNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutSetInput, Prisma.PlayerSessionUncheckedCreateWithoutSetInput> | Prisma.PlayerSessionCreateWithoutSetInput[] | Prisma.PlayerSessionUncheckedCreateWithoutSetInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutSetInput | Prisma.PlayerSessionCreateOrConnectWithoutSetInput[]
  upsert?: Prisma.PlayerSessionUpsertWithWhereUniqueWithoutSetInput | Prisma.PlayerSessionUpsertWithWhereUniqueWithoutSetInput[]
  createMany?: Prisma.PlayerSessionCreateManySetInputEnvelope
  set?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  disconnect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  delete?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  update?: Prisma.PlayerSessionUpdateWithWhereUniqueWithoutSetInput | Prisma.PlayerSessionUpdateWithWhereUniqueWithoutSetInput[]
  updateMany?: Prisma.PlayerSessionUpdateManyWithWhereWithoutSetInput | Prisma.PlayerSessionUpdateManyWithWhereWithoutSetInput[]
  deleteMany?: Prisma.PlayerSessionScalarWhereInput | Prisma.PlayerSessionScalarWhereInput[]
}

export type PlayerSessionCreateNestedManyWithoutMatchInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutMatchInput, Prisma.PlayerSessionUncheckedCreateWithoutMatchInput> | Prisma.PlayerSessionCreateWithoutMatchInput[] | Prisma.PlayerSessionUncheckedCreateWithoutMatchInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutMatchInput | Prisma.PlayerSessionCreateOrConnectWithoutMatchInput[]
  createMany?: Prisma.PlayerSessionCreateManyMatchInputEnvelope
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
}

export type PlayerSessionUncheckedCreateNestedManyWithoutMatchInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutMatchInput, Prisma.PlayerSessionUncheckedCreateWithoutMatchInput> | Prisma.PlayerSessionCreateWithoutMatchInput[] | Prisma.PlayerSessionUncheckedCreateWithoutMatchInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutMatchInput | Prisma.PlayerSessionCreateOrConnectWithoutMatchInput[]
  createMany?: Prisma.PlayerSessionCreateManyMatchInputEnvelope
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
}

export type PlayerSessionUpdateManyWithoutMatchNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutMatchInput, Prisma.PlayerSessionUncheckedCreateWithoutMatchInput> | Prisma.PlayerSessionCreateWithoutMatchInput[] | Prisma.PlayerSessionUncheckedCreateWithoutMatchInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutMatchInput | Prisma.PlayerSessionCreateOrConnectWithoutMatchInput[]
  upsert?: Prisma.PlayerSessionUpsertWithWhereUniqueWithoutMatchInput | Prisma.PlayerSessionUpsertWithWhereUniqueWithoutMatchInput[]
  createMany?: Prisma.PlayerSessionCreateManyMatchInputEnvelope
  set?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  disconnect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  delete?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  update?: Prisma.PlayerSessionUpdateWithWhereUniqueWithoutMatchInput | Prisma.PlayerSessionUpdateWithWhereUniqueWithoutMatchInput[]
  updateMany?: Prisma.PlayerSessionUpdateManyWithWhereWithoutMatchInput | Prisma.PlayerSessionUpdateManyWithWhereWithoutMatchInput[]
  deleteMany?: Prisma.PlayerSessionScalarWhereInput | Prisma.PlayerSessionScalarWhereInput[]
}

export type PlayerSessionUncheckedUpdateManyWithoutMatchNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutMatchInput, Prisma.PlayerSessionUncheckedCreateWithoutMatchInput> | Prisma.PlayerSessionCreateWithoutMatchInput[] | Prisma.PlayerSessionUncheckedCreateWithoutMatchInput[]
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutMatchInput | Prisma.PlayerSessionCreateOrConnectWithoutMatchInput[]
  upsert?: Prisma.PlayerSessionUpsertWithWhereUniqueWithoutMatchInput | Prisma.PlayerSessionUpsertWithWhereUniqueWithoutMatchInput[]
  createMany?: Prisma.PlayerSessionCreateManyMatchInputEnvelope
  set?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  disconnect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  delete?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  connect?: Prisma.PlayerSessionWhereUniqueInput | Prisma.PlayerSessionWhereUniqueInput[]
  update?: Prisma.PlayerSessionUpdateWithWhereUniqueWithoutMatchInput | Prisma.PlayerSessionUpdateWithWhereUniqueWithoutMatchInput[]
  updateMany?: Prisma.PlayerSessionUpdateManyWithWhereWithoutMatchInput | Prisma.PlayerSessionUpdateManyWithWhereWithoutMatchInput[]
  deleteMany?: Prisma.PlayerSessionScalarWhereInput | Prisma.PlayerSessionScalarWhereInput[]
}

export type PlayerSessionCreateNestedOneWithoutPlayerStatsInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerStatsInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerStatsInput>
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutPlayerStatsInput
  connect?: Prisma.PlayerSessionWhereUniqueInput
}

export type PlayerSessionUpdateOneRequiredWithoutPlayerStatsNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerStatsInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerStatsInput>
  connectOrCreate?: Prisma.PlayerSessionCreateOrConnectWithoutPlayerStatsInput
  upsert?: Prisma.PlayerSessionUpsertWithoutPlayerStatsInput
  connect?: Prisma.PlayerSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlayerSessionUpdateToOneWithWhereWithoutPlayerStatsInput, Prisma.PlayerSessionUpdateWithoutPlayerStatsInput>, Prisma.PlayerSessionUncheckedUpdateWithoutPlayerStatsInput>
}

export type PlayerSessionCreateWithoutPlayerInput = {
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerSessionInput
  match: Prisma.MatchCreateNestedOneWithoutPlayerSessionsInput
  set: Prisma.GameSetCreateNestedOneWithoutPlayerSessionsInput
}

export type PlayerSessionUncheckedCreateWithoutPlayerInput = {
  playerSessionId?: number
  sessionId: number
  matchId: number
  setId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerSessionInput
}

export type PlayerSessionCreateOrConnectWithoutPlayerInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput>
}

export type PlayerSessionCreateManyPlayerInputEnvelope = {
  data: Prisma.PlayerSessionCreateManyPlayerInput | Prisma.PlayerSessionCreateManyPlayerInput[]
  skipDuplicates?: boolean
}

export type PlayerSessionUpsertWithWhereUniqueWithoutPlayerInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerSessionUpdateWithoutPlayerInput, Prisma.PlayerSessionUncheckedUpdateWithoutPlayerInput>
  create: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerInput>
}

export type PlayerSessionUpdateWithWhereUniqueWithoutPlayerInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerSessionUpdateWithoutPlayerInput, Prisma.PlayerSessionUncheckedUpdateWithoutPlayerInput>
}

export type PlayerSessionUpdateManyWithWhereWithoutPlayerInput = {
  where: Prisma.PlayerSessionScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerSessionUpdateManyMutationInput, Prisma.PlayerSessionUncheckedUpdateManyWithoutPlayerInput>
}

export type PlayerSessionScalarWhereInput = {
  AND?: Prisma.PlayerSessionScalarWhereInput | Prisma.PlayerSessionScalarWhereInput[]
  OR?: Prisma.PlayerSessionScalarWhereInput[]
  NOT?: Prisma.PlayerSessionScalarWhereInput | Prisma.PlayerSessionScalarWhereInput[]
  playerSessionId?: Prisma.IntFilter<"PlayerSession"> | number
  playerId?: Prisma.IntFilter<"PlayerSession"> | number
  sessionId?: Prisma.IntFilter<"PlayerSession"> | number
  matchId?: Prisma.IntFilter<"PlayerSession"> | number
  setId?: Prisma.IntFilter<"PlayerSession"> | number
  createdAt?: Prisma.DateTimeFilter<"PlayerSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlayerSession"> | Date | string
}

export type PlayerSessionCreateWithoutSetInput = {
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  player: Prisma.PlayerCreateNestedOneWithoutPlayerSessionsInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerSessionInput
  match: Prisma.MatchCreateNestedOneWithoutPlayerSessionsInput
}

export type PlayerSessionUncheckedCreateWithoutSetInput = {
  playerSessionId?: number
  playerId: number
  sessionId: number
  matchId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerSessionInput
}

export type PlayerSessionCreateOrConnectWithoutSetInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerSessionCreateWithoutSetInput, Prisma.PlayerSessionUncheckedCreateWithoutSetInput>
}

export type PlayerSessionCreateManySetInputEnvelope = {
  data: Prisma.PlayerSessionCreateManySetInput | Prisma.PlayerSessionCreateManySetInput[]
  skipDuplicates?: boolean
}

export type PlayerSessionUpsertWithWhereUniqueWithoutSetInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerSessionUpdateWithoutSetInput, Prisma.PlayerSessionUncheckedUpdateWithoutSetInput>
  create: Prisma.XOR<Prisma.PlayerSessionCreateWithoutSetInput, Prisma.PlayerSessionUncheckedCreateWithoutSetInput>
}

export type PlayerSessionUpdateWithWhereUniqueWithoutSetInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerSessionUpdateWithoutSetInput, Prisma.PlayerSessionUncheckedUpdateWithoutSetInput>
}

export type PlayerSessionUpdateManyWithWhereWithoutSetInput = {
  where: Prisma.PlayerSessionScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerSessionUpdateManyMutationInput, Prisma.PlayerSessionUncheckedUpdateManyWithoutSetInput>
}

export type PlayerSessionCreateWithoutMatchInput = {
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  player: Prisma.PlayerCreateNestedOneWithoutPlayerSessionsInput
  playerStats?: Prisma.PlayerStatCreateNestedManyWithoutPlayerSessionInput
  set: Prisma.GameSetCreateNestedOneWithoutPlayerSessionsInput
}

export type PlayerSessionUncheckedCreateWithoutMatchInput = {
  playerSessionId?: number
  playerId: number
  sessionId: number
  setId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  playerStats?: Prisma.PlayerStatUncheckedCreateNestedManyWithoutPlayerSessionInput
}

export type PlayerSessionCreateOrConnectWithoutMatchInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerSessionCreateWithoutMatchInput, Prisma.PlayerSessionUncheckedCreateWithoutMatchInput>
}

export type PlayerSessionCreateManyMatchInputEnvelope = {
  data: Prisma.PlayerSessionCreateManyMatchInput | Prisma.PlayerSessionCreateManyMatchInput[]
  skipDuplicates?: boolean
}

export type PlayerSessionUpsertWithWhereUniqueWithoutMatchInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerSessionUpdateWithoutMatchInput, Prisma.PlayerSessionUncheckedUpdateWithoutMatchInput>
  create: Prisma.XOR<Prisma.PlayerSessionCreateWithoutMatchInput, Prisma.PlayerSessionUncheckedCreateWithoutMatchInput>
}

export type PlayerSessionUpdateWithWhereUniqueWithoutMatchInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerSessionUpdateWithoutMatchInput, Prisma.PlayerSessionUncheckedUpdateWithoutMatchInput>
}

export type PlayerSessionUpdateManyWithWhereWithoutMatchInput = {
  where: Prisma.PlayerSessionScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerSessionUpdateManyMutationInput, Prisma.PlayerSessionUncheckedUpdateManyWithoutMatchInput>
}

export type PlayerSessionCreateWithoutPlayerStatsInput = {
  sessionId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  player: Prisma.PlayerCreateNestedOneWithoutPlayerSessionsInput
  match: Prisma.MatchCreateNestedOneWithoutPlayerSessionsInput
  set: Prisma.GameSetCreateNestedOneWithoutPlayerSessionsInput
}

export type PlayerSessionUncheckedCreateWithoutPlayerStatsInput = {
  playerSessionId?: number
  playerId: number
  sessionId: number
  matchId: number
  setId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlayerSessionCreateOrConnectWithoutPlayerStatsInput = {
  where: Prisma.PlayerSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerStatsInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerStatsInput>
}

export type PlayerSessionUpsertWithoutPlayerStatsInput = {
  update: Prisma.XOR<Prisma.PlayerSessionUpdateWithoutPlayerStatsInput, Prisma.PlayerSessionUncheckedUpdateWithoutPlayerStatsInput>
  create: Prisma.XOR<Prisma.PlayerSessionCreateWithoutPlayerStatsInput, Prisma.PlayerSessionUncheckedCreateWithoutPlayerStatsInput>
  where?: Prisma.PlayerSessionWhereInput
}

export type PlayerSessionUpdateToOneWithWhereWithoutPlayerStatsInput = {
  where?: Prisma.PlayerSessionWhereInput
  data: Prisma.XOR<Prisma.PlayerSessionUpdateWithoutPlayerStatsInput, Prisma.PlayerSessionUncheckedUpdateWithoutPlayerStatsInput>
}

export type PlayerSessionUpdateWithoutPlayerStatsInput = {
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  player?: Prisma.PlayerUpdateOneRequiredWithoutPlayerSessionsNestedInput
  match?: Prisma.MatchUpdateOneRequiredWithoutPlayerSessionsNestedInput
  set?: Prisma.GameSetUpdateOneRequiredWithoutPlayerSessionsNestedInput
}

export type PlayerSessionUncheckedUpdateWithoutPlayerStatsInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerSessionCreateManyPlayerInput = {
  playerSessionId?: number
  sessionId: number
  matchId: number
  setId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlayerSessionUpdateWithoutPlayerInput = {
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerSessionNestedInput
  match?: Prisma.MatchUpdateOneRequiredWithoutPlayerSessionsNestedInput
  set?: Prisma.GameSetUpdateOneRequiredWithoutPlayerSessionsNestedInput
}

export type PlayerSessionUncheckedUpdateWithoutPlayerInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerSessionNestedInput
}

export type PlayerSessionUncheckedUpdateManyWithoutPlayerInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerSessionCreateManySetInput = {
  playerSessionId?: number
  playerId: number
  sessionId: number
  matchId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlayerSessionUpdateWithoutSetInput = {
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  player?: Prisma.PlayerUpdateOneRequiredWithoutPlayerSessionsNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerSessionNestedInput
  match?: Prisma.MatchUpdateOneRequiredWithoutPlayerSessionsNestedInput
}

export type PlayerSessionUncheckedUpdateWithoutSetInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerSessionNestedInput
}

export type PlayerSessionUncheckedUpdateManyWithoutSetInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerSessionCreateManyMatchInput = {
  playerSessionId?: number
  playerId: number
  sessionId: number
  setId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlayerSessionUpdateWithoutMatchInput = {
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  player?: Prisma.PlayerUpdateOneRequiredWithoutPlayerSessionsNestedInput
  playerStats?: Prisma.PlayerStatUpdateManyWithoutPlayerSessionNestedInput
  set?: Prisma.GameSetUpdateOneRequiredWithoutPlayerSessionsNestedInput
}

export type PlayerSessionUncheckedUpdateWithoutMatchInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playerStats?: Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerSessionNestedInput
}

export type PlayerSessionUncheckedUpdateManyWithoutMatchInput = {
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.IntFieldUpdateOperationsInput | number
  setId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PlayerSessionCountOutputType
 */

export type PlayerSessionCountOutputType = {
  playerStats: number
}

export type PlayerSessionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playerStats?: boolean | PlayerSessionCountOutputTypeCountPlayerStatsArgs
}

/**
 * PlayerSessionCountOutputType without action
 */
export type PlayerSessionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSessionCountOutputType
   */
  select?: Prisma.PlayerSessionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PlayerSessionCountOutputType without action
 */
export type PlayerSessionCountOutputTypeCountPlayerStatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerStatWhereInput
}


export type PlayerSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerSessionId?: boolean
  playerId?: boolean
  sessionId?: boolean
  matchId?: boolean
  setId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  playerStats?: boolean | Prisma.PlayerSession$playerStatsArgs<ExtArgs>
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  set?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.PlayerSessionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playerSession"]>

export type PlayerSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerSessionId?: boolean
  playerId?: boolean
  sessionId?: boolean
  matchId?: boolean
  setId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  set?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playerSession"]>

export type PlayerSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerSessionId?: boolean
  playerId?: boolean
  sessionId?: boolean
  matchId?: boolean
  setId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  set?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playerSession"]>

export type PlayerSessionSelectScalar = {
  playerSessionId?: boolean
  playerId?: boolean
  sessionId?: boolean
  matchId?: boolean
  setId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PlayerSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"playerSessionId" | "playerId" | "sessionId" | "matchId" | "setId" | "createdAt" | "updatedAt", ExtArgs["result"]["playerSession"]>
export type PlayerSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  playerStats?: boolean | Prisma.PlayerSession$playerStatsArgs<ExtArgs>
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  set?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.PlayerSessionCountOutputTypeDefaultArgs<ExtArgs>
}
export type PlayerSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  set?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
}
export type PlayerSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  set?: boolean | Prisma.GameSetDefaultArgs<ExtArgs>
}

export type $PlayerSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlayerSession"
  objects: {
    player: Prisma.$PlayerPayload<ExtArgs>
    playerStats: Prisma.$PlayerStatPayload<ExtArgs>[]
    match: Prisma.$MatchPayload<ExtArgs>
    set: Prisma.$GameSetPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    playerSessionId: number
    playerId: number
    sessionId: number
    matchId: number
    setId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["playerSession"]>
  composites: {}
}

export type PlayerSessionGetPayload<S extends boolean | null | undefined | PlayerSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload, S>

export type PlayerSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlayerSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlayerSessionCountAggregateInputType | true
  }

export interface PlayerSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerSession'], meta: { name: 'PlayerSession' } }
  /**
   * Find zero or one PlayerSession that matches the filter.
   * @param {PlayerSessionFindUniqueArgs} args - Arguments to find a PlayerSession
   * @example
   * // Get one PlayerSession
   * const playerSession = await prisma.playerSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlayerSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, PlayerSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlayerSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlayerSessionFindUniqueOrThrowArgs} args - Arguments to find a PlayerSession
   * @example
   * // Get one PlayerSession
   * const playerSession = await prisma.playerSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlayerSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlayerSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlayerSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerSessionFindFirstArgs} args - Arguments to find a PlayerSession
   * @example
   * // Get one PlayerSession
   * const playerSession = await prisma.playerSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlayerSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, PlayerSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlayerSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerSessionFindFirstOrThrowArgs} args - Arguments to find a PlayerSession
   * @example
   * // Get one PlayerSession
   * const playerSession = await prisma.playerSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlayerSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlayerSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlayerSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlayerSessions
   * const playerSessions = await prisma.playerSession.findMany()
   * 
   * // Get first 10 PlayerSessions
   * const playerSessions = await prisma.playerSession.findMany({ take: 10 })
   * 
   * // Only select the `playerSessionId`
   * const playerSessionWithPlayerSessionIdOnly = await prisma.playerSession.findMany({ select: { playerSessionId: true } })
   * 
   */
  findMany<T extends PlayerSessionFindManyArgs>(args?: Prisma.SelectSubset<T, PlayerSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlayerSession.
   * @param {PlayerSessionCreateArgs} args - Arguments to create a PlayerSession.
   * @example
   * // Create one PlayerSession
   * const PlayerSession = await prisma.playerSession.create({
   *   data: {
   *     // ... data to create a PlayerSession
   *   }
   * })
   * 
   */
  create<T extends PlayerSessionCreateArgs>(args: Prisma.SelectSubset<T, PlayerSessionCreateArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlayerSessions.
   * @param {PlayerSessionCreateManyArgs} args - Arguments to create many PlayerSessions.
   * @example
   * // Create many PlayerSessions
   * const playerSession = await prisma.playerSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlayerSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, PlayerSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlayerSessions and returns the data saved in the database.
   * @param {PlayerSessionCreateManyAndReturnArgs} args - Arguments to create many PlayerSessions.
   * @example
   * // Create many PlayerSessions
   * const playerSession = await prisma.playerSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlayerSessions and only return the `playerSessionId`
   * const playerSessionWithPlayerSessionIdOnly = await prisma.playerSession.createManyAndReturn({
   *   select: { playerSessionId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlayerSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlayerSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlayerSession.
   * @param {PlayerSessionDeleteArgs} args - Arguments to delete one PlayerSession.
   * @example
   * // Delete one PlayerSession
   * const PlayerSession = await prisma.playerSession.delete({
   *   where: {
   *     // ... filter to delete one PlayerSession
   *   }
   * })
   * 
   */
  delete<T extends PlayerSessionDeleteArgs>(args: Prisma.SelectSubset<T, PlayerSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlayerSession.
   * @param {PlayerSessionUpdateArgs} args - Arguments to update one PlayerSession.
   * @example
   * // Update one PlayerSession
   * const playerSession = await prisma.playerSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlayerSessionUpdateArgs>(args: Prisma.SelectSubset<T, PlayerSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlayerSessions.
   * @param {PlayerSessionDeleteManyArgs} args - Arguments to filter PlayerSessions to delete.
   * @example
   * // Delete a few PlayerSessions
   * const { count } = await prisma.playerSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlayerSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlayerSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlayerSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlayerSessions
   * const playerSession = await prisma.playerSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlayerSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, PlayerSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlayerSessions and returns the data updated in the database.
   * @param {PlayerSessionUpdateManyAndReturnArgs} args - Arguments to update many PlayerSessions.
   * @example
   * // Update many PlayerSessions
   * const playerSession = await prisma.playerSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlayerSessions and only return the `playerSessionId`
   * const playerSessionWithPlayerSessionIdOnly = await prisma.playerSession.updateManyAndReturn({
   *   select: { playerSessionId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlayerSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlayerSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlayerSession.
   * @param {PlayerSessionUpsertArgs} args - Arguments to update or create a PlayerSession.
   * @example
   * // Update or create a PlayerSession
   * const playerSession = await prisma.playerSession.upsert({
   *   create: {
   *     // ... data to create a PlayerSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlayerSession we want to update
   *   }
   * })
   */
  upsert<T extends PlayerSessionUpsertArgs>(args: Prisma.SelectSubset<T, PlayerSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlayerSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerSessionCountArgs} args - Arguments to filter PlayerSessions to count.
   * @example
   * // Count the number of PlayerSessions
   * const count = await prisma.playerSession.count({
   *   where: {
   *     // ... the filter for the PlayerSessions we want to count
   *   }
   * })
  **/
  count<T extends PlayerSessionCountArgs>(
    args?: Prisma.Subset<T, PlayerSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlayerSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlayerSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlayerSessionAggregateArgs>(args: Prisma.Subset<T, PlayerSessionAggregateArgs>): Prisma.PrismaPromise<GetPlayerSessionAggregateType<T>>

  /**
   * Group by PlayerSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlayerSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlayerSessionGroupByArgs['orderBy'] }
      : { orderBy?: PlayerSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlayerSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlayerSession model
 */
readonly fields: PlayerSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlayerSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlayerSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  player<T extends Prisma.PlayerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlayerDefaultArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  playerStats<T extends Prisma.PlayerSession$playerStatsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlayerSession$playerStatsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  match<T extends Prisma.MatchDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MatchDefaultArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  set<T extends Prisma.GameSetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSetDefaultArgs<ExtArgs>>): Prisma.Prisma__GameSetClient<runtime.Types.Result.GetResult<Prisma.$GameSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlayerSession model
 */
export interface PlayerSessionFieldRefs {
  readonly playerSessionId: Prisma.FieldRef<"PlayerSession", 'Int'>
  readonly playerId: Prisma.FieldRef<"PlayerSession", 'Int'>
  readonly sessionId: Prisma.FieldRef<"PlayerSession", 'Int'>
  readonly matchId: Prisma.FieldRef<"PlayerSession", 'Int'>
  readonly setId: Prisma.FieldRef<"PlayerSession", 'Int'>
  readonly createdAt: Prisma.FieldRef<"PlayerSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PlayerSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PlayerSession findUnique
 */
export type PlayerSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * Filter, which PlayerSession to fetch.
   */
  where: Prisma.PlayerSessionWhereUniqueInput
}

/**
 * PlayerSession findUniqueOrThrow
 */
export type PlayerSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * Filter, which PlayerSession to fetch.
   */
  where: Prisma.PlayerSessionWhereUniqueInput
}

/**
 * PlayerSession findFirst
 */
export type PlayerSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * Filter, which PlayerSession to fetch.
   */
  where?: Prisma.PlayerSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayerSessions to fetch.
   */
  orderBy?: Prisma.PlayerSessionOrderByWithRelationInput | Prisma.PlayerSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlayerSessions.
   */
  cursor?: Prisma.PlayerSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayerSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayerSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlayerSessions.
   */
  distinct?: Prisma.PlayerSessionScalarFieldEnum | Prisma.PlayerSessionScalarFieldEnum[]
}

/**
 * PlayerSession findFirstOrThrow
 */
export type PlayerSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * Filter, which PlayerSession to fetch.
   */
  where?: Prisma.PlayerSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayerSessions to fetch.
   */
  orderBy?: Prisma.PlayerSessionOrderByWithRelationInput | Prisma.PlayerSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlayerSessions.
   */
  cursor?: Prisma.PlayerSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayerSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayerSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlayerSessions.
   */
  distinct?: Prisma.PlayerSessionScalarFieldEnum | Prisma.PlayerSessionScalarFieldEnum[]
}

/**
 * PlayerSession findMany
 */
export type PlayerSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * Filter, which PlayerSessions to fetch.
   */
  where?: Prisma.PlayerSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayerSessions to fetch.
   */
  orderBy?: Prisma.PlayerSessionOrderByWithRelationInput | Prisma.PlayerSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlayerSessions.
   */
  cursor?: Prisma.PlayerSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayerSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayerSessions.
   */
  skip?: number
  distinct?: Prisma.PlayerSessionScalarFieldEnum | Prisma.PlayerSessionScalarFieldEnum[]
}

/**
 * PlayerSession create
 */
export type PlayerSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a PlayerSession.
   */
  data: Prisma.XOR<Prisma.PlayerSessionCreateInput, Prisma.PlayerSessionUncheckedCreateInput>
}

/**
 * PlayerSession createMany
 */
export type PlayerSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlayerSessions.
   */
  data: Prisma.PlayerSessionCreateManyInput | Prisma.PlayerSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PlayerSession createManyAndReturn
 */
export type PlayerSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * The data used to create many PlayerSessions.
   */
  data: Prisma.PlayerSessionCreateManyInput | Prisma.PlayerSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PlayerSession update
 */
export type PlayerSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a PlayerSession.
   */
  data: Prisma.XOR<Prisma.PlayerSessionUpdateInput, Prisma.PlayerSessionUncheckedUpdateInput>
  /**
   * Choose, which PlayerSession to update.
   */
  where: Prisma.PlayerSessionWhereUniqueInput
}

/**
 * PlayerSession updateMany
 */
export type PlayerSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlayerSessions.
   */
  data: Prisma.XOR<Prisma.PlayerSessionUpdateManyMutationInput, Prisma.PlayerSessionUncheckedUpdateManyInput>
  /**
   * Filter which PlayerSessions to update
   */
  where?: Prisma.PlayerSessionWhereInput
  /**
   * Limit how many PlayerSessions to update.
   */
  limit?: number
}

/**
 * PlayerSession updateManyAndReturn
 */
export type PlayerSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * The data used to update PlayerSessions.
   */
  data: Prisma.XOR<Prisma.PlayerSessionUpdateManyMutationInput, Prisma.PlayerSessionUncheckedUpdateManyInput>
  /**
   * Filter which PlayerSessions to update
   */
  where?: Prisma.PlayerSessionWhereInput
  /**
   * Limit how many PlayerSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PlayerSession upsert
 */
export type PlayerSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the PlayerSession to update in case it exists.
   */
  where: Prisma.PlayerSessionWhereUniqueInput
  /**
   * In case the PlayerSession found by the `where` argument doesn't exist, create a new PlayerSession with this data.
   */
  create: Prisma.XOR<Prisma.PlayerSessionCreateInput, Prisma.PlayerSessionUncheckedCreateInput>
  /**
   * In case the PlayerSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlayerSessionUpdateInput, Prisma.PlayerSessionUncheckedUpdateInput>
}

/**
 * PlayerSession delete
 */
export type PlayerSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
  /**
   * Filter which PlayerSession to delete.
   */
  where: Prisma.PlayerSessionWhereUniqueInput
}

/**
 * PlayerSession deleteMany
 */
export type PlayerSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlayerSessions to delete
   */
  where?: Prisma.PlayerSessionWhereInput
  /**
   * Limit how many PlayerSessions to delete.
   */
  limit?: number
}

/**
 * PlayerSession.playerStats
 */
export type PlayerSession$playerStatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  where?: Prisma.PlayerStatWhereInput
  orderBy?: Prisma.PlayerStatOrderByWithRelationInput | Prisma.PlayerStatOrderByWithRelationInput[]
  cursor?: Prisma.PlayerStatWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlayerStatScalarFieldEnum | Prisma.PlayerStatScalarFieldEnum[]
}

/**
 * PlayerSession without action
 */
export type PlayerSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerSession
   */
  select?: Prisma.PlayerSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerSession
   */
  omit?: Prisma.PlayerSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerSessionInclude<ExtArgs> | null
}
