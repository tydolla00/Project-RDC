
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PlayerStat` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlayerStat
 * 
 */
export type PlayerStatModel = runtime.Types.Result.DefaultSelection<Prisma.$PlayerStatPayload>

export type AggregatePlayerStat = {
  _count: PlayerStatCountAggregateOutputType | null
  _avg: PlayerStatAvgAggregateOutputType | null
  _sum: PlayerStatSumAggregateOutputType | null
  _min: PlayerStatMinAggregateOutputType | null
  _max: PlayerStatMaxAggregateOutputType | null
}

export type PlayerStatAvgAggregateOutputType = {
  playerStatId: number | null
  playerId: number | null
  gameId: number | null
  playerSessionId: number | null
  statId: number | null
}

export type PlayerStatSumAggregateOutputType = {
  playerStatId: number | null
  playerId: number | null
  gameId: number | null
  playerSessionId: number | null
  statId: number | null
}

export type PlayerStatMinAggregateOutputType = {
  playerStatId: number | null
  playerId: number | null
  gameId: number | null
  playerSessionId: number | null
  statId: number | null
  value: string | null
  date: Date | null
}

export type PlayerStatMaxAggregateOutputType = {
  playerStatId: number | null
  playerId: number | null
  gameId: number | null
  playerSessionId: number | null
  statId: number | null
  value: string | null
  date: Date | null
}

export type PlayerStatCountAggregateOutputType = {
  playerStatId: number
  playerId: number
  gameId: number
  playerSessionId: number
  statId: number
  value: number
  date: number
  _all: number
}


export type PlayerStatAvgAggregateInputType = {
  playerStatId?: true
  playerId?: true
  gameId?: true
  playerSessionId?: true
  statId?: true
}

export type PlayerStatSumAggregateInputType = {
  playerStatId?: true
  playerId?: true
  gameId?: true
  playerSessionId?: true
  statId?: true
}

export type PlayerStatMinAggregateInputType = {
  playerStatId?: true
  playerId?: true
  gameId?: true
  playerSessionId?: true
  statId?: true
  value?: true
  date?: true
}

export type PlayerStatMaxAggregateInputType = {
  playerStatId?: true
  playerId?: true
  gameId?: true
  playerSessionId?: true
  statId?: true
  value?: true
  date?: true
}

export type PlayerStatCountAggregateInputType = {
  playerStatId?: true
  playerId?: true
  gameId?: true
  playerSessionId?: true
  statId?: true
  value?: true
  date?: true
  _all?: true
}

export type PlayerStatAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlayerStat to aggregate.
   */
  where?: Prisma.PlayerStatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayerStats to fetch.
   */
  orderBy?: Prisma.PlayerStatOrderByWithRelationInput | Prisma.PlayerStatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlayerStatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayerStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayerStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlayerStats
  **/
  _count?: true | PlayerStatCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlayerStatAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlayerStatSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlayerStatMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlayerStatMaxAggregateInputType
}

export type GetPlayerStatAggregateType<T extends PlayerStatAggregateArgs> = {
      [P in keyof T & keyof AggregatePlayerStat]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlayerStat[P]>
    : Prisma.GetScalarType<T[P], AggregatePlayerStat[P]>
}




export type PlayerStatGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlayerStatWhereInput
  orderBy?: Prisma.PlayerStatOrderByWithAggregationInput | Prisma.PlayerStatOrderByWithAggregationInput[]
  by: Prisma.PlayerStatScalarFieldEnum[] | Prisma.PlayerStatScalarFieldEnum
  having?: Prisma.PlayerStatScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlayerStatCountAggregateInputType | true
  _avg?: PlayerStatAvgAggregateInputType
  _sum?: PlayerStatSumAggregateInputType
  _min?: PlayerStatMinAggregateInputType
  _max?: PlayerStatMaxAggregateInputType
}

export type PlayerStatGroupByOutputType = {
  playerStatId: number
  playerId: number
  gameId: number
  playerSessionId: number
  statId: number
  value: string
  date: Date
  _count: PlayerStatCountAggregateOutputType | null
  _avg: PlayerStatAvgAggregateOutputType | null
  _sum: PlayerStatSumAggregateOutputType | null
  _min: PlayerStatMinAggregateOutputType | null
  _max: PlayerStatMaxAggregateOutputType | null
}

type GetPlayerStatGroupByPayload<T extends PlayerStatGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlayerStatGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlayerStatGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlayerStatGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlayerStatGroupByOutputType[P]>
      }
    >
  >



export type PlayerStatWhereInput = {
  AND?: Prisma.PlayerStatWhereInput | Prisma.PlayerStatWhereInput[]
  OR?: Prisma.PlayerStatWhereInput[]
  NOT?: Prisma.PlayerStatWhereInput | Prisma.PlayerStatWhereInput[]
  playerStatId?: Prisma.IntFilter<"PlayerStat"> | number
  playerId?: Prisma.IntFilter<"PlayerStat"> | number
  gameId?: Prisma.IntFilter<"PlayerStat"> | number
  playerSessionId?: Prisma.IntFilter<"PlayerStat"> | number
  statId?: Prisma.IntFilter<"PlayerStat"> | number
  value?: Prisma.StringFilter<"PlayerStat"> | string
  date?: Prisma.DateTimeFilter<"PlayerStat"> | Date | string
  player?: Prisma.XOR<Prisma.PlayerScalarRelationFilter, Prisma.PlayerWhereInput>
  game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  playerSession?: Prisma.XOR<Prisma.PlayerSessionScalarRelationFilter, Prisma.PlayerSessionWhereInput>
  gameStat?: Prisma.XOR<Prisma.GameStatScalarRelationFilter, Prisma.GameStatWhereInput>
}

export type PlayerStatOrderByWithRelationInput = {
  playerStatId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  playerSessionId?: Prisma.SortOrder
  statId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  date?: Prisma.SortOrder
  player?: Prisma.PlayerOrderByWithRelationInput
  game?: Prisma.GameOrderByWithRelationInput
  playerSession?: Prisma.PlayerSessionOrderByWithRelationInput
  gameStat?: Prisma.GameStatOrderByWithRelationInput
}

export type PlayerStatWhereUniqueInput = Prisma.AtLeast<{
  playerStatId?: number
  AND?: Prisma.PlayerStatWhereInput | Prisma.PlayerStatWhereInput[]
  OR?: Prisma.PlayerStatWhereInput[]
  NOT?: Prisma.PlayerStatWhereInput | Prisma.PlayerStatWhereInput[]
  playerId?: Prisma.IntFilter<"PlayerStat"> | number
  gameId?: Prisma.IntFilter<"PlayerStat"> | number
  playerSessionId?: Prisma.IntFilter<"PlayerStat"> | number
  statId?: Prisma.IntFilter<"PlayerStat"> | number
  value?: Prisma.StringFilter<"PlayerStat"> | string
  date?: Prisma.DateTimeFilter<"PlayerStat"> | Date | string
  player?: Prisma.XOR<Prisma.PlayerScalarRelationFilter, Prisma.PlayerWhereInput>
  game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  playerSession?: Prisma.XOR<Prisma.PlayerSessionScalarRelationFilter, Prisma.PlayerSessionWhereInput>
  gameStat?: Prisma.XOR<Prisma.GameStatScalarRelationFilter, Prisma.GameStatWhereInput>
}, "playerStatId">

export type PlayerStatOrderByWithAggregationInput = {
  playerStatId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  playerSessionId?: Prisma.SortOrder
  statId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  date?: Prisma.SortOrder
  _count?: Prisma.PlayerStatCountOrderByAggregateInput
  _avg?: Prisma.PlayerStatAvgOrderByAggregateInput
  _max?: Prisma.PlayerStatMaxOrderByAggregateInput
  _min?: Prisma.PlayerStatMinOrderByAggregateInput
  _sum?: Prisma.PlayerStatSumOrderByAggregateInput
}

export type PlayerStatScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlayerStatScalarWhereWithAggregatesInput | Prisma.PlayerStatScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlayerStatScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlayerStatScalarWhereWithAggregatesInput | Prisma.PlayerStatScalarWhereWithAggregatesInput[]
  playerStatId?: Prisma.IntWithAggregatesFilter<"PlayerStat"> | number
  playerId?: Prisma.IntWithAggregatesFilter<"PlayerStat"> | number
  gameId?: Prisma.IntWithAggregatesFilter<"PlayerStat"> | number
  playerSessionId?: Prisma.IntWithAggregatesFilter<"PlayerStat"> | number
  statId?: Prisma.IntWithAggregatesFilter<"PlayerStat"> | number
  value?: Prisma.StringWithAggregatesFilter<"PlayerStat"> | string
  date?: Prisma.DateTimeWithAggregatesFilter<"PlayerStat"> | Date | string
}

export type PlayerStatCreateInput = {
  value: string
  date?: Date | string
  player: Prisma.PlayerCreateNestedOneWithoutPlayerStatsInput
  game: Prisma.GameCreateNestedOneWithoutPlayerStatsInput
  playerSession: Prisma.PlayerSessionCreateNestedOneWithoutPlayerStatsInput
  gameStat: Prisma.GameStatCreateNestedOneWithoutPlayerStatsInput
}

export type PlayerStatUncheckedCreateInput = {
  playerStatId?: number
  playerId: number
  gameId: number
  playerSessionId: number
  statId: number
  value: string
  date?: Date | string
}

export type PlayerStatUpdateInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  player?: Prisma.PlayerUpdateOneRequiredWithoutPlayerStatsNestedInput
  game?: Prisma.GameUpdateOneRequiredWithoutPlayerStatsNestedInput
  playerSession?: Prisma.PlayerSessionUpdateOneRequiredWithoutPlayerStatsNestedInput
  gameStat?: Prisma.GameStatUpdateOneRequiredWithoutPlayerStatsNestedInput
}

export type PlayerStatUncheckedUpdateInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatCreateManyInput = {
  playerStatId?: number
  playerId: number
  gameId: number
  playerSessionId: number
  statId: number
  value: string
  date?: Date | string
}

export type PlayerStatUpdateManyMutationInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatUncheckedUpdateManyInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatListRelationFilter = {
  every?: Prisma.PlayerStatWhereInput
  some?: Prisma.PlayerStatWhereInput
  none?: Prisma.PlayerStatWhereInput
}

export type PlayerStatOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PlayerStatCountOrderByAggregateInput = {
  playerStatId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  playerSessionId?: Prisma.SortOrder
  statId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  date?: Prisma.SortOrder
}

export type PlayerStatAvgOrderByAggregateInput = {
  playerStatId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  playerSessionId?: Prisma.SortOrder
  statId?: Prisma.SortOrder
}

export type PlayerStatMaxOrderByAggregateInput = {
  playerStatId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  playerSessionId?: Prisma.SortOrder
  statId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  date?: Prisma.SortOrder
}

export type PlayerStatMinOrderByAggregateInput = {
  playerStatId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  playerSessionId?: Prisma.SortOrder
  statId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  date?: Prisma.SortOrder
}

export type PlayerStatSumOrderByAggregateInput = {
  playerStatId?: Prisma.SortOrder
  playerId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  playerSessionId?: Prisma.SortOrder
  statId?: Prisma.SortOrder
}

export type PlayerStatCreateNestedManyWithoutPlayerInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerInput> | Prisma.PlayerStatCreateWithoutPlayerInput[] | Prisma.PlayerStatUncheckedCreateWithoutPlayerInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutPlayerInput | Prisma.PlayerStatCreateOrConnectWithoutPlayerInput[]
  createMany?: Prisma.PlayerStatCreateManyPlayerInputEnvelope
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
}

export type PlayerStatUncheckedCreateNestedManyWithoutPlayerInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerInput> | Prisma.PlayerStatCreateWithoutPlayerInput[] | Prisma.PlayerStatUncheckedCreateWithoutPlayerInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutPlayerInput | Prisma.PlayerStatCreateOrConnectWithoutPlayerInput[]
  createMany?: Prisma.PlayerStatCreateManyPlayerInputEnvelope
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
}

export type PlayerStatUpdateManyWithoutPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerInput> | Prisma.PlayerStatCreateWithoutPlayerInput[] | Prisma.PlayerStatUncheckedCreateWithoutPlayerInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutPlayerInput | Prisma.PlayerStatCreateOrConnectWithoutPlayerInput[]
  upsert?: Prisma.PlayerStatUpsertWithWhereUniqueWithoutPlayerInput | Prisma.PlayerStatUpsertWithWhereUniqueWithoutPlayerInput[]
  createMany?: Prisma.PlayerStatCreateManyPlayerInputEnvelope
  set?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  disconnect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  delete?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  update?: Prisma.PlayerStatUpdateWithWhereUniqueWithoutPlayerInput | Prisma.PlayerStatUpdateWithWhereUniqueWithoutPlayerInput[]
  updateMany?: Prisma.PlayerStatUpdateManyWithWhereWithoutPlayerInput | Prisma.PlayerStatUpdateManyWithWhereWithoutPlayerInput[]
  deleteMany?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
}

export type PlayerStatUncheckedUpdateManyWithoutPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerInput> | Prisma.PlayerStatCreateWithoutPlayerInput[] | Prisma.PlayerStatUncheckedCreateWithoutPlayerInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutPlayerInput | Prisma.PlayerStatCreateOrConnectWithoutPlayerInput[]
  upsert?: Prisma.PlayerStatUpsertWithWhereUniqueWithoutPlayerInput | Prisma.PlayerStatUpsertWithWhereUniqueWithoutPlayerInput[]
  createMany?: Prisma.PlayerStatCreateManyPlayerInputEnvelope
  set?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  disconnect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  delete?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  update?: Prisma.PlayerStatUpdateWithWhereUniqueWithoutPlayerInput | Prisma.PlayerStatUpdateWithWhereUniqueWithoutPlayerInput[]
  updateMany?: Prisma.PlayerStatUpdateManyWithWhereWithoutPlayerInput | Prisma.PlayerStatUpdateManyWithWhereWithoutPlayerInput[]
  deleteMany?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
}

export type PlayerStatCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameInput, Prisma.PlayerStatUncheckedCreateWithoutGameInput> | Prisma.PlayerStatCreateWithoutGameInput[] | Prisma.PlayerStatUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutGameInput | Prisma.PlayerStatCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.PlayerStatCreateManyGameInputEnvelope
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
}

export type PlayerStatUncheckedCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameInput, Prisma.PlayerStatUncheckedCreateWithoutGameInput> | Prisma.PlayerStatCreateWithoutGameInput[] | Prisma.PlayerStatUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutGameInput | Prisma.PlayerStatCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.PlayerStatCreateManyGameInputEnvelope
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
}

export type PlayerStatUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameInput, Prisma.PlayerStatUncheckedCreateWithoutGameInput> | Prisma.PlayerStatCreateWithoutGameInput[] | Prisma.PlayerStatUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutGameInput | Prisma.PlayerStatCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.PlayerStatUpsertWithWhereUniqueWithoutGameInput | Prisma.PlayerStatUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.PlayerStatCreateManyGameInputEnvelope
  set?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  disconnect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  delete?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  update?: Prisma.PlayerStatUpdateWithWhereUniqueWithoutGameInput | Prisma.PlayerStatUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.PlayerStatUpdateManyWithWhereWithoutGameInput | Prisma.PlayerStatUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
}

export type PlayerStatUncheckedUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameInput, Prisma.PlayerStatUncheckedCreateWithoutGameInput> | Prisma.PlayerStatCreateWithoutGameInput[] | Prisma.PlayerStatUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutGameInput | Prisma.PlayerStatCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.PlayerStatUpsertWithWhereUniqueWithoutGameInput | Prisma.PlayerStatUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.PlayerStatCreateManyGameInputEnvelope
  set?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  disconnect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  delete?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  update?: Prisma.PlayerStatUpdateWithWhereUniqueWithoutGameInput | Prisma.PlayerStatUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.PlayerStatUpdateManyWithWhereWithoutGameInput | Prisma.PlayerStatUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
}

export type PlayerStatCreateNestedManyWithoutGameStatInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameStatInput, Prisma.PlayerStatUncheckedCreateWithoutGameStatInput> | Prisma.PlayerStatCreateWithoutGameStatInput[] | Prisma.PlayerStatUncheckedCreateWithoutGameStatInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutGameStatInput | Prisma.PlayerStatCreateOrConnectWithoutGameStatInput[]
  createMany?: Prisma.PlayerStatCreateManyGameStatInputEnvelope
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
}

export type PlayerStatUncheckedCreateNestedManyWithoutGameStatInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameStatInput, Prisma.PlayerStatUncheckedCreateWithoutGameStatInput> | Prisma.PlayerStatCreateWithoutGameStatInput[] | Prisma.PlayerStatUncheckedCreateWithoutGameStatInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutGameStatInput | Prisma.PlayerStatCreateOrConnectWithoutGameStatInput[]
  createMany?: Prisma.PlayerStatCreateManyGameStatInputEnvelope
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
}

export type PlayerStatUpdateManyWithoutGameStatNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameStatInput, Prisma.PlayerStatUncheckedCreateWithoutGameStatInput> | Prisma.PlayerStatCreateWithoutGameStatInput[] | Prisma.PlayerStatUncheckedCreateWithoutGameStatInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutGameStatInput | Prisma.PlayerStatCreateOrConnectWithoutGameStatInput[]
  upsert?: Prisma.PlayerStatUpsertWithWhereUniqueWithoutGameStatInput | Prisma.PlayerStatUpsertWithWhereUniqueWithoutGameStatInput[]
  createMany?: Prisma.PlayerStatCreateManyGameStatInputEnvelope
  set?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  disconnect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  delete?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  update?: Prisma.PlayerStatUpdateWithWhereUniqueWithoutGameStatInput | Prisma.PlayerStatUpdateWithWhereUniqueWithoutGameStatInput[]
  updateMany?: Prisma.PlayerStatUpdateManyWithWhereWithoutGameStatInput | Prisma.PlayerStatUpdateManyWithWhereWithoutGameStatInput[]
  deleteMany?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
}

export type PlayerStatUncheckedUpdateManyWithoutGameStatNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameStatInput, Prisma.PlayerStatUncheckedCreateWithoutGameStatInput> | Prisma.PlayerStatCreateWithoutGameStatInput[] | Prisma.PlayerStatUncheckedCreateWithoutGameStatInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutGameStatInput | Prisma.PlayerStatCreateOrConnectWithoutGameStatInput[]
  upsert?: Prisma.PlayerStatUpsertWithWhereUniqueWithoutGameStatInput | Prisma.PlayerStatUpsertWithWhereUniqueWithoutGameStatInput[]
  createMany?: Prisma.PlayerStatCreateManyGameStatInputEnvelope
  set?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  disconnect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  delete?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  update?: Prisma.PlayerStatUpdateWithWhereUniqueWithoutGameStatInput | Prisma.PlayerStatUpdateWithWhereUniqueWithoutGameStatInput[]
  updateMany?: Prisma.PlayerStatUpdateManyWithWhereWithoutGameStatInput | Prisma.PlayerStatUpdateManyWithWhereWithoutGameStatInput[]
  deleteMany?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
}

export type PlayerStatCreateNestedManyWithoutPlayerSessionInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerSessionInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput> | Prisma.PlayerStatCreateWithoutPlayerSessionInput[] | Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutPlayerSessionInput | Prisma.PlayerStatCreateOrConnectWithoutPlayerSessionInput[]
  createMany?: Prisma.PlayerStatCreateManyPlayerSessionInputEnvelope
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
}

export type PlayerStatUncheckedCreateNestedManyWithoutPlayerSessionInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerSessionInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput> | Prisma.PlayerStatCreateWithoutPlayerSessionInput[] | Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutPlayerSessionInput | Prisma.PlayerStatCreateOrConnectWithoutPlayerSessionInput[]
  createMany?: Prisma.PlayerStatCreateManyPlayerSessionInputEnvelope
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
}

export type PlayerStatUpdateManyWithoutPlayerSessionNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerSessionInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput> | Prisma.PlayerStatCreateWithoutPlayerSessionInput[] | Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutPlayerSessionInput | Prisma.PlayerStatCreateOrConnectWithoutPlayerSessionInput[]
  upsert?: Prisma.PlayerStatUpsertWithWhereUniqueWithoutPlayerSessionInput | Prisma.PlayerStatUpsertWithWhereUniqueWithoutPlayerSessionInput[]
  createMany?: Prisma.PlayerStatCreateManyPlayerSessionInputEnvelope
  set?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  disconnect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  delete?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  update?: Prisma.PlayerStatUpdateWithWhereUniqueWithoutPlayerSessionInput | Prisma.PlayerStatUpdateWithWhereUniqueWithoutPlayerSessionInput[]
  updateMany?: Prisma.PlayerStatUpdateManyWithWhereWithoutPlayerSessionInput | Prisma.PlayerStatUpdateManyWithWhereWithoutPlayerSessionInput[]
  deleteMany?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
}

export type PlayerStatUncheckedUpdateManyWithoutPlayerSessionNestedInput = {
  create?: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerSessionInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput> | Prisma.PlayerStatCreateWithoutPlayerSessionInput[] | Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput[]
  connectOrCreate?: Prisma.PlayerStatCreateOrConnectWithoutPlayerSessionInput | Prisma.PlayerStatCreateOrConnectWithoutPlayerSessionInput[]
  upsert?: Prisma.PlayerStatUpsertWithWhereUniqueWithoutPlayerSessionInput | Prisma.PlayerStatUpsertWithWhereUniqueWithoutPlayerSessionInput[]
  createMany?: Prisma.PlayerStatCreateManyPlayerSessionInputEnvelope
  set?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  disconnect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  delete?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  connect?: Prisma.PlayerStatWhereUniqueInput | Prisma.PlayerStatWhereUniqueInput[]
  update?: Prisma.PlayerStatUpdateWithWhereUniqueWithoutPlayerSessionInput | Prisma.PlayerStatUpdateWithWhereUniqueWithoutPlayerSessionInput[]
  updateMany?: Prisma.PlayerStatUpdateManyWithWhereWithoutPlayerSessionInput | Prisma.PlayerStatUpdateManyWithWhereWithoutPlayerSessionInput[]
  deleteMany?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
}

export type PlayerStatCreateWithoutPlayerInput = {
  value: string
  date?: Date | string
  game: Prisma.GameCreateNestedOneWithoutPlayerStatsInput
  playerSession: Prisma.PlayerSessionCreateNestedOneWithoutPlayerStatsInput
  gameStat: Prisma.GameStatCreateNestedOneWithoutPlayerStatsInput
}

export type PlayerStatUncheckedCreateWithoutPlayerInput = {
  playerStatId?: number
  gameId: number
  playerSessionId: number
  statId: number
  value: string
  date?: Date | string
}

export type PlayerStatCreateOrConnectWithoutPlayerInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerInput>
}

export type PlayerStatCreateManyPlayerInputEnvelope = {
  data: Prisma.PlayerStatCreateManyPlayerInput | Prisma.PlayerStatCreateManyPlayerInput[]
  skipDuplicates?: boolean
}

export type PlayerStatUpsertWithWhereUniqueWithoutPlayerInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerStatUpdateWithoutPlayerInput, Prisma.PlayerStatUncheckedUpdateWithoutPlayerInput>
  create: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerInput>
}

export type PlayerStatUpdateWithWhereUniqueWithoutPlayerInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerStatUpdateWithoutPlayerInput, Prisma.PlayerStatUncheckedUpdateWithoutPlayerInput>
}

export type PlayerStatUpdateManyWithWhereWithoutPlayerInput = {
  where: Prisma.PlayerStatScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerStatUpdateManyMutationInput, Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerInput>
}

export type PlayerStatScalarWhereInput = {
  AND?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
  OR?: Prisma.PlayerStatScalarWhereInput[]
  NOT?: Prisma.PlayerStatScalarWhereInput | Prisma.PlayerStatScalarWhereInput[]
  playerStatId?: Prisma.IntFilter<"PlayerStat"> | number
  playerId?: Prisma.IntFilter<"PlayerStat"> | number
  gameId?: Prisma.IntFilter<"PlayerStat"> | number
  playerSessionId?: Prisma.IntFilter<"PlayerStat"> | number
  statId?: Prisma.IntFilter<"PlayerStat"> | number
  value?: Prisma.StringFilter<"PlayerStat"> | string
  date?: Prisma.DateTimeFilter<"PlayerStat"> | Date | string
}

export type PlayerStatCreateWithoutGameInput = {
  value: string
  date?: Date | string
  player: Prisma.PlayerCreateNestedOneWithoutPlayerStatsInput
  playerSession: Prisma.PlayerSessionCreateNestedOneWithoutPlayerStatsInput
  gameStat: Prisma.GameStatCreateNestedOneWithoutPlayerStatsInput
}

export type PlayerStatUncheckedCreateWithoutGameInput = {
  playerStatId?: number
  playerId: number
  playerSessionId: number
  statId: number
  value: string
  date?: Date | string
}

export type PlayerStatCreateOrConnectWithoutGameInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameInput, Prisma.PlayerStatUncheckedCreateWithoutGameInput>
}

export type PlayerStatCreateManyGameInputEnvelope = {
  data: Prisma.PlayerStatCreateManyGameInput | Prisma.PlayerStatCreateManyGameInput[]
  skipDuplicates?: boolean
}

export type PlayerStatUpsertWithWhereUniqueWithoutGameInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerStatUpdateWithoutGameInput, Prisma.PlayerStatUncheckedUpdateWithoutGameInput>
  create: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameInput, Prisma.PlayerStatUncheckedCreateWithoutGameInput>
}

export type PlayerStatUpdateWithWhereUniqueWithoutGameInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerStatUpdateWithoutGameInput, Prisma.PlayerStatUncheckedUpdateWithoutGameInput>
}

export type PlayerStatUpdateManyWithWhereWithoutGameInput = {
  where: Prisma.PlayerStatScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerStatUpdateManyMutationInput, Prisma.PlayerStatUncheckedUpdateManyWithoutGameInput>
}

export type PlayerStatCreateWithoutGameStatInput = {
  value: string
  date?: Date | string
  player: Prisma.PlayerCreateNestedOneWithoutPlayerStatsInput
  game: Prisma.GameCreateNestedOneWithoutPlayerStatsInput
  playerSession: Prisma.PlayerSessionCreateNestedOneWithoutPlayerStatsInput
}

export type PlayerStatUncheckedCreateWithoutGameStatInput = {
  playerStatId?: number
  playerId: number
  gameId: number
  playerSessionId: number
  value: string
  date?: Date | string
}

export type PlayerStatCreateOrConnectWithoutGameStatInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameStatInput, Prisma.PlayerStatUncheckedCreateWithoutGameStatInput>
}

export type PlayerStatCreateManyGameStatInputEnvelope = {
  data: Prisma.PlayerStatCreateManyGameStatInput | Prisma.PlayerStatCreateManyGameStatInput[]
  skipDuplicates?: boolean
}

export type PlayerStatUpsertWithWhereUniqueWithoutGameStatInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerStatUpdateWithoutGameStatInput, Prisma.PlayerStatUncheckedUpdateWithoutGameStatInput>
  create: Prisma.XOR<Prisma.PlayerStatCreateWithoutGameStatInput, Prisma.PlayerStatUncheckedCreateWithoutGameStatInput>
}

export type PlayerStatUpdateWithWhereUniqueWithoutGameStatInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerStatUpdateWithoutGameStatInput, Prisma.PlayerStatUncheckedUpdateWithoutGameStatInput>
}

export type PlayerStatUpdateManyWithWhereWithoutGameStatInput = {
  where: Prisma.PlayerStatScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerStatUpdateManyMutationInput, Prisma.PlayerStatUncheckedUpdateManyWithoutGameStatInput>
}

export type PlayerStatCreateWithoutPlayerSessionInput = {
  value: string
  date?: Date | string
  player: Prisma.PlayerCreateNestedOneWithoutPlayerStatsInput
  game: Prisma.GameCreateNestedOneWithoutPlayerStatsInput
  gameStat: Prisma.GameStatCreateNestedOneWithoutPlayerStatsInput
}

export type PlayerStatUncheckedCreateWithoutPlayerSessionInput = {
  playerStatId?: number
  playerId: number
  gameId: number
  statId: number
  value: string
  date?: Date | string
}

export type PlayerStatCreateOrConnectWithoutPlayerSessionInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  create: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerSessionInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput>
}

export type PlayerStatCreateManyPlayerSessionInputEnvelope = {
  data: Prisma.PlayerStatCreateManyPlayerSessionInput | Prisma.PlayerStatCreateManyPlayerSessionInput[]
  skipDuplicates?: boolean
}

export type PlayerStatUpsertWithWhereUniqueWithoutPlayerSessionInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  update: Prisma.XOR<Prisma.PlayerStatUpdateWithoutPlayerSessionInput, Prisma.PlayerStatUncheckedUpdateWithoutPlayerSessionInput>
  create: Prisma.XOR<Prisma.PlayerStatCreateWithoutPlayerSessionInput, Prisma.PlayerStatUncheckedCreateWithoutPlayerSessionInput>
}

export type PlayerStatUpdateWithWhereUniqueWithoutPlayerSessionInput = {
  where: Prisma.PlayerStatWhereUniqueInput
  data: Prisma.XOR<Prisma.PlayerStatUpdateWithoutPlayerSessionInput, Prisma.PlayerStatUncheckedUpdateWithoutPlayerSessionInput>
}

export type PlayerStatUpdateManyWithWhereWithoutPlayerSessionInput = {
  where: Prisma.PlayerStatScalarWhereInput
  data: Prisma.XOR<Prisma.PlayerStatUpdateManyMutationInput, Prisma.PlayerStatUncheckedUpdateManyWithoutPlayerSessionInput>
}

export type PlayerStatCreateManyPlayerInput = {
  playerStatId?: number
  gameId: number
  playerSessionId: number
  statId: number
  value: string
  date?: Date | string
}

export type PlayerStatUpdateWithoutPlayerInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  game?: Prisma.GameUpdateOneRequiredWithoutPlayerStatsNestedInput
  playerSession?: Prisma.PlayerSessionUpdateOneRequiredWithoutPlayerStatsNestedInput
  gameStat?: Prisma.GameStatUpdateOneRequiredWithoutPlayerStatsNestedInput
}

export type PlayerStatUncheckedUpdateWithoutPlayerInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatUncheckedUpdateManyWithoutPlayerInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatCreateManyGameInput = {
  playerStatId?: number
  playerId: number
  playerSessionId: number
  statId: number
  value: string
  date?: Date | string
}

export type PlayerStatUpdateWithoutGameInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  player?: Prisma.PlayerUpdateOneRequiredWithoutPlayerStatsNestedInput
  playerSession?: Prisma.PlayerSessionUpdateOneRequiredWithoutPlayerStatsNestedInput
  gameStat?: Prisma.GameStatUpdateOneRequiredWithoutPlayerStatsNestedInput
}

export type PlayerStatUncheckedUpdateWithoutGameInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatUncheckedUpdateManyWithoutGameInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatCreateManyGameStatInput = {
  playerStatId?: number
  playerId: number
  gameId: number
  playerSessionId: number
  value: string
  date?: Date | string
}

export type PlayerStatUpdateWithoutGameStatInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  player?: Prisma.PlayerUpdateOneRequiredWithoutPlayerStatsNestedInput
  game?: Prisma.GameUpdateOneRequiredWithoutPlayerStatsNestedInput
  playerSession?: Prisma.PlayerSessionUpdateOneRequiredWithoutPlayerStatsNestedInput
}

export type PlayerStatUncheckedUpdateWithoutGameStatInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatUncheckedUpdateManyWithoutGameStatInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  playerSessionId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatCreateManyPlayerSessionInput = {
  playerStatId?: number
  playerId: number
  gameId: number
  statId: number
  value: string
  date?: Date | string
}

export type PlayerStatUpdateWithoutPlayerSessionInput = {
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  player?: Prisma.PlayerUpdateOneRequiredWithoutPlayerStatsNestedInput
  game?: Prisma.GameUpdateOneRequiredWithoutPlayerStatsNestedInput
  gameStat?: Prisma.GameStatUpdateOneRequiredWithoutPlayerStatsNestedInput
}

export type PlayerStatUncheckedUpdateWithoutPlayerSessionInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlayerStatUncheckedUpdateManyWithoutPlayerSessionInput = {
  playerStatId?: Prisma.IntFieldUpdateOperationsInput | number
  playerId?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.IntFieldUpdateOperationsInput | number
  statId?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PlayerStatSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerStatId?: boolean
  playerId?: boolean
  gameId?: boolean
  playerSessionId?: boolean
  statId?: boolean
  value?: boolean
  date?: boolean
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  playerSession?: boolean | Prisma.PlayerSessionDefaultArgs<ExtArgs>
  gameStat?: boolean | Prisma.GameStatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playerStat"]>

export type PlayerStatSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerStatId?: boolean
  playerId?: boolean
  gameId?: boolean
  playerSessionId?: boolean
  statId?: boolean
  value?: boolean
  date?: boolean
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  playerSession?: boolean | Prisma.PlayerSessionDefaultArgs<ExtArgs>
  gameStat?: boolean | Prisma.GameStatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playerStat"]>

export type PlayerStatSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  playerStatId?: boolean
  playerId?: boolean
  gameId?: boolean
  playerSessionId?: boolean
  statId?: boolean
  value?: boolean
  date?: boolean
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  playerSession?: boolean | Prisma.PlayerSessionDefaultArgs<ExtArgs>
  gameStat?: boolean | Prisma.GameStatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playerStat"]>

export type PlayerStatSelectScalar = {
  playerStatId?: boolean
  playerId?: boolean
  gameId?: boolean
  playerSessionId?: boolean
  statId?: boolean
  value?: boolean
  date?: boolean
}

export type PlayerStatOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"playerStatId" | "playerId" | "gameId" | "playerSessionId" | "statId" | "value" | "date", ExtArgs["result"]["playerStat"]>
export type PlayerStatInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  playerSession?: boolean | Prisma.PlayerSessionDefaultArgs<ExtArgs>
  gameStat?: boolean | Prisma.GameStatDefaultArgs<ExtArgs>
}
export type PlayerStatIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  playerSession?: boolean | Prisma.PlayerSessionDefaultArgs<ExtArgs>
  gameStat?: boolean | Prisma.GameStatDefaultArgs<ExtArgs>
}
export type PlayerStatIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player?: boolean | Prisma.PlayerDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  playerSession?: boolean | Prisma.PlayerSessionDefaultArgs<ExtArgs>
  gameStat?: boolean | Prisma.GameStatDefaultArgs<ExtArgs>
}

export type $PlayerStatPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlayerStat"
  objects: {
    player: Prisma.$PlayerPayload<ExtArgs>
    game: Prisma.$GamePayload<ExtArgs>
    playerSession: Prisma.$PlayerSessionPayload<ExtArgs>
    gameStat: Prisma.$GameStatPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    playerStatId: number
    playerId: number
    gameId: number
    playerSessionId: number
    statId: number
    value: string
    date: Date
  }, ExtArgs["result"]["playerStat"]>
  composites: {}
}

export type PlayerStatGetPayload<S extends boolean | null | undefined | PlayerStatDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload, S>

export type PlayerStatCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlayerStatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlayerStatCountAggregateInputType | true
  }

export interface PlayerStatDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerStat'], meta: { name: 'PlayerStat' } }
  /**
   * Find zero or one PlayerStat that matches the filter.
   * @param {PlayerStatFindUniqueArgs} args - Arguments to find a PlayerStat
   * @example
   * // Get one PlayerStat
   * const playerStat = await prisma.playerStat.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlayerStatFindUniqueArgs>(args: Prisma.SelectSubset<T, PlayerStatFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlayerStatClient<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlayerStat that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlayerStatFindUniqueOrThrowArgs} args - Arguments to find a PlayerStat
   * @example
   * // Get one PlayerStat
   * const playerStat = await prisma.playerStat.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlayerStatFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlayerStatFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlayerStatClient<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlayerStat that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerStatFindFirstArgs} args - Arguments to find a PlayerStat
   * @example
   * // Get one PlayerStat
   * const playerStat = await prisma.playerStat.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlayerStatFindFirstArgs>(args?: Prisma.SelectSubset<T, PlayerStatFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlayerStatClient<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlayerStat that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerStatFindFirstOrThrowArgs} args - Arguments to find a PlayerStat
   * @example
   * // Get one PlayerStat
   * const playerStat = await prisma.playerStat.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlayerStatFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlayerStatFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlayerStatClient<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlayerStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerStatFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlayerStats
   * const playerStats = await prisma.playerStat.findMany()
   * 
   * // Get first 10 PlayerStats
   * const playerStats = await prisma.playerStat.findMany({ take: 10 })
   * 
   * // Only select the `playerStatId`
   * const playerStatWithPlayerStatIdOnly = await prisma.playerStat.findMany({ select: { playerStatId: true } })
   * 
   */
  findMany<T extends PlayerStatFindManyArgs>(args?: Prisma.SelectSubset<T, PlayerStatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlayerStat.
   * @param {PlayerStatCreateArgs} args - Arguments to create a PlayerStat.
   * @example
   * // Create one PlayerStat
   * const PlayerStat = await prisma.playerStat.create({
   *   data: {
   *     // ... data to create a PlayerStat
   *   }
   * })
   * 
   */
  create<T extends PlayerStatCreateArgs>(args: Prisma.SelectSubset<T, PlayerStatCreateArgs<ExtArgs>>): Prisma.Prisma__PlayerStatClient<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlayerStats.
   * @param {PlayerStatCreateManyArgs} args - Arguments to create many PlayerStats.
   * @example
   * // Create many PlayerStats
   * const playerStat = await prisma.playerStat.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlayerStatCreateManyArgs>(args?: Prisma.SelectSubset<T, PlayerStatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlayerStats and returns the data saved in the database.
   * @param {PlayerStatCreateManyAndReturnArgs} args - Arguments to create many PlayerStats.
   * @example
   * // Create many PlayerStats
   * const playerStat = await prisma.playerStat.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlayerStats and only return the `playerStatId`
   * const playerStatWithPlayerStatIdOnly = await prisma.playerStat.createManyAndReturn({
   *   select: { playerStatId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlayerStatCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlayerStatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlayerStat.
   * @param {PlayerStatDeleteArgs} args - Arguments to delete one PlayerStat.
   * @example
   * // Delete one PlayerStat
   * const PlayerStat = await prisma.playerStat.delete({
   *   where: {
   *     // ... filter to delete one PlayerStat
   *   }
   * })
   * 
   */
  delete<T extends PlayerStatDeleteArgs>(args: Prisma.SelectSubset<T, PlayerStatDeleteArgs<ExtArgs>>): Prisma.Prisma__PlayerStatClient<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlayerStat.
   * @param {PlayerStatUpdateArgs} args - Arguments to update one PlayerStat.
   * @example
   * // Update one PlayerStat
   * const playerStat = await prisma.playerStat.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlayerStatUpdateArgs>(args: Prisma.SelectSubset<T, PlayerStatUpdateArgs<ExtArgs>>): Prisma.Prisma__PlayerStatClient<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlayerStats.
   * @param {PlayerStatDeleteManyArgs} args - Arguments to filter PlayerStats to delete.
   * @example
   * // Delete a few PlayerStats
   * const { count } = await prisma.playerStat.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlayerStatDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlayerStatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlayerStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerStatUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlayerStats
   * const playerStat = await prisma.playerStat.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlayerStatUpdateManyArgs>(args: Prisma.SelectSubset<T, PlayerStatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlayerStats and returns the data updated in the database.
   * @param {PlayerStatUpdateManyAndReturnArgs} args - Arguments to update many PlayerStats.
   * @example
   * // Update many PlayerStats
   * const playerStat = await prisma.playerStat.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlayerStats and only return the `playerStatId`
   * const playerStatWithPlayerStatIdOnly = await prisma.playerStat.updateManyAndReturn({
   *   select: { playerStatId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlayerStatUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlayerStatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlayerStat.
   * @param {PlayerStatUpsertArgs} args - Arguments to update or create a PlayerStat.
   * @example
   * // Update or create a PlayerStat
   * const playerStat = await prisma.playerStat.upsert({
   *   create: {
   *     // ... data to create a PlayerStat
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlayerStat we want to update
   *   }
   * })
   */
  upsert<T extends PlayerStatUpsertArgs>(args: Prisma.SelectSubset<T, PlayerStatUpsertArgs<ExtArgs>>): Prisma.Prisma__PlayerStatClient<runtime.Types.Result.GetResult<Prisma.$PlayerStatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlayerStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerStatCountArgs} args - Arguments to filter PlayerStats to count.
   * @example
   * // Count the number of PlayerStats
   * const count = await prisma.playerStat.count({
   *   where: {
   *     // ... the filter for the PlayerStats we want to count
   *   }
   * })
  **/
  count<T extends PlayerStatCountArgs>(
    args?: Prisma.Subset<T, PlayerStatCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlayerStatCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlayerStat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlayerStatAggregateArgs>(args: Prisma.Subset<T, PlayerStatAggregateArgs>): Prisma.PrismaPromise<GetPlayerStatAggregateType<T>>

  /**
   * Group by PlayerStat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlayerStatGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlayerStatGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlayerStatGroupByArgs['orderBy'] }
      : { orderBy?: PlayerStatGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlayerStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerStatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlayerStat model
 */
readonly fields: PlayerStatFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlayerStat.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlayerStatClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  player<T extends Prisma.PlayerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlayerDefaultArgs<ExtArgs>>): Prisma.Prisma__PlayerClient<runtime.Types.Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  game<T extends Prisma.GameDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameDefaultArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  playerSession<T extends Prisma.PlayerSessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlayerSessionDefaultArgs<ExtArgs>>): Prisma.Prisma__PlayerSessionClient<runtime.Types.Result.GetResult<Prisma.$PlayerSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  gameStat<T extends Prisma.GameStatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameStatDefaultArgs<ExtArgs>>): Prisma.Prisma__GameStatClient<runtime.Types.Result.GetResult<Prisma.$GameStatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlayerStat model
 */
export interface PlayerStatFieldRefs {
  readonly playerStatId: Prisma.FieldRef<"PlayerStat", 'Int'>
  readonly playerId: Prisma.FieldRef<"PlayerStat", 'Int'>
  readonly gameId: Prisma.FieldRef<"PlayerStat", 'Int'>
  readonly playerSessionId: Prisma.FieldRef<"PlayerStat", 'Int'>
  readonly statId: Prisma.FieldRef<"PlayerStat", 'Int'>
  readonly value: Prisma.FieldRef<"PlayerStat", 'String'>
  readonly date: Prisma.FieldRef<"PlayerStat", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PlayerStat findUnique
 */
export type PlayerStatFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * Filter, which PlayerStat to fetch.
   */
  where: Prisma.PlayerStatWhereUniqueInput
}

/**
 * PlayerStat findUniqueOrThrow
 */
export type PlayerStatFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * Filter, which PlayerStat to fetch.
   */
  where: Prisma.PlayerStatWhereUniqueInput
}

/**
 * PlayerStat findFirst
 */
export type PlayerStatFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * Filter, which PlayerStat to fetch.
   */
  where?: Prisma.PlayerStatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayerStats to fetch.
   */
  orderBy?: Prisma.PlayerStatOrderByWithRelationInput | Prisma.PlayerStatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlayerStats.
   */
  cursor?: Prisma.PlayerStatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayerStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayerStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlayerStats.
   */
  distinct?: Prisma.PlayerStatScalarFieldEnum | Prisma.PlayerStatScalarFieldEnum[]
}

/**
 * PlayerStat findFirstOrThrow
 */
export type PlayerStatFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * Filter, which PlayerStat to fetch.
   */
  where?: Prisma.PlayerStatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayerStats to fetch.
   */
  orderBy?: Prisma.PlayerStatOrderByWithRelationInput | Prisma.PlayerStatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlayerStats.
   */
  cursor?: Prisma.PlayerStatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayerStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayerStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlayerStats.
   */
  distinct?: Prisma.PlayerStatScalarFieldEnum | Prisma.PlayerStatScalarFieldEnum[]
}

/**
 * PlayerStat findMany
 */
export type PlayerStatFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * Filter, which PlayerStats to fetch.
   */
  where?: Prisma.PlayerStatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlayerStats to fetch.
   */
  orderBy?: Prisma.PlayerStatOrderByWithRelationInput | Prisma.PlayerStatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlayerStats.
   */
  cursor?: Prisma.PlayerStatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlayerStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlayerStats.
   */
  skip?: number
  distinct?: Prisma.PlayerStatScalarFieldEnum | Prisma.PlayerStatScalarFieldEnum[]
}

/**
 * PlayerStat create
 */
export type PlayerStatCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * The data needed to create a PlayerStat.
   */
  data: Prisma.XOR<Prisma.PlayerStatCreateInput, Prisma.PlayerStatUncheckedCreateInput>
}

/**
 * PlayerStat createMany
 */
export type PlayerStatCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlayerStats.
   */
  data: Prisma.PlayerStatCreateManyInput | Prisma.PlayerStatCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PlayerStat createManyAndReturn
 */
export type PlayerStatCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * The data used to create many PlayerStats.
   */
  data: Prisma.PlayerStatCreateManyInput | Prisma.PlayerStatCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PlayerStat update
 */
export type PlayerStatUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * The data needed to update a PlayerStat.
   */
  data: Prisma.XOR<Prisma.PlayerStatUpdateInput, Prisma.PlayerStatUncheckedUpdateInput>
  /**
   * Choose, which PlayerStat to update.
   */
  where: Prisma.PlayerStatWhereUniqueInput
}

/**
 * PlayerStat updateMany
 */
export type PlayerStatUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlayerStats.
   */
  data: Prisma.XOR<Prisma.PlayerStatUpdateManyMutationInput, Prisma.PlayerStatUncheckedUpdateManyInput>
  /**
   * Filter which PlayerStats to update
   */
  where?: Prisma.PlayerStatWhereInput
  /**
   * Limit how many PlayerStats to update.
   */
  limit?: number
}

/**
 * PlayerStat updateManyAndReturn
 */
export type PlayerStatUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * The data used to update PlayerStats.
   */
  data: Prisma.XOR<Prisma.PlayerStatUpdateManyMutationInput, Prisma.PlayerStatUncheckedUpdateManyInput>
  /**
   * Filter which PlayerStats to update
   */
  where?: Prisma.PlayerStatWhereInput
  /**
   * Limit how many PlayerStats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PlayerStat upsert
 */
export type PlayerStatUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * The filter to search for the PlayerStat to update in case it exists.
   */
  where: Prisma.PlayerStatWhereUniqueInput
  /**
   * In case the PlayerStat found by the `where` argument doesn't exist, create a new PlayerStat with this data.
   */
  create: Prisma.XOR<Prisma.PlayerStatCreateInput, Prisma.PlayerStatUncheckedCreateInput>
  /**
   * In case the PlayerStat was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlayerStatUpdateInput, Prisma.PlayerStatUncheckedUpdateInput>
}

/**
 * PlayerStat delete
 */
export type PlayerStatDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
  /**
   * Filter which PlayerStat to delete.
   */
  where: Prisma.PlayerStatWhereUniqueInput
}

/**
 * PlayerStat deleteMany
 */
export type PlayerStatDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlayerStats to delete
   */
  where?: Prisma.PlayerStatWhereInput
  /**
   * Limit how many PlayerStats to delete.
   */
  limit?: number
}

/**
 * PlayerStat without action
 */
export type PlayerStatDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlayerStat
   */
  select?: Prisma.PlayerStatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlayerStat
   */
  omit?: Prisma.PlayerStatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlayerStatInclude<ExtArgs> | null
}
